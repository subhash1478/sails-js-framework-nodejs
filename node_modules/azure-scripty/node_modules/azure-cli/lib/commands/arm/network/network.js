/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; var util = require("util");

















var utils = require("../../../util/utils");
var profile = require("../../../util/profile/index");
var constants = require("./constants");
var $ = utils.getLocaleString;

var Nic = require("./nic");
var DnsZone = require("./dnsZone");
var VirtualNetworkGateway = require("./virtualNetworkGateway");

var AppGateway = require("./applicationGateway.helper");
var PublicIPAddress = require("./publicIPAddress.helper");

exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage network resources"));


  var nic = network.category("nic").description($("Commands to manage network interfaces"));


  nic.command("list [resource-group]").description($("Get all network interfaces")).usage("[options] [resource-group]").option("-g, --resource-group [resource-group]", $("the name of the resource group")).option("-m, --virtual-machine-scale-set-name [virtual-machine-scale-set-name]", $("the name of the virtual machine scale set")).option("-i, --virtual-machine-index [virtual-machine-index]", $("the index of the virtual machine in scale set")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, options, _) { var networkManagementClient, nic; var __frame = { name: "__1", line: 45 }; return __func(_, this, arguments, __1, 2, __frame, function __$__1() {







      options.resourceGroup = resourceGroup;
      networkManagementClient = getNetworkManagementClient(options);
      nic = new Nic(cli, networkManagementClient);
      return nic.list(options, __cb(_, __frame, 4, 10, function __$__1() { _(); }, true)); }); });


  nic.command("show [resource-group] [name]").description($("Get a network interface")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-m, --virtual-machine-scale-set-name [virtual-machine-scale-set-name]", $("the name of the virtual machine scale set")).option("-i, --virtual-machine-index [virtual-machine-index]", $("the index of virtual machine in scale set")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, name, options, _) { var networkManagementClient, nic; var __frame = { name: "__2", line: 60 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.show(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__2() { _(); }, true)); }, true)); }, true)); }); });


  var nicIpConfig = nic.category("ip-config").description($("Commands to manage network interface ip configurations"));


  var nicAddressPool = nicIpConfig.category("address-pool").description($("Commands to manage backend address pools of the network interface ip configuration"));


  nicAddressPool.command("create [resource-group] [nic-name] [ip-config-name]").description($("Add a backend address pool to a NIC ip configuration")).usage("[options] <resource-group> <nic-name> <ip-config-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-n, --ip-config-name <ip-config-name>", $("the name of ip configuration")).option("-i, --lb-address-pool-id [lb-address-pool-id]", util.format($(("the load balancer backend address pool identifier" + "\n   e.g. %s")), constants.help.id.lbAddressPool)).option("-l, --lb-name [lb-name]", $(("the load balancer name." + "\n   This load balancer must exists in the same resource group as the NIC."))).option("-a, --lb-address-pool-name [lb-address-pool-name]", $(("the name of the address pool that exists in the load balancer" + "\n   Please use --lb-address-pool-id if that is not the case."))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, nicName, ipConfigName, options, _) { var networkManagementClient, nic; var __frame = { name: "__3", line: 88 }; return __func(_, this, arguments, __3, 4, __frame, function __$__3() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;
          ipConfigName = (ipConfigName || options.ipConfigName);

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.createBackendAddressPool(resourceGroup, nicName, ipConfigName, options, __cb(_, __frame, 7, 10, function __$__3() { _(); }, true)); }, true)); }, true)); }); });


  nicAddressPool.command("delete [resource-group] [nic-name] [ip-config-name]").description($("Delete a backend address pool from a NIC ip configuration")).usage("[options] <resource-group> <nic-name> <ip-config-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-n, --ip-config-name <ip-config-name>", $("the name of ip configuration")).option("-i, --lb-address-pool-id [lb-address-pool-id]", util.format($(("the load balancer backend address pool identifier" + "\n   e.g. %s")), constants.help.id.lbAddressPool)).option("-l, --lb-name [lb-name]", $(("the load balancer name." + "\n   This load balancer must exists in the same resource group as the NIC."))).option("-a, --lb-address-pool-name [lb-address-pool-name]", $(("the name of the address pool that exists in the load balancer" + "\n   Please use --lb-address-pool-id if that is not the case."))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, nicName, ipConfigName, options, _) { var networkManagementClient, nic; var __frame = { name: "__4", line: 111 }; return __func(_, this, arguments, __4, 4, __frame, function __$__4() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;
          ipConfigName = (ipConfigName || options.ipConfigName);

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.deleteBackendAddressPool(resourceGroup, nicName, ipConfigName, options, __cb(_, __frame, 7, 10, function __$__4() { _(); }, true)); }, true)); }, true)); }); });


  var nicInboundRule = nicIpConfig.category("inbound-nat-rule").description($("Commands to manage inbound NAT rules of the network interface ip configuration"));


  nicInboundRule.command("create [resource-group] [nic-name] [ip-config-name]").description($("Add an inbound NAT rule to a NIC ip configuration")).usage("[options] <resource-group> <nic-name> <ip-config-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-n, --ip-config-name <ip-config-name>", $("the name of ip configuration")).option("-i, --lb-inbound-nat-rule-id [lb-inbound-nat-rule-id]", util.format($(("the inbound NAT rule identifier." + "\n   e.g. %s")), constants.help.id.lbInboundNatRule)).option("-l, --lb-name [lb-name]", $(("the load balancer name." + "\n   This load balancer must exists in the same resource group as the NIC."))).option("-r, --lb-inbound-nat-rule-name [lb-inbound-nat-rule-name]", $(("the name of the inbound NAT rule that exists in the load balancer." + "\n   Please use --inbound-nat-rule-id if that is not the case."))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __5(resourceGroup, nicName, ipConfigName, options, _) { var networkManagementClient, nic; var __frame = { name: "__5", line: 137 }; return __func(_, this, arguments, __5, 4, __frame, function __$__5() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;
          ipConfigName = (ipConfigName || options.ipConfigName);

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.createInboundNatRule(resourceGroup, nicName, ipConfigName, options, __cb(_, __frame, 7, 10, function __$__5() { _(); }, true)); }, true)); }, true)); }); });


  nicInboundRule.command("delete [resource-group] [nic-name] [ip-config-name]").description($("Delete an inbound NAT rule from a NIC ip configuration")).usage("[options] <resource-group> <nic-name> <ip-config-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-n, --ip-config-name <ip-config-name>", $("the name of ip configuration")).option("-i, --lb-inbound-nat-rule-id [lb-inbound-nat-rule-id]", util.format($(("the inbound NAT rule identifier." + "\n   e.g. %s")), constants.help.id.lbInboundNatRule)).option("-l, --lb-name [lb-name]", $(("the load balancer name." + "\n   This load balancer must exists in the same resource group as the NIC."))).option("-r, --lb-inbound-nat-rule-name [lb-inbound-nat-rule-name]", $(("the name of the inbound NAT rule that exists in the load balancer." + "\n   Please use --inbound-nat-rule-id if that is not the case."))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __6(resourceGroup, nicName, ipConfigName, options, _) { var networkManagementClient, nic; var __frame = { name: "__6", line: 160 }; return __func(_, this, arguments, __6, 4, __frame, function __$__6() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;
          ipConfigName = (ipConfigName || options.ipConfigName);

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.deleteInboundNatRule(resourceGroup, nicName, ipConfigName, options, __cb(_, __frame, 7, 10, function __$__6() { _(); }, true)); }, true)); }, true)); }); });


  var dns = network.category("dns").description($("Commands to manage DNS"));


  var dnsZone = dns.category("zone").description($("Commands to manage DNS zone"));


  dnsZone.command("create [resource-group] [name]").description($("Create a DNS zone")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-t, --tags [tags]", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __7(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__7", line: 183 }; return __func(_, this, arguments, __7, 3, __frame, function __$__7() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.create(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__7() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("set [resource-group] [name]").description($("Set a DNS zone")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __8(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__8", line: 199 }; return __func(_, this, arguments, __8, 3, __frame, function __$__8() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.set(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__8() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("list [resource-group]").description($("Get all DNS zones")).usage("[options] [resource-group]").option("-g, --resource-group [resource-group]", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __9(resourceGroup, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__9", line: 213 }; return __func(_, this, arguments, __9, 2, __frame, function __$__9() {





      options.resourceGroup = resourceGroup;
      dnsManagementClient = getDnsManagementClient(options);
      dnsZone = new DnsZone(cli, dnsManagementClient);
      return dnsZone.list(options, __cb(_, __frame, 4, 14, function __$__9() { _(); }, true)); }); });


  dnsZone.command("show [resource-group] [name]").description($("Get a DNS zone")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $(("the name of the DNS zone" + "\n     You can specify \"*\" (in quotes) for this parameter"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __10(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__10", line: 227 }; return __func(_, this, arguments, __10, 3, __frame, function __$__10() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.show(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__10() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("clear [resource-group] [name]").description($("Delete all record sets in a DNS zone")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-q, --quiet", $("quiet mode, do not ask for clear confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __11(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__11", line: 243 }; return __func(_, this, arguments, __11, 3, __frame, function __$__11() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.clear(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__11() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("delete [resource-group] [name]").description(util.format($(("Delete a DNS zone. WARNING: This will delete the DNS zone and all DNS records. " + "This operation cannot be undone.")))).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __12(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__12", line: 260 }; return __func(_, this, arguments, __12, 3, __frame, function __$__12() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.delete(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__12() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("import [resource-group] [name] [file-name]").description($("Import a DNS zone")).usage("[options] <resource-group> <name> <file-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-f, --file-name <file-name>", $("the name of the zone file")).option("--force", $("force overwrite of existing record sets. Otherwise, records are merged with existing record sets")).option("--debug", $("output debug info")).option("--parse-only", $("parse zone file only, without import")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __13(resourceGroup, name, fileName, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__13", line: 279 }; return __func(_, this, arguments, __13, 4, __frame, function __$__13() {










      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Zone file name: "), fileName, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.fileName = __3;

            dnsManagementClient = getDnsManagementClient(options);
            dnsZone = new DnsZone(cli, dnsManagementClient);
            return dnsZone.import(resourceGroup, name, options, __cb(_, __frame, 7, 14, function __$__13() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  dnsZone.command("export [resource-group] [name] [file-name]").description($("Export a DNS zone as a zone file")).usage("[options] <resource-group> <name> <file-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-f, --file-name <file-name>", $("the name of the zone file")).option("-q, --quiet", $("quiet mode, do not ask for overwrite confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __14(resourceGroup, name, fileName, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__14", line: 297 }; return __func(_, this, arguments, __14, 4, __frame, function __$__14() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Zone file name: "), fileName, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.fileName = __3;

            dnsManagementClient = getDnsManagementClient(options);
            dnsZone = new DnsZone(cli, dnsManagementClient);
            return dnsZone.export(resourceGroup, name, options, __cb(_, __frame, 7, 14, function __$__14() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var dnsRecordSet = dns.category("record-set").description($("Commands to manage record sets in DNS zone"));


  dnsRecordSet.command("create [resource-group] [dns-zone-name] [name] [type]").description($("Create a DNS zone record set")).usage("[options] <resource-group> <dns-zone-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --name <name>", $("the relative name of the record set within the DNS zone")).option("-y, --type <type>", util.format($(("the type of the record set, valid values are" + "\n     [%s]")), constants.dnsZone.setTypes)).option("-l, --ttl [ttl]", $("time to live specified in seconds")).option("-m, --metadata [metadata]", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __15(resourceGroup, dnsZoneName, name, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__15", line: 321 }; return __func(_, this, arguments, __15, 5, __frame, function __$__15() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.createRecordSet(resourceGroup, dnsZoneName, name, options, __cb(_, __frame, 8, 14, function __$__15() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("set [resource-group] [dns-zone-name] [name] [type]").description($("Set a DNS zone record set")).usage("[options] <resource-group> <dns-zone-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --name <name>", $("the relative name of the record set within the DNS zone")).option("-y, --type <type>", util.format($(("the type of the record set, valid values are" + "\n     [%s]")), constants.dnsZone.recordTypes)).option("-l, --ttl [ttl]", $("time to live specified in seconds")).option("-m, --metadata [metadata]", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __16(resourceGroup, dnsZoneName, name, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__16", line: 343 }; return __func(_, this, arguments, __16, 5, __frame, function __$__16() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.setRecordSet(resourceGroup, dnsZoneName, name, options, __cb(_, __frame, 8, 14, function __$__16() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("set-soa-record [resource-group] [dns-zone-name] [record-set-name]").description($("Set a SOA record in a record set under a DNS zone")).usage("[options] <resource-group> <dns-zone-name> <record-set-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-e, --email [email]", $("the email attribute")).option("-i, --expire-time [expire-time]", $("the expire time specified in seconds")).option("-S, --serial-number [serial-number]", $("the serial number")).option("-n, --minimum-ttl [minimum-ttl]", $("the minimum time to live specified in seconds")).option("-r, --refresh-time [refresh-time]", $("the refresh time specified in seconds")).option("-j, --retry-time [retry-time]", $("the retry time specified in seconds")).option("-l, --ttl [ttl]", $("time to live specified in seconds")).option("-m, --metadata [metadata]", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __17(resourceGroup, dnsZoneName, recordSetName, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__17", line: 368 }; return __func(_, this, arguments, __17, 4, __frame, function __$__17() {














      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.setSoaRecord(resourceGroup, dnsZoneName, options, __cb(_, __frame, 6, 14, function __$__17() { _(); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("list [resource-group] [dns-zone-name] [type]").description($("Get all record sets in a DNS zone")).usage("[options] <resource-group> <dns-zone-name> [type]").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-y, --type [type]", util.format($((("the type of the record set, " + "\n     If specified only record sets of this type will be listed.") + "\n     valid values are [%s]")), constants.dnsZone.recordTypes)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __18(resourceGroup, dnsZoneName, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__18", line: 386 }; return __func(_, this, arguments, __18, 4, __frame, function __$__18() {









      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          options.type = (options.type ? options.type : type);

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.listRecordSets(resourceGroup, dnsZoneName, options, __cb(_, __frame, 7, 14, function __$__18() { _(); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("show [resource-group] [dns-zone-name] [name] [type]").description($("Get a record set in a DNS zone")).usage("[options] <resource-group> <dns-zone-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --name <name>", $("the relative name of the record set within the DNS zone")).option("-y, --type <type>", util.format($(("the type of the record set, " + "\n     valid values are [%s]")), constants.dnsZone.recordTypes)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __19(resourceGroup, dnsZoneName, name, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__19", line: 405 }; return __func(_, this, arguments, __19, 5, __frame, function __$__19() {









      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.showRecordSet(resourceGroup, dnsZoneName, name, options, __cb(_, __frame, 8, 14, function __$__19() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("delete [resource-group] [dns-zone-name] [name] [type]").description($("Delete a record set from a DNS zone")).usage("[options] <resource-group> <dns-zone-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --name <name>", $("the relative name of the record set within the DNS zone")).option("-y, --type <type>", util.format($(("the type of the record set, " + "\n     valid values are [%s]")), constants.dnsZone.restrictedRecordTypes)).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __20(resourceGroup, dnsZoneName, name, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__20", line: 426 }; return __func(_, this, arguments, __20, 5, __frame, function __$__20() {










      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), (options.type || type), __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.deleteRecordSet(resourceGroup, dnsZoneName, name, options, __cb(_, __frame, 8, 14, function __$__20() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("add-record [resource-group] [dns-zone-name] [record-set-name] [type]").description($("Add a record in a record set under a DNS zone")).usage("[options] <resource-group> <dns-zone-name> <record-set-name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --record-set-name <record-set-name>", $("the name of the record set")).option("-y, --type <type>", util.format($(((("the type of the record set." + "\nValid values are [%s]") + "\nTo update the SOA record see \"azure network dns record-set set-soa-record --help\"\n") + "\nThe record type A")), constants.dnsZone.setTypes)).option("-a  --ipv4-address [ipv4-address]", $(("the IPv4 address attribute\n" + "\nRecord type AAAA"))).option("-b  --ipv6-address [ipv6-address]", $(("the IPv6 address attribute\n" + "\nRecord type CAA"))).option("-i, --caaflags [flags]", $("the flags attribute")).option("-k, --caatag [tag]", $("the tag attribute")).option("-m, --caavalue [value]", $(("the value attribute\n" + "\nRecord type CNAME"))).option("-c  --cname [cname]", $(("the canonical name (target)\n" + "\nRecord type MX"))).option("-f, --preference [preference]", $("preference attribute")).option("-e, --exchange [exchange]", $(("exchange attribute\n" + "\nRecord type PTR"))).option("-P, --ptrdname [ptrdname]", $(("ptr domain name\n" + "\nRecord type NS"))).option("-d  --nsdname [nsdname]", $(("the domain name attribute\n" + "\nRecord type SRV"))).option("-p, --priority [priority]", $("the priority attribute")).option("-w, --weight [weight]", $("the weight attribute")).option("-o, --port [port]", $("the port")).option("-u, --target [target]", $(("the target attribute\n" + "\nRecord type TXT"))).option("-x, --text [text]", $("the text attribute\n")).option("-q, --quiet", $("quiet mode, do not ask before replacing existing CNAME record")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __21(resourceGroup, dnsZoneName, recordSetName, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__21", line: 472 }; return __func(_, this, arguments, __21, 5, __frame, function __$__21() {



































      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), recordSetName, __cb(_, __frame, 3, 38, function ___(__0, __3) { recordSetName = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.promptRecordParamsIfNotGiven(options, __cb(_, __frame, 8, 14, function __$__21() {
                return dnsZone.addRecord(resourceGroup, dnsZoneName, recordSetName, options, __cb(_, __frame, 9, 14, function __$__21() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("delete-record [resource-group] [dns-zone-name] [record-set-name] [type]").description($("Delete a record from a record set under a DNS zone")).usage("[options] <resource-group> <dns-zone> <record-set-name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --record-set-name <record-set-name>", $("the name of the record set")).option("-y, --type <type>", util.format($((("the type of the record set." + "\n     Valid values are [%s]") + "\nThe record type A \n")), constants.dnsZone.setTypes)).option("-a  --ipv4-address [ipv4-address]", $(("the IPv4 address attribute\n" + "\nRecord type AAAA"))).option("-b  --ipv6-address [ipv6-address]", $(("the IPv6 address attribute\n" + "\nRecord type CNAME"))).option("-c  --cname [cname]", $(("the canonical name (target)\n" + "\nRecord type MX"))).option("-f, --preference [preference]", $("preference attribute")).option("-e, --exchange [exchange]", $(("exchange attribute\n" + "\nRecord type PTR"))).option("-P, --ptrdname [ptrdname]", $(("ptr domain name\n" + "\nRecord type NS"))).option("-d  --nsdname [nsdname]", $(("the domain name attribute\n" + "\nRecord type SRV"))).option("-p, --priority [priority]", $("the priority attribute")).option("-w, --weight [weight]", $("the weight attribute")).option("-o, --port [port]", $("the port")).option("-u, --target [target]", $(("the target attribute\n" + "\nRecord type CAA"))).option("-i, --caaflags [flags]", $("the flags attribute")).option("-k, --caatag [tag]", $("the tag attribute")).option("-m, --caavalue [value]", $(("the value attribute\n" + "\nRecord type TXT"))).option("-x, --text [text]", $("the text attribute\n")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("--keep-empty-record-set", $("keep the empty record set when deleting the last record in the record set")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __22(resourceGroup, dnsZoneName, recordSetName, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__22", line: 519 }; return __func(_, this, arguments, __22, 5, __frame, function __$__22() {



































      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), recordSetName, __cb(_, __frame, 3, 38, function ___(__0, __3) { recordSetName = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.promptRecordParamsIfNotGiven(options, __cb(_, __frame, 8, 14, function __$__22() {
                return dnsZone.deleteRecord(resourceGroup, dnsZoneName, recordSetName, options, __cb(_, __frame, 9, 14, function __$__22() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  var vpnGateway = network.category("vpn-gateway").description($("Commands to manage Virtual Network Gateways"));


  var vpnGatewayRootCert = vpnGateway.category("root-cert").description($("Commands to manage Virtual Network Gateways Root Certificates"));


  vpnGatewayRootCert.command("create [resource-group] [name] [cert-name] [cert-file]").description($("Add a root certificate to a virtual network gateway")).usage("[options] <resource-group> <name> <cert-name> <cert-file>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-c, --cert-name <cert-name>", $("the name of the root certificate")).option("-f, --cert-file <cert-file>", $("the path to the root certificate")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __23(resourceGroup, name, certName, certFile, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__23", line: 545 }; return __func(_, this, arguments, __23, 5, __frame, function __$__23() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Root certificate name: "), certName, __cb(_, __frame, 3, 33, function ___(__0, __3) { certName = __3;
            return cli.interaction.promptIfNotGiven($("Path to root certificate: "), (certFile || options.certFile), __cb(_, __frame, 4, 41, function ___(__0, __4) { options.certFile = __4;

              networkManagementClient = getNetworkManagementClient(options);
              vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
              return vnetGateway.createRootCert(resourceGroup, name, certName, options, __cb(_, __frame, 8, 18, function __$__23() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  vpnGatewayRootCert.command("delete [resource-group] [name] [cert-name]").description($("Delete a root certificate from a virtual network gateway")).usage("[options] <resource-group> <name> <cert-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-c, --cert-name <cert-name>", $("the name of the root certificate")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __24(resourceGroup, name, certName, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__24", line: 564 }; return __func(_, this, arguments, __24, 4, __frame, function __$__24() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Root certificate name: "), certName, __cb(_, __frame, 3, 33, function ___(__0, __3) { certName = __3;

            networkManagementClient = getNetworkManagementClient(options);
            vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
            return vnetGateway.deleteRootCert(resourceGroup, name, certName, options, __cb(_, __frame, 7, 18, function __$__24() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var vpnGatewayRevokedCert = vpnGateway.category("revoked-cert").description($("Commands to manage Virtual Network Gateways Revoked Certificates"));


  vpnGatewayRevokedCert.command("create [resource-group] [name] [cert-name] [thumbprint]").description($("Add a revoked certificate to a virtual network gateway")).usage("[options] <resource-group> <name> <cert-name> <thumbprint>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-c, --cert-name <cert-name>", $("the name of the revoked certificate")).option("-f, --thumbprint <thumbprint>", $("the certificate thumbprint")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __25(resourceGroup, name, certName, thumbprint, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__25", line: 585 }; return __func(_, this, arguments, __25, 5, __frame, function __$__25() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Revoked certificate name: "), certName, __cb(_, __frame, 3, 33, function ___(__0, __3) { certName = __3;
            return cli.interaction.promptIfNotGiven($("Thumbprint: "), (thumbprint || options.thumbprint), __cb(_, __frame, 4, 43, function ___(__0, __4) { options.thumbprint = __4;

              networkManagementClient = getNetworkManagementClient(options);
              vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
              return vnetGateway.createRevokedCert(resourceGroup, name, certName, options, __cb(_, __frame, 8, 18, function __$__25() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  vpnGatewayRevokedCert.command("delete [resource-group] [name] [cert-name]").description($("Delete a revoked certificate from a virtual network gateway")).usage("[options] <resource-group> <name> <cert-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-c, --cert-name <cert-name>", $("the name of the revoked certificate")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __26(resourceGroup, name, certName, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__26", line: 604 }; return __func(_, this, arguments, __26, 4, __frame, function __$__26() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Revoked certificate name: "), certName, __cb(_, __frame, 3, 33, function ___(__0, __3) { certName = __3;

            networkManagementClient = getNetworkManagementClient(options);
            vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
            return vnetGateway.deleteRevokedCert(resourceGroup, name, certName, options, __cb(_, __frame, 7, 18, function __$__26() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var gatewayConnection = network.category("vpn-connection").description($("Commands to manage gateway connections"));


  gatewayConnection.command("create [resource-group] [name] [location] [vnet-gateway1]").description($("Create a gateway connection")).usage("[options] <resource-group> <name> <location> <vnet-gateway1>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-l, --location <location>", $("the location")).option("-i, --vnet-gateway1 <vnet-gateway1>", $("the name of the virtual network gateway")).option("-r, --vnet-gateway1-group [vnet-gateway1-group]", $("the resource group name of the virtual network gateway")).option("-e, --vnet-gateway2 [vnet-gateway2]", $("the name of the connected virtual network gateway")).option("-m, --vnet-gateway2-group [vnet-gateway2-group]", $("the resource group name of the connected virtual network gateway")).option("-d, --lnet-gateway2 [lnet-gateway2]", $("the name of the connected local network gateway")).option("-z, --lnet-gateway2-group [lnet-gateway2-group]", $("the resource group name of the connected local network gateway")).option("-p, --peer-name [peer-name]", $("the name of the connected express route circuit")).option("-x, --peer-group [peer-group]", $("the resource group of the connected express route circuit")).option("-b, --enable-bgp [enable-bgp]", $("whether BGP is enabled for this virtual network gateway or not")).option("-y, --type [type]", util.format($(("the connection type" + "\n     Valid values are [%s]")), constants.vpnGateway.connectionType)).option("-w, --routing-weight [routing-weight]", $("the routing weight")).option("-k, --shared-key [shared-key]", $("the IPsec shared key")).option("-s, --subscription <subscription>", $("the subscription identifier")).option("-t, --tags [tags]", $(constants.help.tags.create)).execute(function __27(resourceGroup, name, location, vnetGateway1, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__27", line: 638 }; return __func(_, this, arguments, __27, 5, __frame, function __$__27() {





















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;
            return cli.interaction.promptIfNotGiven($("Virtual network gateway: "), (vnetGateway1 || options.vnetGateway1), __cb(_, __frame, 4, 45, function ___(__0, __4) { options.vnetGateway1 = __4;

              networkManagementClient = getNetworkManagementClient(options);
              vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
              return vpnGateway.createConnection(resourceGroup, name, options, __cb(_, __frame, 8, 17, function __$__27() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  gatewayConnection.command("set [resource-group] [name]").description($("Set a gateway connection")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-w, --routing-weight [routing-weight]", $("the routing weight")).option("-b, --enable-bgp [enable-bgp]", $("whether BGP is enabled for this virtual network gateway or not")).option("-s, --subscription <subscription>", $("the subscription identifier")).option("-t, --tags [tags]", $(constants.help.tags.set)).execute(function __28(resourceGroup, name, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__28", line: 658 }; return __func(_, this, arguments, __28, 3, __frame, function __$__28() {









      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
          return vpnGateway.setConnection(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__28() { _(); }, true)); }, true)); }, true)); }); });


  gatewayConnection.command("list [resource-group]").description($("Get all gateway connections")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __29(resourceGroup, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__29", line: 672 }; return __func(_, this, arguments, __29, 2, __frame, function __$__29() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        networkManagementClient = getNetworkManagementClient(options);
        vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
        return vpnGateway.listConnections(resourceGroup, options, __cb(_, __frame, 5, 17, function __$__29() { _(); }, true)); }, true)); }); });


  gatewayConnection.command("show [resource-group] [name]").description($("Get details about gateway connection")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __30(resourceGroup, name, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__30", line: 686 }; return __func(_, this, arguments, __30, 3, __frame, function __$__30() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
          return vpnGateway.showConnection(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__30() { _(); }, true)); }, true)); }, true)); }); });


  gatewayConnection.command("delete [resource-group] [name]").usage("[options] <resource-group> <name>").description($("Delete a gateway connection")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __31(resourceGroup, name, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__31", line: 702 }; return __func(_, this, arguments, __31, 3, __frame, function __$__31() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
          return vpnGateway.deleteConnection(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__31() { _(); }, true)); }, true)); }, true)); }); });


  var connectionSharedKey = gatewayConnection.category("shared-key").description($("Commands to manage gateway connection shared key"));


  connectionSharedKey.command("set [resource-group] [name] [value]").description($("Set gateway connection shared key")).usage("[options] <resource-group> <name> <value>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-k, --value <value>", $("the shared key value")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __32(resourceGroup, name, value, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__32", line: 721 }; return __func(_, this, arguments, __32, 4, __frame, function __$__32() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Shared key value: "), value, __cb(_, __frame, 3, 38, function ___(__0, __3) { options.value = __3;

            networkManagementClient = getNetworkManagementClient(options);
            vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
            return vpnGateway.setConnectionSharedKey(resourceGroup, name, options, __cb(_, __frame, 7, 17, function __$__32() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  connectionSharedKey.command("reset [resource-group] [name] [key-length]").description($("Reset gateway connection shared key")).usage("[options] <resource-group> <name> <key-length>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-l, --key-length <key-length>", $("the shared key length")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __33(resourceGroup, name, keyLength, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__33", line: 738 }; return __func(_, this, arguments, __33, 4, __frame, function __$__33() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Shared key length: "), keyLength, __cb(_, __frame, 3, 42, function ___(__0, __3) { options.keyLength = __3;

            networkManagementClient = getNetworkManagementClient(options);
            vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
            return vpnGateway.resetConnectionSharedKey(resourceGroup, name, options, __cb(_, __frame, 7, 17, function __$__33() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  connectionSharedKey.command("show [resource-group] [name]").description($("Get details about gateway connection shared key")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __34(resourceGroup, name, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__34", line: 754 }; return __func(_, this, arguments, __34, 3, __frame, function __$__34() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
          return vpnGateway.showConnectionSharedKey(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__34() { _(); }, true)); }, true)); }, true)); }); });


  var appGateway = network.category("application-gateway").description($("Commands to manage application gateways"));


  appGateway.command("create [resource-group] [name] [location] [servers]").description($("Create an application gateway")).usage("[options] <resource-group> <name> <location> <servers>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the application gateway")).option("-l, --location <location>", $("the location")).option("-e, --vnet-name [vnet-name]", $("the name of the virtual network application gateway should be deployed in")).option("-m, --subnet-name [subnet-name]", $("the name of subnet in the virtual network identified by --vnet-name")).option("-d, --subnet-id [subnet-id]", util.format($(("the subnet identifier." + "\n     e.g. %s")), constants.help.id.subnet)).option("-y, --cert-file [cert-file]", $("the path to the certificate")).option("-x, --cert-password [cert-password]", $("the certificate password")).option("-A, --address-pool-name [address-pool-name]", util.format($(("the address pool name. " + "\n     Default value is \"%s\"")), constants.appGateway.pool.name)).option("-r, --servers <servers>", $("comma separated list of IP addresses or DNS names corresponding to backend servers")).option("-O, --http-settings-name [http-settings-name]", util.format($(("the HTTP settings name. " + "\n     Default value is \"%s\"")), constants.appGateway.settings.name)).option("-i, --http-settings-protocol [http-settings-protocol]", util.format($("the HTTP settings protocol, valid values are [%s]"), constants.appGateway.settings.protocol)).option("-o, --http-settings-port [http-settings-port]", util.format($("the HTTP settings port, valid range is"), utils.toRange(constants.appGateway.settings.port))).option("-f, --http-settings-cookie-based-affinity [http-settings-cookie-based-affinity]", util.format($((("Enable or disable HTTP settings cookie based affinity, valid values are" + "\n     [%s],") + "\n     default value is \"%s\"")), constants.appGateway.settings.affinity, constants.appGateway.settings.affinity[0])).option("-J, --frontend-port-name [frontend-port-name]", util.format($(("the frontend port name." + "\n     Default value is \"%s\"")), constants.appGateway.frontendPort.name)).option("-j, --frontend-port [frontend-port]", util.format($("the frontend port value, valid range is"), utils.toRange(constants.appGateway.settings.port))).option("-F, --frontend-ip-name [frontend-ip-name]", util.format($(("the frontend ip name. " + "\n     Default value is \"%s\"")), constants.appGateway.frontendIp.name)).option("-k, --public-ip-name [public-ip-name]", $("the name of the public ip")).option("-p, --public-ip-id [public-ip-id]", util.format($(("the public ip identifier." + "\n     e.g. %s")), constants.help.id.publicIp)).option("-G, --gateway-ip-name [gateway-ip-name]", util.format($(("the gateway ip name." + "\n     Default value is \"%s\"")), constants.appGateway.gatewayIp.name)).option("-L, --http-listener-name [http-listener-name]", util.format($(("the HTTP listener name." + "\n     Default value is \"%s\"")), constants.appGateway.httpListener.name)).option("-b, --http-listener-protocol [http-listener-protocol]", util.format($("the HTTP listener protocol, valid values are [%s]"), constants.appGateway.httpListener.protocol)).option("-R, --routing-rule-name [routing-rule-name]", util.format($(("the routing rule name." + "\n     Default name is \"%s\"")), constants.appGateway.routingRule.name)).option("-w, --routing-rule-type [routing-rule-type]", util.format($("the request routing rule type, default is \"%s\""), constants.appGateway.routingRule.type[0])).option("-a, --sku-name [sku-name]", util.format($("the name of the sku, valid values are [%s]. Default values is \"%s\""), constants.appGateway.sku.name, constants.appGateway.sku.name[0])).option("-u, --sku-tier [sku-tier]", util.format($("the sku tier, valid values are [%s]. Default values is \"%s\""), constants.appGateway.sku.name.tier, constants.appGateway.sku.tier[0])).option("-z, --capacity [capacity]", util.format($("application gateway instance count in range [%s]. Default value is %s."), constants.appGateway.sku.capacity, constants.appGateway.sku.capacity[0])).option("-t, --tags [tags]", $(constants.help.tags.create)).option("--nowait", $("does not wait for the operation to complete. Returns as soon as the intial request is received by the server.")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __35(resourceGroup, name, location, servers, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__35", line: 822 }; return __func(_, this, arguments, __35, 5, __frame, function __$__35() {
























































      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 33, function ___(__0, __3) { location = __3; return (function __$__35(__then) {

              if ((((options.httpListenerProtocol && (options.httpListenerProtocol.toLowerCase() === constants.appGateway.httpListener.protocol[1].toLowerCase()))) || options.certFile)) {
                return cli.interaction.promptIfNotGiven($("SSL certificate full path: "), options.certFile, __cb(_, __frame, 6, 43, function ___(__0, __4) { options.certFile = __4;
                  return cli.interaction.promptIfNotGiven($("SSL certificate password: "), options.certPassword, __cb(_, __frame, 7, 47, function ___(__0, __5) { options.certPassword = __5; __then(); }, true)); }, true)); } else { __then(); } ; })(function __$__35() { return (function __$__35(__then) {

                if (!options.subnetId) {
                  return cli.interaction.promptIfNotGiven($("Virtual network name: "), options.vnetName, __cb(_, __frame, 10, 43, function ___(__0, __6) { options.vnetName = __6;
                    return cli.interaction.promptIfNotGiven($("Subnet name: "), options.subnetName, __cb(_, __frame, 11, 45, function ___(__0, __7) { options.subnetName = __7; __then(); }, true)); }, true)); } else { __then(); } ; })(function __$__35() {

                return cli.interaction.promptIfNotGiven($("Comma separated backend server IPs: "), (servers || options.servers), __cb(_, __frame, 13, 40, function ___(__0, __8) { options.servers = __8;

                  networkManagementClient = getNetworkManagementClient(options);
                  appGateway = new AppGateway(cli, networkManagementClient);
                  return appGateway.createAppGateway(resourceGroup, name, location, options, __cb(_, __frame, 17, 17, function __$__35() { _(); }, true)); }, true)); }); }); }, true)); }, true)); }, true)); }); });


  appGateway.command("set [resource-group] [name]").description($("Set an application gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the application gateway")).option("-a, --sku-name [sku-name]", util.format($("the name of the sku, valid values are [%s]"), constants.appGateway.sku.name)).option("-u, --sku-tier [sku-tier]", util.format($("the sku tier, valid values are [%s]"), constants.appGateway.sku.tier)).option("-z, --capacity [capacity]", util.format($("application gateway instance count in range [%s]"), constants.appGateway.sku.capacity)).option("-t, --tags [tags]", $(constants.help.tags.set)).option("--nowait", $("does not wait for the operation to complete. Returns as soon as the intial request is received by the server.")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __36(resourceGroup, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__36", line: 856 }; return __func(_, this, arguments, __36, 3, __frame, function __$__36() {














      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          appGateway = new AppGateway(cli, networkManagementClient);
          return appGateway.setAppGateway(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__36() { _(); }, true)); }, true)); }, true)); }); });


  var appGatewaySslPolicy = appGateway.category("ssl-policy").description($("Commands to manage ssl policies"));


  appGatewaySslPolicy.command("list-available").description($("Lists available Ssl options for configuring Ssl policy")).usage("[options]").option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __37(options, _) { var networkManagementClient, appGateway; var __frame = { name: "__37", line: 872 }; return __func(_, this, arguments, __37, 1, __frame, function __$__37() {




      networkManagementClient = getNetworkManagementClient(options);
      appGateway = new AppGateway(cli, networkManagementClient);
      return appGateway.listAvailableSslOptions(options, __cb(_, __frame, 3, 17, function __$__37() { _(); }, true)); }); });


  var appGatewaySslPredefinedPolicy = appGatewaySslPolicy.category("predefined").description($("Commands to manage ssl predefined policies"));


  appGatewaySslPredefinedPolicy.command("show [name]").description($("Gets Ssl predefined policy with the specified policy name")).usage("[options] <name>").option("-n, --name <name>", $("the name of the Ssl predefined policy")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __38(name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__38", line: 886 }; return __func(_, this, arguments, __38, 2, __frame, function __$__38() {





      return cli.interaction.promptIfNotGiven($("Ssl predefined policy name: "), name, __cb(_, __frame, 1, 29, function ___(__0, __1) { name = __1;

        networkManagementClient = getNetworkManagementClient(options);
        appGateway = new AppGateway(cli, networkManagementClient);
        return appGateway.getSslPredefinedPolicy(name, options, __cb(_, __frame, 5, 17, function __$__38() { _(); }, true)); }, true)); }); });


  appGatewaySslPredefinedPolicy.command("list").description($("Lists all SSL predefined policies for configuring Ssl policy")).usage("[options]").option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __39(options, _) { var networkManagementClient, appGateway; var __frame = { name: "__39", line: 898 }; return __func(_, this, arguments, __39, 1, __frame, function __$__39() {




      networkManagementClient = getNetworkManagementClient(options);
      appGateway = new AppGateway(cli, networkManagementClient);
      return appGateway.listSslPredefinedPolicies(options, __cb(_, __frame, 3, 17, function __$__39() { _(); }, true)); }); });


  var appGatewayUrlPathMap = appGateway.category("url-path-map").description("Commands to manage application gateway url path maps");


  appGatewayUrlPathMap.command("set [resource-group] [gateway-name] [name]").description($("Set url path map in application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the url path map")).option("-i, --http-settings-name [http-settings-name]", $("the name of an existing backend HTTP settings")).option("-a, --address-pool-name [address-pool-name]", $("the name of an existing backend address pool")).option("-b, --default-redirect-configuration-name [default-redirect-configuration-name]", $("the name of an existing redirect configuration")).option("--nowait", $("does not wait for the operation to complete. Returns as soon as the intial request is received by the server.")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __40(resourceGroup, gatewayName, name, ruleName, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__40", line: 918 }; return __func(_, this, arguments, __40, 5, __frame, function __$__40() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Url path map name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.setUrlPathMap(resourceGroup, gatewayName, name, options, __cb(_, __frame, 7, 17, function __$__40() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var appGatewayUrlPathMapRule = appGatewayUrlPathMap.category("rule").description("Commands to manage application gateway url path map rules");


  appGatewayUrlPathMapRule.command("create [resource-group] [gateway-name] [url-path-map-name] [name]").description($("Add url path map rule to application gateway")).usage("[options] <resource-group> <gateway-name> <url-path-map-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-u, --url-path-map-name <url-path-map-name>", $("the name of the url path map")).option("-n, --name <name>", $("the name of the url path map rule")).option("-p, --path <path>", $("path, which specifies application gateway path rule")).option("-i, --http-settings-name [http-settings-name]", $("the name of an existing backend HTTP settings")).option("-a, --address-pool-name [address-pool-name]", $("the name of an existing backend address pool")).option("-b, --redirect-configuration-name [redirect-configuration-name]", $("the name of an existing redirect configuration")).option("--nowait", $("does not wait for the operation to complete. Returns as soon as the intial request is received by the server.")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __41(resourceGroup, gatewayName, urlPathMapName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__41", line: 944 }; return __func(_, this, arguments, __41, 5, __frame, function __$__41() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Url path map name: "), (urlPathMapName || options.urlPathMapName), __cb(_, __frame, 3, 47, function ___(__0, __3) { options.urlPathMapName = __3;
            return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 4, 29, function ___(__0, __4) { name = __4;
              return cli.interaction.promptIfNotGiven($("Path: "), options.path, __cb(_, __frame, 5, 37, function ___(__0, __5) { options.path = __5;

                networkManagementClient = getNetworkManagementClient(options);
                appGateway = new AppGateway(cli, networkManagementClient);
                return appGateway.addMapRule(resourceGroup, gatewayName, name, options, __cb(_, __frame, 9, 17, function __$__41() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  appGatewayUrlPathMapRule.command("set [resource-group] [gateway-name] [url-path-map-name] [name]").description($("Set url path map rule in application gateway")).usage("[options] <resource-group> <gateway-name> <url-path-map-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-u, --url-path-map-name <url-path-map-name>", $("the name of the url path map")).option("-n, --name <name>", $("the name of the url path map rule")).option("-p, --path [path]", $("path, which specifies application gateway path rule")).option("-i, --http-settings-name [http-settings-name]", $("the name of an existing backend HTTP settings")).option("-a, --address-pool-name [address-pool-name]", $("the name of an existing backend address pool")).option("-b, --redirect-configuration-name [redirect-configuration-name]", $("the name of an existing redirect configuration")).option("--nowait", $("does not wait for the operation to complete. Returns as soon as the intial request is received by the server.")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __42(resourceGroup, gatewayName, urlPathMapName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__42", line: 969 }; return __func(_, this, arguments, __42, 5, __frame, function __$__42() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Url path map name: "), (urlPathMapName || options.urlPathMapName), __cb(_, __frame, 3, 47, function ___(__0, __3) { options.urlPathMapName = __3;
            return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 4, 29, function ___(__0, __4) { name = __4;

              networkManagementClient = getNetworkManagementClient(options);
              appGateway = new AppGateway(cli, networkManagementClient);
              return appGateway.setMapRule(resourceGroup, gatewayName, name, options, __cb(_, __frame, 8, 17, function __$__42() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  appGatewayUrlPathMapRule.command("show [resource-group] [gateway-name] [url-path-map-name] [name]").description($("Show url path map rule from application gateway")).usage("[options] <resource-group> <gateway-name> <url-path-map-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-u, --url-path-map-name <url-path-map-name>", $("the name of the url path map")).option("-n, --name <name>", $("the name of the url path map rule")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __43(resourceGroup, gatewayName, urlPathMapName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__43", line: 988 }; return __func(_, this, arguments, __43, 5, __frame, function __$__43() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("URL path map name: "), urlPathMapName, __cb(_, __frame, 3, 39, function ___(__0, __3) { urlPathMapName = __3;
            return cli.interaction.promptIfNotGiven($("Url path map name: "), name, __cb(_, __frame, 4, 29, function ___(__0, __4) { name = __4;

              networkManagementClient = getNetworkManagementClient(options);
              appGateway = new AppGateway(cli, networkManagementClient);
              return appGateway.showUrlPathMapRule(resourceGroup, gatewayName, urlPathMapName, name, options, __cb(_, __frame, 8, 17, function __$__43() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  appGatewayUrlPathMapRule.command("list [resource-group] [gateway-name] [url-path-map-name]").description($("List url path map rule from application gateway")).usage("[options] <resource-group> <gateway-name> <url-path-map-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-u, --url-path-map-name <url-path-map-name>", $("the name of the url path map")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __44(resourceGroup, gatewayName, urlPathMapName, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__44", line: 1006 }; return __func(_, this, arguments, __44, 4, __frame, function __$__44() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("URL path map name: "), urlPathMapName, __cb(_, __frame, 3, 39, function ___(__0, __3) { urlPathMapName = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.listUrlPathMapRules(resourceGroup, gatewayName, urlPathMapName, options, __cb(_, __frame, 7, 17, function __$__44() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  appGatewayUrlPathMapRule.command("delete [resource-group] [gateway-name] [url-path-map-name] [name]").description($("Delete an url path map rule from an application gateway")).usage("[options] <resource-group> <gateway-name> <url-path-map-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-u, --url-path-map-name <url-path-map-name>", $("the name of the url path map")).option("-n, --name <name>", $("the name of the map rule")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("--nowait", $("does not wait for the operation to complete. Returns as soon as the intial request is received by the server.")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __45(resourceGroup, gatewayName, urlPathMapName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__45", line: 1026 }; return __func(_, this, arguments, __45, 5, __frame, function __$__45() {










      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Url path map rule name: "), (urlPathMapName || options.urlPathMapName), __cb(_, __frame, 3, 47, function ___(__0, __3) { options.urlPathMapName = __3;
            return cli.interaction.promptIfNotGiven($("Url path map rule name: "), name, __cb(_, __frame, 4, 29, function ___(__0, __4) { name = __4;

              networkManagementClient = getNetworkManagementClient(options);
              appGateway = new AppGateway(cli, networkManagementClient);
              return appGateway.removeMapRule(resourceGroup, gatewayName, name, options, __cb(_, __frame, 8, 17, function __$__45() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  var webApplicationFirewallConfiguration = appGateway.category("waf-config").description($("Commands to manage web application firewall configuration"));


  var disabledRuleGroups = webApplicationFirewallConfiguration.category("disabled-rule-group").description($("Commands to manage disabled rule groups"));


  disabledRuleGroups.command("create [resource-group] [gateway-name] [rule-group-name]").description($("Create a group of disabled rules")).usage("[options] <resource-group> <gateway-name> <rule-group-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --rule-group-name <rule-group-name>", $("the name of the rule group that will be disabled")).option("-r, --rules [rules]", $("The list of rules that will be disabled. If null, all rules of the rule group will be disabled")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __46(resourceGroup, gatewayName, ruleGroupName, options, _) { var subscription, networkManagementClient, appGateway; var __frame = { name: "__46", line: 1051 }; return __func(_, this, arguments, __46, 4, __frame, function __$__46() {








      return cli.interaction.promptIfNotGiven($("Resource group: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("rule group name: "), ruleGroupName, __cb(_, __frame, 3, 46, function ___(__0, __3) { options.ruleGroupName = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.createDisabledRuleGroup(resourceGroup, gatewayName, options, __cb(_, __frame, 8, 17, function __$__46() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  disabledRuleGroups.command("set [resource-group] [gateway-name] [rule-group-name]").description($("Update a group of disabled rules")).usage("[options] <resource-group> <gateway-name> <rule-group-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --rule-group-name <rule-group-name>", $("the name of the rule group that will be disabled")).option("-r, --rules [rules]", $("The list of rules that will be disabled. If null, all rules of the rule group will be disabled")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __47(resourceGroup, gatewayName, ruleGroupName, options, _) { var subscription, networkManagementClient, appGateway; var __frame = { name: "__47", line: 1070 }; return __func(_, this, arguments, __47, 4, __frame, function __$__47() {








      return cli.interaction.promptIfNotGiven($("Resource group: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("rule group name: "), ruleGroupName, __cb(_, __frame, 3, 46, function ___(__0, __3) { options.ruleGroupName = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.setDisabledRuleGroup(resourceGroup, gatewayName, options, __cb(_, __frame, 8, 17, function __$__47() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  disabledRuleGroups.command("show [resource-group] [gateway-name] [rule-group-name]").description($("Get a group of disabled rules")).usage("[options] <resource-group> <gateway-name> <rule-group-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --rule-group-name <rule-group-name>", $("the name of the rule group that will be disabled")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __48(resourceGroup, gatewayName, ruleGroupName, options, _) { var subscription, networkManagementClient, appGateway; var __frame = { name: "__48", line: 1088 }; return __func(_, this, arguments, __48, 4, __frame, function __$__48() {







      return cli.interaction.promptIfNotGiven($("Resource group: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("rule group name: "), ruleGroupName, __cb(_, __frame, 3, 46, function ___(__0, __3) { options.ruleGroupName = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.showDisabledRuleGroup(resourceGroup, gatewayName, options, __cb(_, __frame, 8, 17, function __$__48() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  disabledRuleGroups.command("list [resource-group] [gateway-name]").description($("List all disabled rule groups for a gateway")).usage("[options] <resource-group> <gateway-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __49(resourceGroup, gatewayName, options, _) { var subscription, networkManagementClient, appGateway; var __frame = { name: "__49", line: 1105 }; return __func(_, this, arguments, __49, 3, __frame, function __$__49() {






      return cli.interaction.promptIfNotGiven($("Resource group: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;

          subscription = profile.current.getSubscription(options.subscription);
          networkManagementClient = utils.createNetworkManagementClient(subscription);
          appGateway = new AppGateway(cli, networkManagementClient);
          return appGateway.listDisabledRuleGroups(resourceGroup, gatewayName, options, __cb(_, __frame, 7, 17, function __$__49() { _(); }, true)); }, true)); }, true)); }); });


  disabledRuleGroups.command("delete [resource-group] [gateway-name] [rule-group-name]").description($("Delete a group of disabled rules")).usage("[options] <resource-group> <gateway-name> <rule-group-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --rule-group-name <rule-group-name>", $("the name of the rule group that will be disabled")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __50(resourceGroup, gatewayName, ruleGroupName, options, _) { var subscription, networkManagementClient, appGateway; var __frame = { name: "__50", line: 1123 }; return __func(_, this, arguments, __50, 4, __frame, function __$__50() {








      return cli.interaction.promptIfNotGiven($("Resource group: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("rule group name: "), ruleGroupName, __cb(_, __frame, 3, 46, function ___(__0, __3) { options.ruleGroupName = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.deleteDisabledRuleGroup(resourceGroup, gatewayName, options, __cb(_, __frame, 8, 17, function __$__50() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var publicIPAddresses = network.category("public-ip").description($("Commands to manage public ip addresses"));


  publicIPAddresses.command("show [resource-group] [name]").description($("Show a public ip address")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the public ip address")).option("-v, --vmss-name [vmss-name]", $("the name of the vmss")).option("-m, --vm-index [vm-index]", $("the vm index")).option("-c, --nic-name [nic-name]", $("the nic name")).option("-i, --ip-config-name [ip-config-name]", $("the ip config name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __51(resourceGroup, name, options, _) { var subscription, networkManagementClient, publicIPAddress; var __frame = { name: "__51", line: 1147 }; return __func(_, this, arguments, __51, 3, __frame, function __$__51() {










      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          subscription = profile.current.getSubscription(options.subscription);
          networkManagementClient = utils.createNetworkManagementClient(subscription);
          publicIPAddress = new PublicIPAddress(cli, networkManagementClient);
          return publicIPAddress.show(resourceGroup, name, options, __cb(_, __frame, 7, 22, function __$__51() { _(); }, true)); }, true)); }, true)); }); });


  publicIPAddresses.command("list [resource-group]").description($("List public ip addresses")).usage("[options] <resource-group>").option("-g, --resource-group [resource-group]", $("the name of the resource group")).option("-v, --vmss-name [vmss-name]", $("the name of the vmss")).option("-m, --vm-index [vm-index]", $("the vm index")).option("-c, --nic-name [nic-name]", $("the nic name")).option("-i, --ip-config-name [ip-config-name]", $("the ip config name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __52(resourceGroup, options, _) { var subscription, networkManagementClient, publicIPAddress; var __frame = { name: "__52", line: 1166 }; return __func(_, this, arguments, __52, 2, __frame, function __$__52() {









      options.resourceGroup = resourceGroup;

      subscription = profile.current.getSubscription(options.subscription);
      networkManagementClient = utils.createNetworkManagementClient(subscription);
      publicIPAddress = new PublicIPAddress(cli, networkManagementClient);
      return publicIPAddress.list(resourceGroup, options, __cb(_, __frame, 6, 22, function __$__52() { _(); }, true)); }); });


  function getNetworkManagementClient(options) {
    var subscription = profile.current.getSubscription(options.subscription);
    return utils.createNetworkManagementClient(subscription); };


  function getDnsManagementClient(options) {
    var subscription = profile.current.getSubscription(options.subscription);
    return utils.createDnsResourceProviderClient(subscription); };};
