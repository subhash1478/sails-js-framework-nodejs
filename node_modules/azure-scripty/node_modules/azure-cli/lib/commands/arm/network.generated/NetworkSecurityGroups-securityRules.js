/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var generatorUtils = require("../../../util/generatorUtils");






















var util = require("util");
var validation = require("../../../util/validation");

var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage network resources"));

  var networkSecurityGroups = network.category("nsg").description($("Commands to manage network security groups"));

  var securityRules = networkSecurityGroups.category("rule").description($("Commands to manage security rules"));


  var defaultProtocol = "*";
  var defaultSourcePortRange = "*";
  var defaultDestinationPortRange = "80";
  var defaultSourceAddressPrefix = "*";
  var defaultDestinationAddressPrefix = "*";
  var defaultAccess = "Allow";
  var defaultDirection = "Inbound";

  securityRules.command("create [resource-group] [nsg-name] [name] [priority]").description($("Create a security rule")).usage("[options] <resource-group> <nsg-name> <name> <priority>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the nsg name")).option("-n, --name <name>", $("the name of the security rule")).option("-d, --description [description]", $(("a description for this rule. Restricted" + "\n     to 140 chars"))).option("-p, --protocol [protocol]", $(("network protocol this rule applies to." + "\n     Possible values are 'Tcp', 'Udp', and '*'"))).option("-o, --source-port-range [source-port-range]", $(("the source port or range. Integer or" + "\n     range between 0 and 65535. Asterix '*' can also be used to match all ports"))).option("-u, --destination-port-range [destination-port-range]", $(("the destination port or range. Integer" + "\n     or range between 0 and 65535. Asterix '*' can also be used to match all ports"))).option("-f, --source-address-prefix [source-address-prefix]", $(((("the CIDR or source IP range. Asterix" + "\n     '*' can also be used to match all source IPs. Default tags such as") + "\n     'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If") + "\n     this is an ingress rule, specifies where network traffic originates from"))).option("--source-address-prefixes [source-address-prefixes]", $("the CIDR or source IP ranges")).option("--source-application-security-groups [source-application-security-groups]", $(("the application security group" + "\n     specified as source"))).option("-e, --destination-address-prefix [destination-address-prefix]", $(((("the destination address prefix. CIDR or" + "\n     destination IP range. Asterix '*' can also be used to match all source IPs.") + "\n     Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'") + "\n     can also be used"))).option("--destination-address-prefixes [destination-address-prefixes]", $(("the destination address prefixes. CIDR" + "\n     or destination IP ranges"))).option("--destination-application-security-groups [destination-application-security-groups]", $(("the application security group" + "\n     specified as destination"))).option("--source-port-ranges [source-port-ranges]", $("the source port ranges")).option("--destination-port-ranges [destination-port-ranges]", $("the destination port ranges")).option("-c, --access [access]", $(("the network traffic is allowed or" + "\n     denied. Possible values are: 'Allow' and 'Deny'"))).option("-y, --priority <priority>", $(((("the priority of the rule. The value can" + "\n     be between 100 and 4096. The priority number must be unique for each rule in") + "\n     the collection. The lower the priority number, the higher the priority of the") + "\n     rule"))).option("-r, --direction [direction]", $((("the direction of the rule. The" + "\n     direction specifies if rule will be evaluated on incoming or outcoming traffic.") + "\n     Possible values are: 'Inbound' and 'Outbound'"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, nsgName, name, priority, options, _) { var useDefaults, subscription, networkManagementClient, securityRule, progress, parameters; var __frame = { name: "__1", line: 89 }; return __func(_, this, arguments, __1, 5, __frame, function __$__1() {









































      useDefaults = true;
      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("nsg name : "), nsgName, __cb(_, __frame, 3, 32, function ___(__0, __2) { nsgName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 4, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("priority : "), priority, __cb(_, __frame, 5, 41, function ___(__0, __4) { options.priority = __4;

              subscription = profile.current.getSubscription(options.subscription);
              networkManagementClient = utils.createNetworkManagementClient(subscription);


              progress = cli.interaction.progress(util.format($("Looking up the security rule \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                          return networkManagementClient.securityRules.get(resourceGroup, nsgName, name, null, __cb(_, __frame, 13, 61, function ___(__0, __5) { securityRule = __5; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__1() { if (e) {

                            if ((e.statusCode === 404)) {
                              securityRule = null; }
                             else {
                              return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__1() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {


                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                  if (securityRule) {
                    return _(new Error(util.format($("security rule with name \"%s\" already exists in the resource group \"%s\""), name, resourceGroup))); } ;


                  parameters = { };
                  if (options.description) {
                    parameters.description = options.description; } ;


                  if (options.protocol) {
                    parameters.protocol = validation.isIn(options.protocol, ["Tcp","Udp","*",], "--protocol"); } else {
                    if (useDefaults) {
                      parameters.protocol = defaultProtocol; } ; } ;


                  if (options.sourcePortRange) {
                    parameters.sourcePortRange = options.sourcePortRange; } else {
                    if (useDefaults) {
                      parameters.sourcePortRange = defaultSourcePortRange; } ; } ;


                  if (options.destinationPortRange) {
                    parameters.destinationPortRange = options.destinationPortRange; } else {
                    if (useDefaults) {
                      parameters.destinationPortRange = defaultDestinationPortRange; } ; } ;


                  if (options.sourceAddressPrefix) {
                    parameters.sourceAddressPrefix = options.sourceAddressPrefix; } else {
                    if (useDefaults) {
                      parameters.sourceAddressPrefix = defaultSourceAddressPrefix; } ; } ;


                  if (options.sourceAddressPrefixes) {
                    parameters.sourceAddressPrefixes = generatorUtils.splitStringByCharacter(options.sourceAddressPrefixes, ","); } ;

                  if ((options.sourceAddressPrefixes !== undefined)) {
                    delete parameters.sourceAddressPrefix; } ;


                  if (options.sourceApplicationSecurityGroups) {
                    parameters.sourceApplicationSecurityGroups = options.sourceApplicationSecurityGroups.split(",").map(function(item) { return { id: item }; }); } ;

                  if ((options.sourceApplicationSecurityGroups !== undefined)) {
                    delete parameters.sourceAddressPrefixes;
                    delete parameters.sourceAddressPrefix; } ;


                  if (options.destinationAddressPrefix) {
                    parameters.destinationAddressPrefix = options.destinationAddressPrefix; } else {
                    if (useDefaults) {
                      parameters.destinationAddressPrefix = defaultDestinationAddressPrefix; } ; } ;


                  if (options.destinationAddressPrefixes) {
                    parameters.destinationAddressPrefixes = generatorUtils.splitStringByCharacter(options.destinationAddressPrefixes, ","); } ;

                  if ((options.destinationAddressPrefixes !== undefined)) {
                    delete parameters.destinationAddressPrefix; } ;


                  if (options.destinationApplicationSecurityGroups) {
                    parameters.destinationApplicationSecurityGroups = options.destinationApplicationSecurityGroups.split(",").map(function(item) { return { id: item }; }); } ;

                  if ((options.destinationApplicationSecurityGroups !== undefined)) {
                    delete parameters.destinationAddressPrefixes;
                    delete parameters.destinationAddressPrefix; } ;


                  if (options.sourcePortRanges) {
                    parameters.sourcePortRanges = generatorUtils.splitStringByCharacter(options.sourcePortRanges, ","); } ;

                  if ((options.sourcePortRanges !== undefined)) {
                    delete parameters.sourcePortRange; } ;


                  if (options.destinationPortRanges) {
                    parameters.destinationPortRanges = generatorUtils.splitStringByCharacter(options.destinationPortRanges, ","); } ;

                  if ((options.destinationPortRanges !== undefined)) {
                    delete parameters.destinationPortRange; } ;


                  if (options.access) {
                    parameters.access = validation.isIn(options.access, ["Allow","Deny",], "--access"); } else {
                    if (useDefaults) {
                      parameters.access = defaultAccess; } ; } ;


                  if (options.priority) {
                    parameters.priority = parseInt(options.priority, 10); } ;


                  if (options.direction) {
                    parameters.direction = validation.isIn(options.direction, ["Inbound","Outbound",], "--direction"); } else {
                    if (useDefaults) {
                      parameters.direction = defaultDirection; } ; } ;


                  generatorUtils.removeEmptyObjects(parameters);
                  progress = cli.interaction.progress(util.format($("Creating security rule \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                        return networkManagementClient.securityRules.createOrUpdate(resourceGroup, nsgName, name, parameters, __cb(_, __frame, 126, 61, function ___(__0, __6) { securityRule = __6; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

                          progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                      cli.interaction.formatOutput(securityRule, generatorUtils.traverse); _(); }); }); }); }); }, true)); }, true)); }, true)); }, true)); }); });


  securityRules.command("set [resource-group] [nsg-name] [name]").description($("Update a security rule")).usage("[options] <resource-group> <nsg-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the nsg name")).option("-n, --name <name>", $("the name of the security rule")).option("-d, --description [description]", $(("a description for this rule. Restricted" + "\n     to 140 chars"))).option("-p, --protocol [protocol]", $(("network protocol this rule applies to." + "\n     Possible values are 'Tcp', 'Udp', and '*'"))).option("-o, --source-port-range [source-port-range]", $(("the source port or range. Integer or" + "\n     range between 0 and 65535. Asterix '*' can also be used to match all ports"))).option("-u, --destination-port-range [destination-port-range]", $(("the destination port or range. Integer" + "\n     or range between 0 and 65535. Asterix '*' can also be used to match all ports"))).option("-f, --source-address-prefix [source-address-prefix]", $(((("the CIDR or source IP range. Asterix" + "\n     '*' can also be used to match all source IPs. Default tags such as") + "\n     'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If") + "\n     this is an ingress rule, specifies where network traffic originates from"))).option("--source-address-prefixes [source-address-prefixes]", $("the CIDR or source IP ranges")).option("--source-application-security-groups [source-application-security-groups]", $(("the application security group" + "\n     specified as source"))).option("-e, --destination-address-prefix [destination-address-prefix]", $(((("the destination address prefix. CIDR or" + "\n     destination IP range. Asterix '*' can also be used to match all source IPs.") + "\n     Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'") + "\n     can also be used"))).option("--destination-address-prefixes [destination-address-prefixes]", $(("the destination address prefixes. CIDR" + "\n     or destination IP ranges"))).option("--destination-application-security-groups [destination-application-security-groups]", $(("the application security group" + "\n     specified as destination"))).option("--source-port-ranges [source-port-ranges]", $("the source port ranges")).option("--destination-port-ranges [destination-port-ranges]", $("the destination port ranges")).option("-c, --access [access]", $(("the network traffic is allowed or" + "\n     denied. Possible values are: 'Allow' and 'Deny'"))).option("-y, --priority [priority]", $(((("the priority of the rule. The value can" + "\n     be between 100 and 4096. The priority number must be unique for each rule in") + "\n     the collection. The lower the priority number, the higher the priority of the") + "\n     rule"))).option("-r, --direction [direction]", $((("the direction of the rule. The" + "\n     direction specifies if rule will be evaluated on incoming or outcoming traffic.") + "\n     Possible values are: 'Inbound' and 'Outbound'"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, nsgName, name, options, _) { var useDefaults, subscription, networkManagementClient, securityRule, progress, parameters; var __frame = { name: "__2", line: 264 }; return __func(_, this, arguments, __2, 4, __frame, function __$__2() {









































      useDefaults = false;
      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("nsg name : "), nsgName, __cb(_, __frame, 3, 32, function ___(__0, __2) { nsgName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 4, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the security rule \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                        return networkManagementClient.securityRules.get(resourceGroup, nsgName, name, null, __cb(_, __frame, 12, 61, function ___(__0, __4) { securityRule = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__2() { if (e) {

                          if ((e.statusCode === 404)) {
                            securityRule = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__2() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


                if (!securityRule) {
                  return _(new Error(util.format($("security rule with name \"%s\" not found in the resource group \"%s\""), name, resourceGroup))); } ;


                parameters = securityRule;
                if (options.description) {
                  parameters.description = options.description; } ;


                if (options.protocol) {
                  parameters.protocol = validation.isIn(options.protocol, ["Tcp","Udp","*",], "--protocol"); } else {
                  if (useDefaults) {
                    parameters.protocol = defaultProtocol; } ; } ;


                if (options.sourcePortRange) {
                  parameters.sourcePortRange = options.sourcePortRange; } else {
                  if (useDefaults) {
                    parameters.sourcePortRange = defaultSourcePortRange; } ; } ;


                if (options.destinationPortRange) {
                  parameters.destinationPortRange = options.destinationPortRange; } else {
                  if (useDefaults) {
                    parameters.destinationPortRange = defaultDestinationPortRange; } ; } ;


                if (options.sourceAddressPrefix) {
                  parameters.sourceAddressPrefix = options.sourceAddressPrefix; } else {
                  if (useDefaults) {
                    parameters.sourceAddressPrefix = defaultSourceAddressPrefix; } ; } ;


                if (options.sourceAddressPrefixes) {
                  parameters.sourceAddressPrefixes = generatorUtils.splitStringByCharacter(options.sourceAddressPrefixes, ","); } ;

                if ((options.sourceAddressPrefixes !== undefined)) {
                  delete parameters.sourceAddressPrefix; } ;


                if (options.sourceApplicationSecurityGroups) {
                  parameters.sourceApplicationSecurityGroups = options.sourceApplicationSecurityGroups.split(",").map(function(item) { return { id: item }; }); } ;

                if ((options.sourceApplicationSecurityGroups !== undefined)) {
                  delete parameters.sourceAddressPrefixes;
                  delete parameters.sourceAddressPrefix; } ;


                if (options.destinationAddressPrefix) {
                  parameters.destinationAddressPrefix = options.destinationAddressPrefix; } else {
                  if (useDefaults) {
                    parameters.destinationAddressPrefix = defaultDestinationAddressPrefix; } ; } ;


                if (options.destinationAddressPrefixes) {
                  parameters.destinationAddressPrefixes = generatorUtils.splitStringByCharacter(options.destinationAddressPrefixes, ","); } ;

                if ((options.destinationAddressPrefixes !== undefined)) {
                  delete parameters.destinationAddressPrefix; } ;


                if (options.destinationApplicationSecurityGroups) {
                  parameters.destinationApplicationSecurityGroups = options.destinationApplicationSecurityGroups.split(",").map(function(item) { return { id: item }; }); } ;

                if ((options.destinationApplicationSecurityGroups !== undefined)) {
                  delete parameters.destinationAddressPrefixes;
                  delete parameters.destinationAddressPrefix; } ;


                if (options.sourcePortRanges) {
                  parameters.sourcePortRanges = generatorUtils.splitStringByCharacter(options.sourcePortRanges, ","); } ;

                if ((options.sourcePortRanges !== undefined)) {
                  delete parameters.sourcePortRange; } ;


                if (options.destinationPortRanges) {
                  parameters.destinationPortRanges = generatorUtils.splitStringByCharacter(options.destinationPortRanges, ","); } ;

                if ((options.destinationPortRanges !== undefined)) {
                  delete parameters.destinationPortRange; } ;


                if (options.access) {
                  parameters.access = validation.isIn(options.access, ["Allow","Deny",], "--access"); } else {
                  if (useDefaults) {
                    parameters.access = defaultAccess; } ; } ;


                if (options.priority) {
                  parameters.priority = parseInt(options.priority, 10); } ;


                if (options.direction) {
                  parameters.direction = validation.isIn(options.direction, ["Inbound","Outbound",], "--direction"); } else {
                  if (useDefaults) {
                    parameters.direction = defaultDirection; } ; } ;


                generatorUtils.removeEmptyObjects(parameters);
                progress = cli.interaction.progress(util.format($("Updating security rule \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                      return networkManagementClient.securityRules.createOrUpdate(resourceGroup, nsgName, name, parameters, __cb(_, __frame, 125, 61, function ___(__0, __5) { securityRule = __5; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

                        progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


                    cli.interaction.formatOutput(securityRule, generatorUtils.traverse); _(); }); }); }); }); }, true)); }, true)); }, true)); }); });


  securityRules.command("delete [resource-group] [nsg-name] [name]").description($("Delete a security rule")).usage("[options] <resource-group> <nsg-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the nsg name")).option("-n, --name <name>", $("the name of the security rule")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, nsgName, name, options, _) { var subscription, networkManagementClient, securityRule, progress; var __frame = { name: "__3", line: 405 }; return __func(_, this, arguments, __3, 4, __frame, function __$__3() {








      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __2) { resourceGroup = __2;
        return cli.interaction.promptIfNotGiven($("nsg name : "), nsgName, __cb(_, __frame, 2, 32, function ___(__0, __3) { nsgName = __3;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __4) { name = __4;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the security rule \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                        return networkManagementClient.securityRules.get(resourceGroup, nsgName, name, null, __cb(_, __frame, 11, 61, function ___(__0, __5) { securityRule = __5; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__3() { if (e) {

                          if ((e.statusCode === 404)) {
                            securityRule = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__3() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


                if (!securityRule) {
                  return _(new Error(util.format($("security rule with name \"%s\" not found in the resource group \"%s\""), name, resourceGroup))); } ; return (function __$__3(_) {


                  var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete security rule \"%s\"? [y/n] "), name), __cb(_, __frame, 26, 45, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -404, 17, function ___(__0, __6) { return (function __$__3(__then) { if (__6) {
                      cli.output.info(util.format($("security rule \"%s\" was not deleted and still exists in the resource group \"%s\""), name, resourceGroup)); return _(null); } else { __then(); } ; })(function __$__3() {



                    progress = cli.interaction.progress(util.format($("Deleting security rule \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                          return networkManagementClient.securityRules.deleteMethod(resourceGroup, nsgName, name, __cb(_, __frame, 33, 61, function ___(__0, __7) { securityRule = __7;
                            cli.output.info(util.format($("security rule \"%s\" was successfully deleted from resource group \"%s\""), name, resourceGroup)); _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {

                            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() { _(); }); }); }); }, true)); }); }); }, true)); }, true)); }, true)); }); });



  securityRules.command("show [resource-group] [nsg-name] [name]").description($("Show a security rule")).usage("[options] <resource-group> <nsg-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the nsg name")).option("-n, --name <name>", $("the name of the security rule")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, nsgName, name, options, _) { var subscription, networkManagementClient, securityRule, progress; var __frame = { name: "__4", line: 452 }; return __func(_, this, arguments, __4, 4, __frame, function __$__4() {







      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("nsg name : "), nsgName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nsgName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the security rule \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {

                        return networkManagementClient.securityRules.get(resourceGroup, nsgName, name, null, __cb(_, __frame, 11, 61, function ___(__0, __4) { securityRule = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__4() { if (e) {

                          if ((e.statusCode === 404)) {
                            securityRule = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__4() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__4() {


                if (!securityRule) {
                  cli.output.warn(util.format($("security rule with name \"%s\" not found in the resource group \"%s\""), name, resourceGroup)); } ;


                cli.interaction.formatOutput(securityRule, generatorUtils.traverse); _(); }); }); }, true)); }, true)); }, true)); }); });


  securityRules.command("list [resource-group] [nsg-name]").description($("List security rules")).usage("[options] <resource-group> <nsg-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the nsg name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __5(resourceGroup, nsgName, options, _) { var subscription, networkManagementClient, securityRule, progress; var __frame = { name: "__5", line: 487 }; return __func(_, this, arguments, __5, 3, __frame, function __$__5() {






      options.resourceGroup = resourceGroup;
      subscription = profile.current.getSubscription(options.subscription);
      networkManagementClient = utils.createNetworkManagementClient(subscription);

      securityRule = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() { return (function __$__5(__then) {


              if ((typeof networkManagementClient.securityRules.listAll != "function")) {
                return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 9, 42, function ___(__0, __1) { resourceGroup = __1;
                  return cli.interaction.promptIfNotGiven($("network security group : "), nsgName, __cb(_, __frame, 10, 36, function ___(__0, __2) { nsgName = __2;
                    progress = cli.interaction.progress($("Getting the security rules"));
                    return networkManagementClient.securityRules.list(resourceGroup, nsgName, __cb(_, __frame, 12, 63, function ___(__0, __3) { securityRule = __3; __then(); }, true)); }, true)); }, true)); } else { return (function __$__5(__then) {

                  if (options.resourceGroup) {
                    return cli.interaction.promptIfNotGiven($("network security group : "), nsgName, __cb(_, __frame, 15, 38, function ___(__0, __4) { nsgName = __4;
                      progress = cli.interaction.progress($("Getting the security rules"));
                      return networkManagementClient.securityRules.list(resourceGroup, nsgName, __cb(_, __frame, 17, 65, function ___(__0, __5) { securityRule = __5; __then(); }, true)); }, true)); } else {

                    return cli.interaction.promptIfNotGiven($("network security group : "), nsgName, __cb(_, __frame, 19, 38, function ___(__0, __6) { nsgName = __6;
                      progress = cli.interaction.progress($("Getting the security rules"));
                      return networkManagementClient.securityRules.listAll(nsgName, __cb(_, __frame, 21, 65, function ___(__0, __7) { securityRule = __7; __then(); }, true)); }, true)); } ; })(__then); } ; })(function __$__5() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__5() {



              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__5() {


          cli.interaction.formatOutput(securityRule, function(securityRule) {
            if ((!securityRule || (securityRule.length === 0))) {
              cli.output.warn($("No security rules found")); }
             else {
              cli.output.table(securityRule, function(row, item) {
                generatorUtils.showTableRow(row, item); }); } ; }); _(); }); }); }); });};
