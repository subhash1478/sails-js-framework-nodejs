/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var generatorUtils = require("../../../util/generatorUtils");






















var util = require("util");
var validation = require("../../../util/validation");

var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage network resources"));

  var applicationGateways = network.category("application-gateway").description($("Commands to manage application gateways"));

  var backendHttpSettingsCollection = applicationGateways.category("http-settings").description($("Commands to manage backend http settings collection"));


  backendHttpSettingsCollection.command("create [resource-group] [gateway-name] [name] [port]").description($("Create a backend http settings collection")).usage("[options] <resource-group> <gateway-name> <name> <port>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the backend http settings collection")).option("-o, --port <port>", $("port")).option("-p, --protocol [protocol]", $("protocol")).option("-c, --cookie-based-affinity [cookie-based-affinity]", $("cookie based affinity")).option("-r, --probe-name [probe-name]", $(("sets probe. This option is mutually" + "\n     exclusive with --probe-id"))).option("-i, --probe-id [probe-id]", $(("sets probe. This option is mutually" + "\n     exclusive with --probe-name"))).option("-m, --host-name [host-name]", $(("host header to be sent to the backend" + "\n     servers"))).option("-k, --pick-host-name [pick-host-name]", $(("whether to pick host header should be" + "\n     picked from the host name of the backend server. Default value is false"))).option("-a, --affinity-cookie-name [affinity-cookie-name]", $(("cookie name to use for the affinity" + "\n     cookie"))).option("-e, --probe-enabled [probe-enabled]", $(("whether the probe is enabled. Default" + "\n     value is false"))).option("-d, --path [path]", $((("path which should be used as a prefix" + "\n     for all HTTP requests. Null means no path will be prefixed. Default value is") + "\n     null"))).option("--nowait", $("do not wait for the operation to complete. Returns as soon as the intial request is received by the server")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, gatewayName, name, port, options, _) { var subscription, networkManagementClient, applicationGateway, progress, parentItem, backendHttpSettingsCollection, parameters, referredProbe, idContainerProbe; var __frame = { name: "__1", line: 66 }; return __func(_, this, arguments, __1, 5, __frame, function __$__1() {


























      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("port : "), port, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.port = __4;

              subscription = profile.current.getSubscription(options.subscription);
              networkManagementClient = utils.createNetworkManagementClient(subscription);


              progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                          return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 12, 73, function ___(__0, __5) { applicationGateway = __5; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__1() { if (e) {

                            if ((e.statusCode === 404)) {
                              applicationGateway = null; }
                             else {
                              return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__1() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {


                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                  parentItem = applicationGateway;
                  if (!parentItem) {
                    return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                  backendHttpSettingsCollection = utils.findFirstCaseIgnore(parentItem.backendHttpSettingsCollection, { name: name });
                  if (backendHttpSettingsCollection) {
                    return _(new Error(util.format($("backend http settings collection with name \"%s\" already exists in application gateway \"%s\""), name, gatewayName))); } ;


                  parameters = { };

                  if (options.port) {
                    parameters.port = parseInt(options.port, 10); } ;


                  if (options.protocol) {
                    parameters.protocol = validation.isIn(options.protocol, ["Http","Https",], "--protocol"); } ;


                  if (options.cookieBasedAffinity) {
                    parameters.cookieBasedAffinity = validation.isIn(options.cookieBasedAffinity, ["Enabled","Disabled",], "--cookie-based-affinity"); } ;


                  if (!parameters.probe) {
                    parameters.probe = { }; } ;

                  if (options.probeId) {
                    if (options.probeName) {
                      cli.output.warn($("--probe-name parameter will be ignored because --probe-id and --probe-name are mutually exclusive")); } ;

                    parameters.probe.id = options.probeId; } else {
                    if (options.probeName) {
                      referredProbe = utils.findFirstCaseIgnore(applicationGateway.probes, { name: options.probeName });
                      if (!referredProbe) {
                        return _(new Error(util.format($("No probe with name \"%s\" found"), options.probeName))); } ;

                      idContainerProbe = referredProbe;
                      parameters.probe.id = idContainerProbe.id; } ; } ;


                  if (options.hostName) {
                    parameters.hostName = options.hostName; } ;


                  if (options.pickHostName) {
                    parameters.pickHostNameFromBackendAddress = utils.parseBool(options.pickHostName); } ;


                  if (options.affinityCookieName) {
                    parameters.affinityCookieName = options.affinityCookieName; } ;


                  if (options.probeEnabled) {
                    parameters.probeEnabled = utils.parseBool(options.probeEnabled); } ;


                  if (options.path) {
                    parameters.path = options.path; } ;


                  parameters.name = name;
                  parentItem.backendHttpSettingsCollection.push(parameters);

                  generatorUtils.removeEmptyObjects(parameters);
                  progress = cli.interaction.progress(util.format($("Creating backend http settings collection in application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { return (function __$__1(__then) {

                          if (options.nowait) {
                            return networkManagementClient.applicationGateways.beginCreateOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 91, 75, function ___(__0, __6) { applicationGateway = __6; __then(); }, true)); } else {

                            return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 93, 75, function ___(__0, __7) { applicationGateway = __7; __then(); }, true)); } ; })(function __$__1() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {


                          progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                      cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse); _(); }); }); }); }); }, true)); }, true)); }, true)); }, true)); }); });


  backendHttpSettingsCollection.command("set [resource-group] [gateway-name] [name]").description($("Update a backend http settings collection")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the backend http settings collection")).option("-o, --port [port]", $("port")).option("-p, --protocol [protocol]", $("protocol")).option("-c, --cookie-based-affinity [cookie-based-affinity]", $("cookie based affinity")).option("-r, --probe-name [probe-name]", $(("sets probe. This option is mutually" + "\n     exclusive with --probe-id"))).option("-i, --probe-id [probe-id]", $(("sets probe. This option is mutually" + "\n     exclusive with --probe-name"))).option("-m, --host-name [host-name]", $(("host header to be sent to the backend" + "\n     servers"))).option("-k, --pick-host-name [pick-host-name]", $(("whether to pick host header should be" + "\n     picked from the host name of the backend server. Default value is false"))).option("-a, --affinity-cookie-name [affinity-cookie-name]", $(("cookie name to use for the affinity" + "\n     cookie"))).option("-e, --probe-enabled [probe-enabled]", $(("whether the probe is enabled. Default" + "\n     value is false"))).option("-d, --path [path]", $((("path which should be used as a prefix" + "\n     for all HTTP requests. Null means no path will be prefixed. Default value is") + "\n     null"))).option("--nowait", $("do not wait for the operation to complete. Returns as soon as the intial request is received by the server")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, parentItem, backendHttpSettingsCollection, parameters, referredProbe, idContainerProbe; var __frame = { name: "__2", line: 194 }; return __func(_, this, arguments, __2, 4, __frame, function __$__2() {


























      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __4) { applicationGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__2() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__2() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


                parentItem = applicationGateway;
                if (!parentItem) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                backendHttpSettingsCollection = utils.findFirstCaseIgnore(parentItem.backendHttpSettingsCollection, { name: name });
                if (!backendHttpSettingsCollection) {
                  return _(new Error(util.format($("backend http settings collection with name \"%s\" not found in application gateway \"%s\""), name, gatewayName))); } ;


                parameters = backendHttpSettingsCollection;

                if (options.port) {
                  parameters.port = parseInt(options.port, 10); } ;


                if (options.protocol) {
                  parameters.protocol = validation.isIn(options.protocol, ["Http","Https",], "--protocol"); } ;


                if (options.cookieBasedAffinity) {
                  parameters.cookieBasedAffinity = validation.isIn(options.cookieBasedAffinity, ["Enabled","Disabled",], "--cookie-based-affinity"); } ;


                if (!parameters.probe) {
                  parameters.probe = { }; } ;

                if (options.probeId) {
                  if (options.probeName) {
                    cli.output.warn($("--probe-name parameter will be ignored because --probe-id and --probe-name are mutually exclusive")); } ;

                  parameters.probe.id = options.probeId; } else {
                  if (options.probeName) {
                    referredProbe = utils.findFirstCaseIgnore(applicationGateway.probes, { name: options.probeName });
                    if (!referredProbe) {
                      return _(new Error(util.format($("No probe with name \"%s\" found"), options.probeName))); } ;

                    idContainerProbe = referredProbe;
                    parameters.probe.id = idContainerProbe.id; } ; } ;


                if (options.hostName) {
                  if (!utils.argHasValue(options.hostName)) {
                    delete parameters.hostName; }
                   else {
                    parameters.hostName = options.hostName; } ; } ;



                if (options.pickHostName) {
                  parameters.pickHostNameFromBackendAddress = utils.parseBool(options.pickHostName); } ;


                if (options.affinityCookieName) {
                  if (!utils.argHasValue(options.affinityCookieName)) {
                    delete parameters.affinityCookieName; }
                   else {
                    parameters.affinityCookieName = options.affinityCookieName; } ; } ;



                if (options.probeEnabled) {
                  parameters.probeEnabled = utils.parseBool(options.probeEnabled); } ;


                if (options.path) {
                  if (!utils.argHasValue(options.path)) {
                    delete parameters.path; }
                   else {
                    parameters.path = options.path; } ; } ;



                generatorUtils.removeEmptyObjects(parameters);
                progress = cli.interaction.progress(util.format($("Updating backend http settings collection in \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function __$__2(__then) {

                        if (options.nowait) {
                          return networkManagementClient.applicationGateways.beginCreateOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 99, 75, function ___(__0, __5) { applicationGateway = __5; __then(); }, true)); } else {

                          return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 101, 75, function ___(__0, __6) { applicationGateway = __6; __then(); }, true)); } ; })(function __$__2() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


                        progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


                    cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse); _(); }); }); }); }); }, true)); }, true)); }, true)); }); });


  backendHttpSettingsCollection.command("delete [resource-group] [gateway-name] [name]").description($("Delete a backend http settings collection")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the backend http settings collection")).option("--nowait", $("do not wait for the operation to complete. Returns as soon as the intial request is received by the server")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, parentItem, index; var __frame = { name: "__3", line: 313 }; return __func(_, this, arguments, __3, 4, __frame, function __$__3() {









      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __2) { resourceGroup = __2;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __3) { gatewayName = __3;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __4) { name = __4;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __5) { applicationGateway = __5; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__3() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__3() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


                parentItem = applicationGateway;
                if (!parentItem) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                index = utils.indexOfCaseIgnore(parentItem.backendHttpSettingsCollection, { name: name });
                if ((index === -1)) {
                  return _(new Error(util.format($("backend http settings collection \"%s\" not found in application gateway \"%s\""), name, gatewayName))); } ; return (function __$__3(_) {


                  var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete backend http settings collection with name \"%s\" from application gateway \"%s\"? [y/n] "), name, gatewayName), __cb(_, __frame, 32, 45, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -312, 17, function ___(__0, __6) { return (function __$__3(__then) { if (__6) { return _(null); } else { __then(); } ; })(function __$__3() {



                    parentItem.backendHttpSettingsCollection.splice(index, 1);

                    progress = cli.interaction.progress("Deleting backend http settings collection"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function __$__3(__then) {

                            if (options.nowait) {
                              return networkManagementClient.applicationGateways.beginCreateOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 41, 75, function ___(__0, __7) { applicationGateway = __7; __then(); }, true)); } else {


                              return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 44, 75, function ___(__0, __8) { applicationGateway = __8; __then(); }, true)); } ; })(function __$__3() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {


                            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


                        cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse); _(); }); }); }); }, true)); }); }); }, true)); }, true)); }, true)); }); });


  backendHttpSettingsCollection.command("show [resource-group] [gateway-name] [name]").description($("Show a backend http settings collection")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the backend http settings collection")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, parentItem, backendHttpSettingsCollection; var __frame = { name: "__4", line: 373 }; return __func(_, this, arguments, __4, 4, __frame, function __$__4() {







      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __4) { applicationGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__4() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__4() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__4() {


                parentItem = applicationGateway;
                if (!parentItem) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                backendHttpSettingsCollection = utils.findFirstCaseIgnore(parentItem.backendHttpSettingsCollection, { name: name });
                if (!backendHttpSettingsCollection) {
                  cli.output.warn(util.format($("backend http settings collection with name \"%s\" not found in the application gateway \"%s\""), name, gatewayName)); } ;


                cli.interaction.formatOutput(backendHttpSettingsCollection, generatorUtils.traverse); _(); }); }); }, true)); }, true)); }, true)); }); });


  backendHttpSettingsCollection.command("list [resource-group] [gateway-name]").description($("List backend http settings collections")).usage("[options] <resource-group> <gateway-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __5(resourceGroup, gatewayName, options, _) { var subscription, networkManagementClient, applicationGateway, progress, parentItem; var __frame = { name: "__5", line: 414 }; return __func(_, this, arguments, __5, 3, __frame, function __$__5() {






      subscription = profile.current.getSubscription(options.subscription);
      networkManagementClient = utils.createNetworkManagementClient(subscription);

      applicationGateway = null;
      progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() {

                  return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 7, 73, function ___(__0, __1) { applicationGateway = __1; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__5() { if (e) {

                    if ((e.statusCode === 404)) {
                      applicationGateway = null; }
                     else {
                      return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__5() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__5() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__5() {


          parentItem = applicationGateway;
          if (!parentItem) {
            return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


          cli.interaction.formatOutput(parentItem.backendHttpSettingsCollection, function(items) {
            if ((!items || (items.length === 0))) {
              cli.output.warn($("No backend http settings collections found")); }
             else {
              cli.output.table(items, function(row, item) {
                generatorUtils.showTableRow(row, item); }); } ; }); _(); }); }); }); });};
