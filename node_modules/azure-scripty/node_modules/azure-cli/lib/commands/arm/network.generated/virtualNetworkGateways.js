/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var generatorUtils = require("../../../util/generatorUtils");






















var tagUtils = require("../tag/tagUtils");
var util = require("util");
var validation = require("../../../util/validation");

var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage network resources"));

  var virtualNetworkGateways = network.category("vpn-gateway").description($("Commands to manage virtual network gateways"));


  var defaultGatewayType = "VPN";
  var defaultVpnType = "RouteBased";
  var defaultEnableBgp = "false";
  var defaultName = "Basic";

  virtualNetworkGateways.command("create [resource-group] [name] [location]").description($("Create a virtual network gateway")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-l, --location <location>", $("the location")).option("-e, --subnet-name [subnet-name]", $(("sets subnet. This option is mutually" + "\n     exclusive with --subnet-id"))).option("-m, --vnet-name [vnet-name]", $("name of the virtual network that contains subnet")).option("-f, --subnet-id [subnet-id]", $(("sets subnet. This option is mutually" + "\n     exclusive with --subnet-name"))).option("-p, --public-ip-name [public-ip-name]", $(("sets public ip address. This option is" + "\n     mutually exclusive with --public-ip-id"))).option("-u, --public-ip-id [public-ip-id]", $(("sets public ip address. This option is" + "\n     mutually exclusive with --public-ip-name"))).option("-w, --gateway-type [gateway-type]", $(("the type of this virtual network" + "\n     gateway. Possible values are: 'Vpn' and 'ExpressRoute'"))).option("-y, --vpn-type [vpn-type]", $(("the type of this virtual network" + "\n     gateway. Possible values are: 'PolicyBased' and 'RouteBased'"))).option("-b, --enable-bgp [enable-bgp]", $(("whether BGP is enabled for this virtual" + "\n     network gateway or not"))).option("-r, --enable-active-active-feature [enable-active-active-feature]", $("activeActive flag")).option("-d, --default-site-name [default-site-name]", $(("sets gateway default site. This option" + "\n     is mutually exclusive with --default-site-id"))).option("-i, --default-site-id [default-site-id]", $(("sets gateway default site. This option" + "\n     is mutually exclusive with --default-site-name"))).option("-k, --sku-name [sku-name]", $("gateway SKU name")).option("-c, --address-prefixes [address-prefixes]", $(("a list of address blocks reserved for" + "\n     this virtual network in CIDR notation"))).option("-a, --bgp-asn [bgp-asn]", $("the BGP speaker's ASN")).option("-o, --bgp-peering-address [bgp-peering-address]", $(("the BGP peering address and BGP" + "\n     identifier of this BGP speaker"))).option("-j, --bgp-peer-weight [bgp-peer-weight]", $(("the weight added to routes learned from" + "\n     this BGP speaker"))).option("-t, --tags [tags]", $("the list of tags.\n     Can be multiple. In the format of \"name=value\".\n     Name is required and value is optional.\n     For example, -t \"tag1=value1;tag2\"")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, name, location, options, _) { var useDefaults, index, subscription, networkManagementClient, virtualNetworkGateway, progress, parameters, idContainerSubnet, idContainerPublicIPAddress, idContainerGatewayDefaultSite; var __frame = { name: "__1", line: 80 }; return __func(_, this, arguments, __1, 4, __frame, function __$__1() {




































      useDefaults = true;
      index = 0;
      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 3, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 4, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("location : "), location, __cb(_, __frame, 5, 41, function ___(__0, __3) { options.location = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the virtual network gateway \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                        return networkManagementClient.virtualNetworkGateways.get(resourceGroup, name, null, __cb(_, __frame, 13, 79, function ___(__0, __4) { virtualNetworkGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__1() { if (e) {

                          if ((e.statusCode === 404)) {
                            virtualNetworkGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__1() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                if (virtualNetworkGateway) {
                  return _(new Error(util.format($("virtual network gateway with name \"%s\" already exists in the resource group \"%s\""), name, resourceGroup))); } ;


                parameters = { };
                if (options.location) {
                  parameters.location = options.location; } ;


                if (!parameters.ipConfigurations) {
                  parameters.ipConfigurations = []; } ;

                if (!parameters.ipConfigurations[index]) {
                  parameters.ipConfigurations[index] = { };
                  parameters.ipConfigurations[index].name = "default-ip-config"; } ;

                if (!parameters.ipConfigurations[index].subnet) {
                  parameters.ipConfigurations[index].subnet = { }; } ; return (function __$__1(__then) {

                  if (options.subnetId) {
                    if (options.subnetName) {
                      cli.output.warn($("--subnet-name parameter will be ignored because --subnet-id and --subnet-name are mutually exclusive")); } ;

                    parameters.ipConfigurations[index].subnet.id = options.subnetId; __then(); } else { return (function __$__1(__then) {
                      if (options.subnetName) {
                        return networkManagementClient.subnets.get(resourceGroup, options.vnetName, options.subnetName, __cb(_, __frame, 49, 64, function ___(__0, __5) { idContainerSubnet = __5;
                          parameters.ipConfigurations[index].subnet.id = idContainerSubnet.id; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$__1() {


                  if (!parameters.ipConfigurations[index].publicIPAddress) {
                    parameters.ipConfigurations[index].publicIPAddress = { }; } ; return (function __$__1(__then) {

                    if (options.publicIpId) {
                      if (options.publicIpName) {
                        cli.output.warn($("--public-ip-name parameter will be ignored because --public-ip-id and --public-ip-name are mutually exclusive")); } ;

                      parameters.ipConfigurations[index].publicIPAddress.id = options.publicIpId; __then(); } else { return (function __$__1(__then) {
                        if (options.publicIpName) {
                          return networkManagementClient.publicIPAddresses.get(resourceGroup, options.publicIpName, __cb(_, __frame, 62, 83, function ___(__0, __6) { idContainerPublicIPAddress = __6;
                            parameters.ipConfigurations[index].publicIPAddress.id = idContainerPublicIPAddress.id; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$__1() {


                    if (options.gatewayType) {
                      parameters.gatewayType = validation.isIn(options.gatewayType, ["Vpn","ExpressRoute",], "--gateway-type"); } else {
                      if (useDefaults) {
                        parameters.gatewayType = defaultGatewayType; } ; } ;


                    if (options.vpnType) {
                      parameters.vpnType = validation.isIn(options.vpnType, ["PolicyBased","RouteBased",], "--vpn-type"); } else {
                      if (useDefaults) {
                        parameters.vpnType = defaultVpnType; } ; } ;


                    if (options.enableBgp) {
                      parameters.enableBgp = utils.parseBool(options.enableBgp); } else {
                      if (useDefaults) {
                        parameters.enableBgp = utils.parseBool(defaultEnableBgp); } ; } ;


                    if (options.enableActiveActiveFeature) {
                      parameters.activeActive = utils.parseBool(options.enableActiveActiveFeature); } ;


                    if (!parameters.gatewayDefaultSite) {
                      parameters.gatewayDefaultSite = { }; } ; return (function __$__1(__then) {

                      if (options.defaultSiteId) {
                        if (options.defaultSiteName) {
                          cli.output.warn($("--default-site-name parameter will be ignored because --default-site-id and --default-site-name are mutually exclusive")); } ;

                        parameters.gatewayDefaultSite.id = options.defaultSiteId; __then(); } else { return (function __$__1(__then) {
                          if (options.defaultSiteName) {
                            return networkManagementClient.localNetworkGateways.get(resourceGroup, options.defaultSiteName, __cb(_, __frame, 97, 91, function ___(__0, __7) { idContainerGatewayDefaultSite = __7;
                              if (!idContainerGatewayDefaultSite) {
                                return _(new Error(util.format($("A local network gateway with name \"%s\" not found in the resource group \"%s\""), options.defaultSiteName, resourceGroup))); } ;

                              parameters.gatewayDefaultSite.id = idContainerGatewayDefaultSite.id; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$__1() {


                      if (!parameters.sku) {
                        parameters.sku = { }; } ;

                      if (options.skuName) {
                        parameters.sku.name = validation.isIn(options.skuName, ["Basic","HighPerformance","Standard","UltraPerformance","VpnGw1","VpnGw2","VpnGw3",], "--sku-name"); } else {
                        if (useDefaults) {
                          parameters.sku.name = defaultName; } ; } ;


                      if (!parameters.vpnClientConfiguration) {
                        parameters.vpnClientConfiguration = { }; } ;

                      if (!parameters.vpnClientConfiguration.vpnClientAddressPool) {
                        parameters.vpnClientConfiguration.vpnClientAddressPool = { }; } ;

                      if (options.addressPrefixes) {
                        parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes = [];
                        parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes = parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes.concat(generatorUtils.splitStringByCharacter(options.addressPrefixes, ",")); } ;


                      if (!parameters.bgpSettings) {
                        parameters.bgpSettings = { }; } ;

                      if (options.bgpAsn) {
                        parameters.bgpSettings.asn = parseInt(options.bgpAsn, 10); } ;


                      if (options.bgpPeeringAddress) {
                        parameters.bgpSettings.bgpPeeringAddress = options.bgpPeeringAddress; } ;


                      if (options.bgpPeerWeight) {
                        parameters.bgpSettings.peerWeight = parseInt(options.bgpPeerWeight, 10); } ;


                      if (parameters.sku.name) {
                        parameters.sku.tier = parameters.sku.name; } ;

                      if ((options.tags && utils.argHasValue(options.tags))) {
                        tagUtils.appendTags(parameters, options); } ;


                      generatorUtils.removeEmptyObjects(parameters);
                      progress = cli.interaction.progress(util.format($("Creating virtual network gateway \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                            return networkManagementClient.virtualNetworkGateways.createOrUpdate(resourceGroup, name, parameters, __cb(_, __frame, 149, 79, function ___(__0, __8) { virtualNetworkGateway = __8; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

                              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                          cli.interaction.formatOutput(virtualNetworkGateway, generatorUtils.traverse); _(); }); }); }); }); }); }); }); }, true)); }, true)); }, true)); }); });


  virtualNetworkGateways.command("set [resource-group] [name]").description($("Update a virtual network gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-b, --enable-bgp [enable-bgp]", $(("whether BGP is enabled for this virtual" + "\n     network gateway or not"))).option("-r, --enable-active-active-feature [enable-active-active-feature]", $("activeActive flag")).option("-d, --default-site-name [default-site-name]", $(("sets gateway default site. This option" + "\n     is mutually exclusive with --default-site-id"))).option("-i, --default-site-id [default-site-id]", $(("sets gateway default site. This option" + "\n     is mutually exclusive with --default-site-name"))).option("-k, --sku-name [sku-name]", $("gateway SKU name")).option("-c, --address-prefixes [address-prefixes]", $(("a list of address blocks reserved for" + "\n     this virtual network in CIDR notation"))).option("-a, --bgp-asn [bgp-asn]", $("the BGP speaker's ASN")).option("-o, --bgp-peering-address [bgp-peering-address]", $(("the BGP peering address and BGP" + "\n     identifier of this BGP speaker"))).option("-j, --bgp-peer-weight [bgp-peer-weight]", $(("the weight added to routes learned from" + "\n     this BGP speaker"))).option("-t, --tags [tags]", $("the list of tags.\n     Can be multiple. In the format of \"name=value\".\n     Name is required and value is optional.\n     For example, -t \"tag1=value1;tag2\"")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, name, options, _) { var useDefaults, subscription, networkManagementClient, virtualNetworkGateway, progress, parameters, idContainerGatewayDefaultSite; var __frame = { name: "__2", line: 259 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {






















      useDefaults = false;
      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __2) { name = __2;

          subscription = profile.current.getSubscription(options.subscription);
          networkManagementClient = utils.createNetworkManagementClient(subscription);


          progress = cli.interaction.progress(util.format($("Looking up the virtual network gateway \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                      return networkManagementClient.virtualNetworkGateways.get(resourceGroup, name, null, __cb(_, __frame, 11, 79, function ___(__0, __3) { virtualNetworkGateway = __3; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__2() { if (e) {

                        if ((e.statusCode === 404)) {
                          virtualNetworkGateway = null; }
                         else {
                          return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__2() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


              if (!virtualNetworkGateway) {
                return _(new Error(util.format($("virtual network gateway with name \"%s\" not found in the resource group \"%s\""), name, resourceGroup))); } ;


              parameters = virtualNetworkGateway;
              if (options.enableBgp) {
                parameters.enableBgp = utils.parseBool(options.enableBgp); } else {
                if (useDefaults) {
                  parameters.enableBgp = utils.parseBool(defaultEnableBgp); } ; } ;


              if (options.enableActiveActiveFeature) {
                parameters.activeActive = utils.parseBool(options.enableActiveActiveFeature); } ;


              if (!parameters.gatewayDefaultSite) {
                parameters.gatewayDefaultSite = { }; } ; return (function __$__2(__then) {

                if (options.defaultSiteId) {
                  if (options.defaultSiteName) {
                    cli.output.warn($("--default-site-name parameter will be ignored because --default-site-id and --default-site-name are mutually exclusive")); } ;

                  if (!utils.argHasValue(options.defaultSiteId)) {
                    delete parameters.gatewayDefaultSite.id; }
                   else {
                    parameters.gatewayDefaultSite.id = options.defaultSiteId; } ; __then(); } else { return (function __$__2(__then) {

                    if (options.defaultSiteName) { return (function __$__2(__then) {
                        if (!utils.argHasValue(options.defaultSiteName)) {
                          delete parameters.gatewayDefaultSite.id; __then(); } else {

                          return networkManagementClient.localNetworkGateways.get(resourceGroup, options.defaultSiteName, __cb(_, __frame, 53, 91, function ___(__0, __4) { idContainerGatewayDefaultSite = __4;
                            if (!idContainerGatewayDefaultSite) {
                              return _(new Error(util.format($("A local network gateway with name \"%s\" not found in the resource group \"%s\""), options.defaultSiteName, resourceGroup))); } ;

                            parameters.gatewayDefaultSite.id = idContainerGatewayDefaultSite.id; __then(); }, true)); } ; })(__then); } else { __then(); } ; })(__then); } ; })(function __$__2() {



                if (!parameters.sku) {
                  parameters.sku = { }; } ;

                if (options.skuName) {
                  parameters.sku.name = validation.isIn(options.skuName, ["Basic","HighPerformance","Standard","UltraPerformance","VpnGw1","VpnGw2","VpnGw3",], "--sku-name"); } else {
                  if (useDefaults) {
                    parameters.sku.name = defaultName; } ; } ;


                if (!parameters.vpnClientConfiguration) {
                  parameters.vpnClientConfiguration = { }; } ;

                if (!parameters.vpnClientConfiguration.vpnClientAddressPool) {
                  parameters.vpnClientConfiguration.vpnClientAddressPool = { }; } ;

                if (options.addressPrefixes) {
                  if ((((virtualNetworkGateway && virtualNetworkGateway.vpnClientConfiguration) && virtualNetworkGateway.vpnClientConfiguration.vpnClientAddressPool) && virtualNetworkGateway.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes)) {
                    parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes = virtualNetworkGateway.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes; }
                   else {
                    parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes = []; } ;

                  parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes = parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes.concat(generatorUtils.splitStringByCharacter(options.addressPrefixes, ",")); } ;


                if (!parameters.bgpSettings) {
                  parameters.bgpSettings = { }; } ;

                if (options.bgpAsn) {
                  parameters.bgpSettings.asn = parseInt(options.bgpAsn, 10); } ;


                if (options.bgpPeeringAddress) {
                  parameters.bgpSettings.bgpPeeringAddress = options.bgpPeeringAddress; } ;


                if (options.bgpPeerWeight) {
                  parameters.bgpSettings.peerWeight = parseInt(options.bgpPeerWeight, 10); } ;


                if ((options.tags && utils.argHasValue(options.tags))) {
                  tagUtils.appendTags(parameters, options); } ;


                generatorUtils.removeEmptyObjects(parameters);
                progress = cli.interaction.progress(util.format($("Updating virtual network gateway \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                      return networkManagementClient.virtualNetworkGateways.createOrUpdate(resourceGroup, name, parameters, __cb(_, __frame, 107, 79, function ___(__0, __5) { virtualNetworkGateway = __5; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

                        progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


                    cli.interaction.formatOutput(virtualNetworkGateway, generatorUtils.traverse); _(); }); }); }); }); }); }, true)); }, true)); }); });


  virtualNetworkGateways.command("delete [resource-group] [name]").description($("Delete a virtual network gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, name, options, _) { var subscription, networkManagementClient, virtualNetworkGateway, progress; var __frame = { name: "__3", line: 381 }; return __func(_, this, arguments, __3, 3, __frame, function __$__3() {







      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __2) { resourceGroup = __2;
        return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 2, 29, function ___(__0, __3) { name = __3;

          subscription = profile.current.getSubscription(options.subscription);
          networkManagementClient = utils.createNetworkManagementClient(subscription);


          progress = cli.interaction.progress(util.format($("Looking up the virtual network gateway \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                      return networkManagementClient.virtualNetworkGateways.get(resourceGroup, name, null, __cb(_, __frame, 10, 79, function ___(__0, __4) { virtualNetworkGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__3() { if (e) {

                        if ((e.statusCode === 404)) {
                          virtualNetworkGateway = null; }
                         else {
                          return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__3() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {


                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


              if (!virtualNetworkGateway) {
                return _(new Error(util.format($("virtual network gateway with name \"%s\" not found in the resource group \"%s\""), name, resourceGroup))); } ; return (function __$__3(_) {


                var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete virtual network gateway \"%s\"? [y/n] "), name), __cb(_, __frame, 25, 45, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -380, 17, function ___(__0, __5) { return (function __$__3(__then) { if (__5) {
                    cli.output.info(util.format($("virtual network gateway \"%s\" was not deleted and still exists in the resource group \"%s\""), name, resourceGroup)); return _(null); } else { __then(); } ; })(function __$__3() {



                  progress = cli.interaction.progress(util.format($("Deleting virtual network gateway \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                        return networkManagementClient.virtualNetworkGateways.deleteMethod(resourceGroup, name, __cb(_, __frame, 32, 79, function ___(__0, __6) { virtualNetworkGateway = __6;
                          cli.output.info(util.format($("virtual network gateway \"%s\" was successfully deleted from resource group \"%s\""), name, resourceGroup)); _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {

                          progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() { _(); }); }); }); }, true)); }); }); }, true)); }, true)); }); });



  virtualNetworkGateways.command("show [resource-group] [name]").description($("Show a virtual network gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, name, options, _) { var subscription, networkManagementClient, virtualNetworkGateway, progress; var __frame = { name: "__4", line: 426 }; return __func(_, this, arguments, __4, 3, __frame, function __$__4() {






      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          subscription = profile.current.getSubscription(options.subscription);
          networkManagementClient = utils.createNetworkManagementClient(subscription);


          progress = cli.interaction.progress(util.format($("Looking up the virtual network gateway \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {

                      return networkManagementClient.virtualNetworkGateways.get(resourceGroup, name, null, __cb(_, __frame, 10, 79, function ___(__0, __3) { virtualNetworkGateway = __3; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__4() { if (e) {

                        if ((e.statusCode === 404)) {
                          virtualNetworkGateway = null; }
                         else {
                          return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__4() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {


                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__4() {


              if (!virtualNetworkGateway) {
                cli.output.warn(util.format($("virtual network gateway with name \"%s\" not found in the resource group \"%s\""), name, resourceGroup)); } ;


              cli.interaction.formatOutput(virtualNetworkGateway, generatorUtils.traverse); _(); }); }); }, true)); }, true)); }); });


  virtualNetworkGateways.command("list [resource-group]").description($("List virtual network gateways")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __5(resourceGroup, options, _) { var subscription, networkManagementClient, virtualNetworkGateway, progress; var __frame = { name: "__5", line: 459 }; return __func(_, this, arguments, __5, 2, __frame, function __$__5() {





      options.resourceGroup = resourceGroup;
      subscription = profile.current.getSubscription(options.subscription);
      networkManagementClient = utils.createNetworkManagementClient(subscription);

      virtualNetworkGateway = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() { return (function __$__5(__then) {


              if ((typeof networkManagementClient.virtualNetworkGateways.listAll != "function")) {
                return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 9, 42, function ___(__0, __1) { resourceGroup = __1;
                  progress = cli.interaction.progress($("Getting the virtual network gateways"));
                  return networkManagementClient.virtualNetworkGateways.list(resourceGroup, __cb(_, __frame, 11, 81, function ___(__0, __2) { virtualNetworkGateway = __2; __then(); }, true)); }, true)); } else { return (function __$__5(__then) {

                  if (options.resourceGroup) {
                    progress = cli.interaction.progress($("Getting the virtual network gateways"));
                    return networkManagementClient.virtualNetworkGateways.list(resourceGroup, __cb(_, __frame, 15, 83, function ___(__0, __3) { virtualNetworkGateway = __3; __then(); }, true)); } else {

                    progress = cli.interaction.progress($("Getting the virtual network gateways"));
                    return networkManagementClient.virtualNetworkGateways.listAll(__cb(_, __frame, 18, 83, function ___(__0, __4) { virtualNetworkGateway = __4; __then(); }, true)); } ; })(__then); } ; })(function __$__5() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__5() {



              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__5() {


          cli.interaction.formatOutput(virtualNetworkGateway, function(virtualNetworkGateway) {
            if ((!virtualNetworkGateway || (virtualNetworkGateway.length === 0))) {
              cli.output.warn($("No virtual network gateways found")); }
             else {
              cli.output.table(virtualNetworkGateway, function(row, item) {
                generatorUtils.showTableRow(row, item); }); } ; }); _(); }); }); }); });};
