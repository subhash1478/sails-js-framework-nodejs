/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var util = require("util");
























var cdnManagementUtil = require("./cdnmanagement.utils");
var profile = require("../../../util/profile");
var utils = require("../../../util/utils");
var tagUtils = require("../tag/tagUtils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var log = cli.output;

  var cdn = cli.category("cdn").description($("Commands to manage Azure Content Delivery Network (CDN)"));




  var profiles = cdn.category("profile").description($("Commands to manage your Azure cdn profiles"));



  profiles.command("list").description($("List all profiles under the current subscription")).usage("[options] [resource-group]").option("-g, --resource-group [resource-group]", $("Name of the Resource Group")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __1(options, _) { var subscription, client, operation, progress, result; var __frame = { name: "__1", line: 50 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {









      subscription = profile.current.getSubscription(options.subscription);
      client = utils.createCdnManagementClient(subscription); return (function __$__1(__then) {


        if (options.resourceGroup) {
          return client.profiles.listByResourceGroup(options.resourceGroup, __cb(_, __frame, 10, 36, function ___(__0, __1) { operation = __1; __then(); }, true)); } else {

          return client.profiles.list(__cb(_, __frame, 12, 36, function ___(__0, __2) { operation = __2; __then(); }, true)); } ; })(function __$__1() {


        progress = cli.interaction.progress(util.format($("Listing Cdn profile(s)"))); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {


              result = operation; _(null, null, true); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


            cli.interaction.formatOutput(result, function() {
              if ((!result || (result.length === 0))) {
                log.info($("No profiles found.")); }
               else {
                log.table(result, function(row, profile) {
                  row.cell($("Name"), profile.name);
                  row.cell($("ResourceGroup"), cdnManagementUtil.getResourceGroupFromProfileId(profile.id));
                  row.cell($("Location"), profile.location);
                  row.cell($("Tags"), tagUtils.getTagsInfo(profile.tags));
                  row.cell($("ProvisioningState"), profile.provisioningState);
                  row.cell($("ResourceState"), profile.resourceState);
                  row.cell($("Sku"), profile.sku.name);
                  row.cell($("Subscription"), subscription.id); }); } ; }); _(); }); }); }); }); });






  profiles.command("show [name] [resource-group]").description($("Show the infomation of a specific cdn profile")).usage("[options] <name> <resource-group>").option("-n, --name <name>", $("Name of the Cdn Profile")).option("-g, --resource-group <resource-group>", $("Name of the Resource Group")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __2(name, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__2", line: 98 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {










      return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 5, 26, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 6, 35, function ___(__0, __2) { resourceGroup = __2;




          subscription = profile.current.getSubscription(options.subscription);

          client = utils.createCdnManagementClient(subscription);

          progress = cli.interaction.progress(util.format($("Get cdn profile %s ..."), name));

          callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {


                      return client.profiles.get(resourceGroup, name, __cb(_, __frame, 20, 39, function ___(__0, __3) { callbackArgs = __3;
                        result = callbackArgs[0];
                        response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__2() { if (e) {

                        return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__2() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


              cli.interaction.formatOutput(result, function(data) {
                if (!data) {
                  log.info($("No profile named %s found."), name); }
                 else {
                  log.data("");
                  log.data($("Profile name :"), result.name);
                  log.data("");
                  log.data($("Resource Group     :"), resourceGroup);
                  log.data($("Location           :"), result.location);
                  log.data($("ResourceState      :"), result.resourceState);
                  log.data($("ProvisioningState  :"), result.provisioningState);
                  log.data($("Sku                :"), result.sku.name);
                  log.data($("Tags               :"), tagUtils.getTagsInfo(result.tags));
                  log.data($("Id                 :"), result.id);
                  log.data(""); } ; }); _(); }); }); }, true)); }, true)); }); });





  profiles.command("create [name] [resource-group] [location] [sku-name]").description($("Create a profile under given resource group and subscription")).usage("[options] <name> <resource-group> <location> <sku-name> [tags]").option("-n, --name <name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile will be created in")).option("-l, --location <location>", $("The location in which to create the Cdn Profile")).option("-k, --sku-name <sku-name>", $("The pricing sku name of the Azure Cdn Profile")).option("-t, --tags [tags]", $(("Tags to set to the profile. Can be multiple. " + "In the format of 'name=value'. Name is required and value is optional."))).option("--subscription <subscription>", $("the subscription identifier")).execute(function __3(name, resourceGroup, location, skuName, options, _) { var tags, subscription, client, creationParameter, progress, callbackArgs, result, response; var __frame = { name: "__3", line: 157 }; return __func(_, this, arguments, __3, 5, __frame, function __$__3() {















      log.verbose(("arguments: " + JSON.stringify({
        profileName: name,
        options: options })));


      return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 11, 26, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 12, 35, function ___(__0, __2) { resourceGroup = __2;
          return cli.interaction.promptIfNotGiven($("Profile location: "), location, __cb(_, __frame, 13, 30, function ___(__0, __3) { location = __3;
            return cli.interaction.promptIfNotGiven($("Profile skuName name: "), skuName, __cb(_, __frame, 14, 29, function ___(__0, __4) { skuName = __4;

              tags = { };
              tags = tagUtils.buildTagsParameter(tags, options);





              subscription = profile.current.getSubscription(options.subscription);
              client = utils.createCdnManagementClient(subscription);




              creationParameter = {
                location: location,
                sku: {
                  name: skuName },

                tags: tags };


              progress = cli.interaction.progress(util.format($("Attempting to create cdn profile %s ..."), name));

              callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {


                          return client.profiles.create(resourceGroup, name, creationParameter, __cb(_, __frame, 42, 39, function ___(__0, __5) { callbackArgs = __5;
                            result = callbackArgs[0];
                            response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__3() { if (e) {

                            return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__3() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


                  cli.interaction.formatOutput(result, function(data) {
                    if (!data) {
                      log.info($("No profile information available")); }
                     else {
                      log.data("");
                      log.data($("Profile name :"), result.name);
                      log.data("");
                      log.data($("Resource Group     :"), resourceGroup);
                      log.data($("Location           :"), result.location);
                      log.data($("ResourceState      :"), result.resourceState);
                      log.data($("ProvisioningState  :"), result.provisioningState);
                      log.data($("Sku                :"), result.sku.name);
                      log.data($("Tags               :"), tagUtils.getTagsInfo(result.tags));
                      log.data($("Id                 :"), result.id);
                      log.data(""); } ; });



                  if ((response.statusCode == 200)) {
                    log.info((("Cdn profile " + name) + " is getting created...")); }
                   else {
                    log.info(("Failed in creating profile " + name)); } ; _(); }); }); }, true)); }, true)); }, true)); }, true)); }); });




  profiles.command("delete [name] [resource-group]").description($("Delete a profile under given resource group and subscription")).usage("[options] <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile will be delete in")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __4(name, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__4", line: 240 }; return __func(_, this, arguments, __4, 3, __frame, function __$__4() {











      log.verbose(("arguments: " + JSON.stringify({
        profileName: name,
        options: options })));


      return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 11, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 12, 35, function ___(__0, __2) { resourceGroup = __2;





          subscription = profile.current.getSubscription();
          client = utils.createCdnManagementClient(subscription);





          progress = cli.interaction.progress(util.format($("Deleting Cdn Profile %s"), name));
          callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {


                return client.profiles.deleteMethod(resourceGroup, name, __cb(_, __frame, 29, 39, function ___(__0, __3) { callbackArgs = __3;
                  result = callbackArgs[0];
                  response = callbackArgs[2]; _(null, null, true); }, true, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__4() {


              if ((response.statusCode == 200)) {
                log.info(("Delete command successfully invoked for Cdn Profile " + name)); } else {
                if ((response.statusCode == 204)) {
                  log.info((("Delete sucess, but no profile named " + name) + " was found")); }
                 else {
                  log.info(("Error in deleting profile " + name)); } ; } ; _(); }); }); }, true)); }, true)); }); });




  profiles.command("set [name] [resource-group]").description($("Update a profile's tags")).usage("[options] <name> <resource-group> [tags]").option("-n, --name <name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile will be created in")).option("-t, --tags [tags]", $(("Tags to set to the profile. Can be multiple. " + "In the format of 'name=value'. Name is required and value is optional."))).option("--subscription <subscription>", $("the subscription identifier")).execute(function __5(name, resourceGroup, options, _) { var tags, subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__5", line: 294 }; return __func(_, this, arguments, __5, 3, __frame, function __$__5() {












      return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 6, 35, function ___(__0, __2) { resourceGroup = __2;

          tags = { };
          tags = tagUtils.buildTagsParameter(tags, options);





          subscription = profile.current.getSubscription(options.subscription);
          client = utils.createCdnManagementClient(subscription);

          progress = cli.interaction.progress(util.format($("Attempting to update tags for cdn profile %s ..."), name));

          callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() {


                      return client.profiles.update(resourceGroup, name, tags, __cb(_, __frame, 23, 39, function ___(__0, __3) { callbackArgs = __3;
                        result = callbackArgs[0];
                        response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__5() { if (e) {

                        return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__5() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__5() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__5() {


              cli.interaction.formatOutput(result, function(data) {
                if (!data) {
                  log.info($("No profile information available")); }
                 else {
                  log.data("");
                  log.data($("Profile name :"), result.name);
                  log.data("");
                  log.data($("Resource Group     :"), resourceGroup);
                  log.data($("Location           :"), result.location);
                  log.data($("ResourceState      :"), result.resourceState);
                  log.data($("ProvisioningState  :"), result.provisioningState);
                  log.data($("Sku                :"), result.sku.name);
                  log.data($("Tags               :"), tagUtils.getTagsInfo(result.tags));
                  log.data($("Id                 :"), result.id);
                  log.data(""); } ; });



              if (((response.statusCode == 202) || (response.statusCode == 200))) {
                log.info(("Successfully updated tags of profile " + name)); }
               else {
                log.info(("Failed in updating tags of profile " + name)); } ; _(); }); }); }, true)); }, true)); }); });




  profiles.command("checkUsage [name] [resource-group]").description($("List the usages of resources under profile.")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __6(name, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__6", line: 358 }; return __func(_, this, arguments, __6, 3, __frame, function __$__6() {










      return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 6, 38, function ___(__0, __2) { resourceGroup = __2;





          subscription = profile.current.getSubscription();
          client = utils.createCdnManagementClient(subscription);
          progress = cli.interaction.progress(util.format($(("Listing usages for profile: " + name))));

          callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__6() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__6() {


                      return client.profiles.listResourceUsage(resourceGroup, name, __cb(_, __frame, 19, 39, function ___(__0, __3) { callbackArgs = __3;
                        result = callbackArgs[0];
                        response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__6() { if (e) {

                        return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__6() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__6() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__6() {


              if ((response.statusCode != 200)) {
                log.info("Command invoke failed, please retry"); }
               else {
                cli.interaction.formatOutput(result, function() {
                  if ((!result || (result.length === 0))) {
                    log.info($("No usage record was found.")); }
                   else {
                    log.table(result, function(row, usage) {
                      row.cell($("ResourceType"), usage.resourceType);
                      row.cell($("Unit"), usage.unit);
                      row.cell($("CurrentValue"), usage.currentValue);
                      row.cell($("Limit"), usage.limit); }); } ; }); } ; _(); }); }); }, true)); }, true)); }); });








  var ssoUri = cdn.category("ssouri").description($("Commands to generate sso uri of your Azure cdn profiles"));



  ssoUri.command("create [profile-name] [resource-group]").description($("Create sso uri of the profile")).usage("[options] <profile-name> <resource-group>").option("-n, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __7(profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__7", line: 416 }; return __func(_, this, arguments, __7, 3, __frame, function __$__7() {











      return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __1) { profileName = __1;
        return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 35, function ___(__0, __2) { resourceGroup = __2;





          subscription = profile.current.getSubscription();
          client = utils.createCdnManagementClient(subscription);

          progress = cli.interaction.progress(util.format($("Generating Cdn profile(s) sso uri")));

          callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__7() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__7() {


                      return client.profiles.generateSsoUri(resourceGroup, profileName, __cb(_, __frame, 21, 39, function ___(__0, __3) { callbackArgs = __3;
                        result = callbackArgs[0];
                        response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__7() { if (e) {

                        return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__7() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__7() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__7() {


              log.info($(((("Sso uri of profile " + profileName) + " is:\n ") + result.ssoUriValue))); _(); }); }); }, true)); }, true)); }); });




  var endpoint = cdn.category("endpoint").description($("Commands to manage Azure cdn profile endpoints"));



  endpoint.command("list [profile-name] [resource-group]").description($("List endpoints by profile and resource group")).usage("[options] <profile-name> <resource-group>").option("-n, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __8(profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__8", line: 461 }; return __func(_, this, arguments, __8, 3, __frame, function __$__8() {










      return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 5, 36, function ___(__0, __1) { profileName = __1;
        return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 6, 35, function ___(__0, __2) { resourceGroup = __2;





          subscription = profile.current.getSubscription();
          client = utils.createCdnManagementClient(subscription);

          progress = cli.interaction.progress(util.format($("Listing endpoints...")));

          callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__8() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__8() {


                      return client.endpoints.listByProfile(resourceGroup, profileName, __cb(_, __frame, 20, 40, function ___(__0, __3) { callbackArgs = __3;
                        result = callbackArgs[0];
                        response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__8() { if (e) {

                        return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__8() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__8() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__8() {


              cli.interaction.formatOutput(result, function() {
                if ((!result || (result.length === 0))) {
                  log.info($("No endpoints found.")); }
                 else {
                  log.table(result, function(row, endpoint) {
                    row.cell($("Name"), endpoint.name);
                    row.cell($("ProfileName"), profileName);
                    row.cell($("ResourceGroup"), resourceGroup);
                    row.cell($("Subscription"), subscription.id);
                    row.cell($("Location"), endpoint.location);
                    row.cell($("Tags"), tagUtils.getTagsInfo(endpoint.tags)); }); } ; }); _(); }); }); }, true)); }, true)); }); });






  endpoint.command("show [name] [profile-name] [resource-group]").description($("Get endpoint by endpoint name, profile name, and resource group")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __9(name, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__9", line: 514 }; return __func(_, this, arguments, __9, 4, __frame, function __$__9() {











      return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 5, 26, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 35, function ___(__0, __3) { resourceGroup = __3;





            subscription = profile.current.getSubscription();
            client = utils.createCdnManagementClient(subscription);

            progress = cli.interaction.progress(util.format($(("Getting endpoint named " + name))));

            callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__9() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__9() {


                        return client.endpoints.get(resourceGroup, profileName, name, __cb(_, __frame, 21, 40, function ___(__0, __4) { callbackArgs = __4;
                          result = callbackArgs[0];
                          response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__9() { if (e) {

                          return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__9() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__9() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__9() {


                cli.interaction.formatOutput(result, function(data) {
                  if (!data) {
                    log.info($("No endpoint named %s found."), profileName); }
                   else {
                    log.data("");
                    log.data($("Endpoint name                  :"), result.name);
                    log.data("");
                    log.data($("Profile name                   :"), profileName);
                    log.data($("Resource Group                 :"), resourceGroup);
                    log.data($("Location                       :"), result.location);
                    log.data($("Tags                           :"), tagUtils.getTagsInfo(result.tags));
                    log.data($("Host Name                      :"), result.hostName);
                    log.data($("Origin Host Header             :"), result.originHostHeader);
                    log.data($("Origin Path                    :"), result.originPath);
                    log.data($("Content Types To Compress      :"), result.contentTypesToCompress.join(","));
                    log.data($("Is Compression Enabled         :"), result.isCompressionEnabled);
                    log.data($("Is Http Allowed                :"), result.isHttpAllowed);
                    log.data($("Is Https Allowed               :"), result.isHttpsAllowed);
                    log.data($("Query String Caching Behavior  :"), result.queryStringCachingBehavior);
                    log.data($("Origin Names                   :"), cdnManagementUtil.getOriginNamesString(result.origins));
                    log.data($("OptimizationType               :"), result.optimizationType);
                    log.data($("Number of geo filters          :"), result.geoFilters.length);
                    log.data($("Resource State                 :"), result.resourceState);
                    log.data($("Provisioning State             :"), result.provisioningState);
                    log.data(""); } ; }); _(); }); }); }, true)); }, true)); }, true)); }); });





  endpoint.command("create [name] [profile-name] [resource-group] [location] [origin-name] [origin-host-name]").description($("Create endpoint with given name and properties.")).usage("[options] <name> <profile-name> <resource-group> <location> <origin-name> <origin-host-name> [origin-host-header] [origin-path] [content-type-to-compress] [is-compression-enabled] [is-http-allowed] [is-https-allowed] [query-string-caching-behavior]  [http-port] [https-port] [tags]").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-l, --location <location>", $("The location of the Cdn endpoint")).option("-o, --origin-name <origin-name>", $("The name of the origin used to identify the origin")).option("-r, --origin-host-name <origin-host-name>", $("The host name of the origin")).option("-e, --origin-host-header [origin-host-header]", $("The origin host header of the Azure Cdn Endpoint")).option("-i, --origin-path [origin-path]", $("The origin path Azure Cdn Endpoint")).option("-c, --content-types-to-compress [content-types-to-compress]", $("The list of mime types that need to be compressed by Cdn edge nodes")).option("-d, --is-compression-enabled [is-compression-enabled]", $("Is the compression enabled for the Cdn. Valid input: -d [true|false]")).option("-w, --is-http-allowed [is-http-allowed]", $("Is the http traffic allowed for the Cdn. Valid input: -w [true|false]")).option("-a, --is-https-allowed [is-https-allowed]", $("Is the https traffic allowed for the Cdn. Valid input: -a [true|false]")).option("-q, --query-string-caching-behavior [query-string-caching-behavior]", $("The way Cdn handles requests with query string")).option("-u, --http-port [http-port]", $("The port http traffic used on the origin server")).option("-f, --https-port [https-port]", $("The port https traffic used on the origin server")).option("-t, --tags [tags]", $("The tags to associate with the Azure Cdn Endpoint")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __10(name, profileName, resourceGroup, location, originName, originHostName, options, _) { var subscription, client, tags, contentTypesToCompress, endpointCreateParameters, progress, callbackArgs, result, response; var __frame = { name: "__10", line: 594 }; return __func(_, this, arguments, __10, 7, __frame, function __$__10() {
























      return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 38, function ___(__0, __3) { resourceGroup = __3;
            return cli.interaction.promptIfNotGiven($("Endpoint location: "), location, __cb(_, __frame, 8, 33, function ___(__0, __4) { location = __4;
              return cli.interaction.promptIfNotGiven($("Origin name: "), originName, __cb(_, __frame, 9, 35, function ___(__0, __5) { originName = __5;
                return cli.interaction.promptIfNotGiven($("Origin host name: "), originHostName, __cb(_, __frame, 10, 39, function ___(__0, __6) { originHostName = __6;





                  subscription = profile.current.getSubscription();
                  client = utils.createCdnManagementClient(subscription);

                  tags = { };
                  tags = tagUtils.buildTagsParameter(tags, options);

                  contentTypesToCompress = (options.contentTypesToCompress ? options.contentTypesToCompress.split(",") : []);

                  endpointCreateParameters = {
                    contentTypesToCompress: contentTypesToCompress,
                    location: location,
                    originHostHeader: options.originHostHeader,
                    originPath: options.originPath,
                    origins: [{
                      name: originName,
                      hostName: originHostName,
                      httpPort: parseInt(options.httpPort),
                      httpsPort: parseInt(options.httpsPort) },],

                    queryStringCachingBehavior: options.queryStringCachingBehavior,
                    tags: tags };


                  if (options.isCompressionEnabled) {
                    endpointCreateParameters.isCompressionEnabled = cdnManagementUtil.getBooleanFromString(options.isCompressionEnabled); } ;

                  if (options.isHttpAllowed) {
                    endpointCreateParameters.isHttpAllowed = cdnManagementUtil.getBooleanFromString(options.isHttpAllowed); } ;

                  if (options.isHttpsAllowed) {
                    endpointCreateParameters.isHttpsAllowed = cdnManagementUtil.getBooleanFromString(options.isHttpsAllowed); } ;


                  progress = cli.interaction.progress(util.format($(("Creating endpoint named " + name))));

                  callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__10() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__10() {


                              return client.endpoints.create(resourceGroup, profileName, name, endpointCreateParameters, __cb(_, __frame, 54, 40, function ___(__0, __7) { callbackArgs = __7;
                                result = callbackArgs[0];
                                response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__10() { if (e) {

                                return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__10() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__10() {

                          progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__10() {


                      cli.interaction.formatOutput(result, function(data) {
                        if (!data) {
                          log.info($("Error creating endpoint %s.")); }
                         else {
                          log.data("");
                          log.data($("Endpoint name                  :"), result.name);
                          log.data("");
                          log.data($("Profile name                   :"), profileName);
                          log.data($("Resource Group                 :"), resourceGroup);
                          log.data($("Location                       :"), result.location);
                          log.data($("Tags                           :"), tagUtils.getTagsInfo(result.tags));
                          log.data($("Host Name                      :"), result.hostName);
                          log.data($("Origin Host Header             :"), result.originHostHeader);
                          log.data($("Origin Path                    :"), result.originPath);
                          log.data($("Content Types To Compress      :"), result.contentTypesToCompress.join(","));
                          log.data($("Is Compression Enabled         :"), result.isCompressionEnabled);
                          log.data($("Is Http Allowed                :"), result.isHttpAllowed);
                          log.data($("Is Https Allowed               :"), result.isHttpsAllowed);
                          log.data($("Query String Caching Behavior  :"), result.queryStringCachingBehavior);
                          log.data($("Origin Names                   :"), cdnManagementUtil.getOriginNamesString(result.origins));
                          log.data($("OptimizationType               :"), result.optimizationType);
                          log.data($("Number of geo filters          :"), result.geoFilters.length);
                          log.data($("Resource State                 :"), result.resourceState);
                          log.data($("Provisioning State             :"), result.provisioningState);
                          log.data(""); } ; }); _(); }); }); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });





  endpoint.command("set [name] [profile-name] [resource-group]").description($("Update endpoint with given properties.")).usage("[options] <name> <profile-name> <resource-group> [origin-host-header] [origin-path] [content-type-to-compress] [is-compression-enabled] [is-http-allowed] [is-https-allowed] [query-string-caching-behavior] [tags]").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-e, --origin-host-header [origin-host-header]", $("The origin host header of the Azure Cdn Endpoint")).option("-i, --origin-path [origin-path]", $("The origin path Azure Cdn Endpoint")).option("-c, --content-types-to-compress [content-types-to-compress]", $("The list of mime types that need to be compressed by Cdn edge nodes")).option("-d, --is-compression-enabled [is-compression-enabled]", $("Is the compression enabled for the Cdn. Valid input: -d [true|false]")).option("-u, --is-http-allowed [is-http-allowed]", $("Is the http traffic allowed for the Cdn. Valid input: -u [true|false]")).option("-w, --is-https-allowed [is-https-allowed]", $("Is the https traffic allowed for the Cdn. Valid input: -w [true|false]")).option("-q, --query-string-caching-behavior [query-string-caching-behavior]", $("The way Cdn handles requests with query string")).option("-t, --tags [tags]", $("The tags to associate with the Azure Cdn Endpoint")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __11(name, profileName, resourceGroup, options, _) { var subscription, client, endpointUpdateParameters, tags, progress, callbackArgs, result, response; var __frame = { name: "__11", line: 702 }; return __func(_, this, arguments, __11, 4, __frame, function __$__11() {



















      return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 38, function ___(__0, __3) { resourceGroup = __3;





            subscription = profile.current.getSubscription();
            client = utils.createCdnManagementClient(subscription);




            endpointUpdateParameters = { };

            if (options.originHostHeader) {
              endpointUpdateParameters.originHostHeader = options.originHostHeader; } ;

            if (options.originPath) {
              endpointUpdateParameters.originPath = options.originPath; } ;

            if (options.isCompressionEnabled) {
              endpointUpdateParameters.isCompressionEnabled = cdnManagementUtil.getBooleanFromString(options.isCompressionEnabled); } ;

            if (options.contentTypesToCompress) {
              endpointUpdateParameters.contentTypesToCompress = options.contentTypesToCompress.split(","); } ;

            if (options.isHttpAllowed) {
              endpointUpdateParameters.isHttpAllowed = cdnManagementUtil.getBooleanFromString(options.isHttpAllowed); } ;

            if (options.isHttpsAllowed) {
              endpointUpdateParameters.isHttpsAllowed = cdnManagementUtil.getBooleanFromString(options.isHttpsAllowed); } ;

            if (options.queryStringCachingBehavior) {
              endpointUpdateParameters.queryStringCachingBehavior = options.queryStringCachingBehavior; } ;

            if (options.tags) {
              tags = { };
              tags = tagUtils.buildTagsParameter(tags, options);
              endpointUpdateParameters.tags = tags; } ;



            progress = cli.interaction.progress(util.format($(("Updating endpoint named " + name))));

            callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__11() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__11() {


                        return client.endpoints.update(resourceGroup, profileName, name, endpointUpdateParameters, __cb(_, __frame, 54, 40, function ___(__0, __4) { callbackArgs = __4;
                          result = callbackArgs[0];
                          response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__11() { if (e) {

                          return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__11() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__11() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__11() {


                cli.interaction.formatOutput(result, function(data) {
                  if (!data) {
                    log.info($("Error updating endpoint %s.")); }
                   else {
                    log.data("");
                    log.data($("Endpoint name                  :"), result.name);
                    log.data("");
                    log.data($("Profile name                   :"), profileName);
                    log.data($("Resource Group                 :"), resourceGroup);
                    log.data($("Location                       :"), result.location);
                    log.data($("Tags                           :"), tagUtils.getTagsInfo(result.tags));
                    log.data($("Host Name                      :"), result.hostName);
                    log.data($("Origin Host Header             :"), result.originHostHeader);
                    log.data($("Origin Path                    :"), result.originPath);
                    log.data($("Content Types To Compress      :"), result.contentTypesToCompress.join(","));
                    log.data($("Is Compression Enabled         :"), result.isCompressionEnabled);
                    log.data($("Is Http Allowed                :"), result.isHttpAllowed);
                    log.data($("Is Https Allowed               :"), result.isHttpsAllowed);
                    log.data($("Query String Caching Behavior  :"), result.queryStringCachingBehavior);
                    log.data($("Origin Names                   :"), cdnManagementUtil.getOriginNamesString(result.origins));
                    log.data($("OptimizationType               :"), result.optimizationType);
                    log.data($("Number of geo filters          :"), result.geoFilters.length);
                    log.data($("Resource State                 :"), result.resourceState);
                    log.data($("Provisioning State             :"), result.provisioningState);
                    log.data(""); } ; }); _(); }); }); }, true)); }, true)); }, true)); }); });






  endpoint.command("delete [name] [profile-name] [resource-group]").description($("Delete an endpoint by endpoint name, profile name, and resource group")).usage("[options] <ename> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __12(name, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__12", line: 803 }; return __func(_, this, arguments, __12, 4, __frame, function __$__12() {











      return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 35, function ___(__0, __3) { resourceGroup = __3;





            subscription = profile.current.getSubscription();
            client = utils.createCdnManagementClient(subscription);

            progress = cli.interaction.progress(util.format($(("Deleting endpoint named " + name))));

            callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__12() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__12() {


                        return client.endpoints.deleteMethod(resourceGroup, profileName, name, __cb(_, __frame, 21, 40, function ___(__0, __4) { callbackArgs = __4;
                          result = callbackArgs[0];
                          response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__12() { if (e) {

                          return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__12() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__12() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__12() {


                if ((response.statusCode == 200)) {
                  log.info(("Delete command successfully invoked for endpoint " + name)); } else {
                  if ((response.statusCode == 204)) {
                    log.info((("Delete sucess, but no endpoint named " + name) + " was found")); }
                   else {
                    log.info(("Error in deleting endpoint " + name)); } ; } ; _(); }); }); }, true)); }, true)); }, true)); }); });




  endpoint.command("start [name] [profile-name] [resource-group]").description($("Start an endpoint by endpoint name, profile name, and resource group")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __13(name, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__13", line: 850 }; return __func(_, this, arguments, __13, 4, __frame, function __$__13() {











      return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 35, function ___(__0, __3) { resourceGroup = __3;





            subscription = profile.current.getSubscription();
            client = utils.createCdnManagementClient(subscription);

            progress = cli.interaction.progress(util.format($(("Starting endpoint named " + name))));

            callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__13() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__13() {


                        return client.endpoints.start(resourceGroup, profileName, name, __cb(_, __frame, 21, 40, function ___(__0, __4) { callbackArgs = __4;
                          result = callbackArgs[0];
                          response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__13() { if (e) {

                          return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__13() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__13() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__13() {


                if ((response.statusCode == 200)) {
                  log.info((("Command successfully invoked for endpoint " + name) + " and it is now running")); }
                 else {
                  log.info(("Error in starting endpoint " + name)); } ; _(); }); }); }, true)); }, true)); }, true)); }); });




  endpoint.command("stop [name] [profile-name] [resource-group]").description($("Stop an endpoint by endpoint name, profile name, and resource group")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __14(name, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__14", line: 895 }; return __func(_, this, arguments, __14, 4, __frame, function __$__14() {











      return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 38, function ___(__0, __3) { resourceGroup = __3;





            subscription = profile.current.getSubscription();
            client = utils.createCdnManagementClient(subscription);

            progress = cli.interaction.progress(util.format($(("Stopping endpoint named " + name))));

            callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__14() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__14() {


                        return client.endpoints.stop(resourceGroup, profileName, name, __cb(_, __frame, 21, 40, function ___(__0, __4) { callbackArgs = __4;
                          result = callbackArgs[0];
                          response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__14() { if (e) {

                          return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__14() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__14() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__14() {


                if ((response.statusCode == 200)) {
                  log.info((("Command successfully invoked for endpoint " + name) + " and it is now stopped")); }
                 else {
                  log.info(("Error in stopping endpoint " + name)); } ; _(); }); }); }, true)); }, true)); }, true)); }); });




  endpoint.command("purge [name] [profile-name] [resource-group] [content-paths]").description($("Purge the content of the given paths in the endpoint")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-c, --content-paths <content-paths>", $("Content paths to be purged")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __15(name, profileName, resourceGroup, contentPaths, options, _) { var subscription, client, parsedContentPaths, progress, callbackArgs, result, response; var __frame = { name: "__15", line: 941 }; return __func(_, this, arguments, __15, 5, __frame, function __$__15() {












      return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 35, function ___(__0, __3) { resourceGroup = __3;
            return cli.interaction.promptIfNotGiven($("Content paths: "), contentPaths, __cb(_, __frame, 8, 34, function ___(__0, __4) { contentPaths = __4;





              subscription = profile.current.getSubscription();
              client = utils.createCdnManagementClient(subscription);

              parsedContentPaths = (contentPaths ? contentPaths.split(",") : []);

              progress = cli.interaction.progress(util.format($(("Purging content for endpoint named " + name))));

              callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__15() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__15() {


                          return client.endpoints.purgeContent(resourceGroup, profileName, name, parsedContentPaths, __cb(_, __frame, 24, 40, function ___(__0, __5) { callbackArgs = __5;
                            result = callbackArgs[0];
                            response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__15() { if (e) {

                            return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__15() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__15() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__15() { _(); }); }); }, true)); }, true)); }, true)); }, true)); }); });




  endpoint.command("load [name] [profile-name] [resource-group] [content-paths]").description($("Load the content of the given paths in the endpoint")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-c, --content-paths <content-paths>", $("Content paths to be purged")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __16(name, profileName, resourceGroup, contentPaths, options, _) { var subscription, client, parsedContentPaths, progress, callbackArgs, result, response; var __frame = { name: "__16", line: 984 }; return __func(_, this, arguments, __16, 5, __frame, function __$__16() {












      return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 38, function ___(__0, __3) { resourceGroup = __3;
            return cli.interaction.promptIfNotGiven($("Content paths: "), contentPaths, __cb(_, __frame, 8, 37, function ___(__0, __4) { contentPaths = __4;





              subscription = profile.current.getSubscription();
              client = utils.createCdnManagementClient(subscription);

              parsedContentPaths = (contentPaths ? contentPaths.split(",") : []);

              progress = cli.interaction.progress(util.format($(("Loading content for endpoint named " + name))));

              callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__16() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__16() {


                          return client.endpoints.loadContent(resourceGroup, profileName, name, parsedContentPaths, __cb(_, __frame, 24, 40, function ___(__0, __5) { callbackArgs = __5;
                            result = callbackArgs[0];
                            response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__16() { if (e) {

                            return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__16() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__16() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__16() { _(); }); }); }, true)); }, true)); }, true)); }, true)); }); });




  endpoint.command("check [endpoint-name]").description($("Check if the endpoint name has been used or not")).usage("[options] <endpoint-name>").option("-n, --endpoint-name <endpoint-name>", $("Endpoint name")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __17(endpointName, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__17", line: 1024 }; return __func(_, this, arguments, __17, 2, __frame, function __$__17() {










      return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 6, 37, function ___(__0, __1) { endpointName = __1;





        subscription = profile.current.getSubscription();
        client = utils.createCdnManagementClient(subscription);

        progress = cli.interaction.progress(util.format($(("Checking name availability for " + endpointName))));

        callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__17() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__17() {


                    return client.checkNameAvailability(endpointName, "Microsoft.Cdn/Profiles/Endpoints", __cb(_, __frame, 20, 30, function ___(__0, __2) { callbackArgs = __2;
                      result = callbackArgs[0];
                      response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__17() { if (e) {

                      return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__17() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__17() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__17() {


            if ((response.statusCode != 200)) {
              log.info("Command invoke failed, please retry"); } else {
              if (result.nameAvailable) {
                log.info((endpointName + " is valid to use")); }
               else {
                log.info((endpointName + " is already in use")); } ; } ; _(); }); }); }, true)); }); });





  endpoint.command("checkUsage [name] [profile-name] [resource-group]").description($("List the usages of resources under endpoint.")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __18(name, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__18", line: 1071 }; return __func(_, this, arguments, __18, 4, __frame, function __$__18() {











      return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 38, function ___(__0, __3) { resourceGroup = __3;





            subscription = profile.current.getSubscription();
            client = utils.createCdnManagementClient(subscription);
            progress = cli.interaction.progress(util.format($(("Listing usages for endpoint: " + name))));

            callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__18() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__18() {


                        return client.endpoints.listResourceUsage(resourceGroup, profileName, name, __cb(_, __frame, 20, 40, function ___(__0, __4) { callbackArgs = __4;
                          result = callbackArgs[0];
                          response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__18() { if (e) {

                          return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__18() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__18() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__18() {


                if ((response.statusCode != 200)) {
                  log.info("Command invoke failed, please retry"); }
                 else {
                  cli.interaction.formatOutput(result, function() {
                    if ((!result || (result.length === 0))) {
                      log.info($("No usage record was found.")); }
                     else {
                      log.table(result, function(row, usage) {
                        row.cell($("ResourceType"), usage.resourceType);
                        row.cell($("Unit"), usage.unit);
                        row.cell($("CurrentValue"), usage.currentValue);
                        row.cell($("Limit"), usage.limit); }); } ; }); } ; _(); }); }); }, true)); }, true)); }, true)); }); });








  var origin = cdn.category("origin").description($("Commands to manage Azure cdn profile endpoint origin"));



  origin.command("show [name] [endpoint-name] [profile-name] [resource-group]").description($("Get origin by origin name, endpoint name, profile name, and resource group")).usage("[options] <name> <endpoint-name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the origin")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __19(name, endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__19", line: 1132 }; return __func(_, this, arguments, __19, 5, __frame, function __$__19() {












      return cli.interaction.promptIfNotGiven($("Origin name: "), name, __cb(_, __frame, 5, 26, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 6, 37, function ___(__0, __2) { endpointName = __2;
          return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 7, 36, function ___(__0, __3) { profileName = __3;
            return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 8, 35, function ___(__0, __4) { resourceGroup = __4;





              subscription = profile.current.getSubscription();
              client = utils.createCdnManagementClient(subscription);

              progress = cli.interaction.progress(util.format($(("Getting origin named " + name))));

              callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__19() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__19() {


                          return client.origins.get(resourceGroup, profileName, endpointName, name, __cb(_, __frame, 22, 38, function ___(__0, __5) { callbackArgs = __5;
                            result = callbackArgs[0];
                            response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__19() { if (e) {

                            return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__19() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__19() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__19() {


                  cli.interaction.formatOutput(result, function(data) {
                    if (!data) {
                      log.info($("No origin named %s found."), profileName); }
                     else {
                      log.data("");
                      log.data($("origin name                  :"), result.name);
                      log.data("");
                      log.data($("endpoint name                  :"), endpointName);
                      log.data($("profile name                   :"), profileName);
                      log.data($("resource group                 :"), resourceGroup);
                      log.data($("type                           :"), result.type);
                      log.data($("host name                      :"), result.hostName);
                      log.data($("http port                      :"), result.httpPort);
                      log.data($("https port                     :"), result.httpsPort);
                      log.data($("resource state                 :"), result.resourceState);
                      log.data($("provisioning state             :"), result.provisioningState);
                      log.data(""); } ; }); _(); }); }); }, true)); }, true)); }, true)); }, true)); }); });





  origin.command("set [name] [endpoint-name] [profile-name] [resource-group]").description($("Update origin of the given origin name, endpoint name, profile name, and resource group")).usage("[options] <name> <endpoint-name> <profile-name> <resource-group> [host-name] [http-port] [https-port]").option("-n, --name <name>", $("Name of the origin")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-o, --host-name [host-name]", $("Host name")).option("-r, --http-port [http-port]", $("Http port")).option("-w, --https-port [https-port]", $("Https port")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __20(name, endpointName, profileName, resourceGroup, options, _) { var subscription, client, originUpdateParameter, progress, callbackArgs, result, response; var __frame = { name: "__20", line: 1196 }; return __func(_, this, arguments, __20, 5, __frame, function __$__20() {















      return cli.interaction.promptIfNotGiven($("Origin name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 6, 37, function ___(__0, __2) { endpointName = __2;
          return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 7, 36, function ___(__0, __3) { profileName = __3;
            return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 8, 35, function ___(__0, __4) { resourceGroup = __4;





              subscription = profile.current.getSubscription();
              client = utils.createCdnManagementClient(subscription);

              originUpdateParameter = { };
              if (options.hostName) {
                originUpdateParameter.hostName = options.hostName; } ;

              if (options.httpPort) {
                originUpdateParameter.httpPort = parseInt(options.httpPort); } ;

              if (options.httpsPort) {
                originUpdateParameter.httpsPort = parseInt(options.httpsPort); } ;



              progress = cli.interaction.progress(util.format($(("Updating origin named " + name))));

              callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__20() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__20() {


                          return client.origins.update(resourceGroup, profileName, endpointName, name, originUpdateParameter, __cb(_, __frame, 34, 38, function ___(__0, __5) { callbackArgs = __5;
                            result = callbackArgs[0];
                            response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__20() { if (e) {

                            return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__20() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__20() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__20() {


                  cli.interaction.formatOutput(result, function(data) {
                    if (!data) {
                      log.info($("No origin named %s found to update."), profileName); }
                     else {
                      log.data("");
                      log.data($("origin name                  :"), result.name);
                      log.data("");
                      log.data($("endpoint name                  :"), endpointName);
                      log.data($("profile name                   :"), profileName);
                      log.data($("resource group                 :"), resourceGroup);
                      log.data($("type                           :"), result.type);
                      log.data($("host name                      :"), result.hostName);
                      log.data($("http port                      :"), result.httpPort);
                      log.data($("https port                     :"), result.httpsPort);
                      log.data($("resource state                 :"), result.resourceState);
                      log.data($("provisioning state             :"), result.provisioningState);
                      log.data(""); } ; }); _(); }); }); }, true)); }, true)); }, true)); }, true)); }); });







  var customDomain = cdn.category("customDomain").description($("Commands to manage Azure cdn profile endpoint custom domain"));



  customDomain.command("list [endpoint-name] [profile-name] [resource-group]").description($("List custom domains by endpoint name, profile name, and resource group")).usage("[options] <endpoint-name> <profile-name> <resource-group>").option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __21(endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__21", line: 1274 }; return __func(_, this, arguments, __21, 4, __frame, function __$__21() {











      return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 5, 37, function ___(__0, __1) { endpointName = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 37, function ___(__0, __3) { resourceGroup = __3;





            subscription = profile.current.getSubscription();
            client = utils.createCdnManagementClient(subscription);

            progress = cli.interaction.progress(util.format($(("Listing custom domain under " + endpointName))));

            callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__21() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__21() {


                        return client.customDomains.listByEndpoint(resourceGroup, profileName, endpointName, __cb(_, __frame, 21, 44, function ___(__0, __4) { callbackArgs = __4;
                          result = callbackArgs[0];
                          response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__21() { if (e) {

                          return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__21() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__21() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__21() {


                cli.interaction.formatOutput(result, function() {
                  if ((!result || (result.length === 0))) {
                    log.info($(("No custom domains found under " + endpointName))); }
                   else {
                    log.table(result, function(row, cd) {
                      row.cell($("Name"), cd.name);
                      row.cell($("Endpoint"), endpointName);
                      row.cell($("HostName"), cd.hostName);
                      row.cell($("ValidationData"), cd.validationData);
                      row.cell($("ProvisioningState"), cd.provisioningState);
                      row.cell($("ResourceState"), cd.resourceState);
                      row.cell($("CustomHttpsProvisioningState"), cd.customHttpsProvisioningState); }); } ; }); _(); }); }); }, true)); }, true)); }, true)); }); });






  customDomain.command("show [name] [endpoint-name] [profile-name] [resource-group]").description($("Get custom domains by custom domain name, endpoint name, profile name, and resource group")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the custom domain")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __22(name, endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__22", line: 1330 }; return __func(_, this, arguments, __22, 5, __frame, function __$__22() {












      return cli.interaction.promptIfNotGiven($("Custom domain name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 6, 37, function ___(__0, __2) { endpointName = __2;
          return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 7, 36, function ___(__0, __3) { profileName = __3;
            return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 8, 35, function ___(__0, __4) { resourceGroup = __4;





              subscription = profile.current.getSubscription();
              client = utils.createCdnManagementClient(subscription);

              progress = cli.interaction.progress(util.format($(("Getting custom domain named " + name))));

              callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__22() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__22() {


                          return client.customDomains.get(resourceGroup, profileName, endpointName, name, __cb(_, __frame, 22, 44, function ___(__0, __5) { callbackArgs = __5;
                            result = callbackArgs[0];
                            response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__22() { if (e) {

                            return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__22() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__22() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__22() {



                  cli.interaction.formatOutput(result, function(data) {
                    if (!data) {
                      log.info($("No custom domain named %s found."), name); }
                     else {
                      log.data("");
                      log.data($("custom domain name             :"), result.name);
                      log.data("");
                      log.data($("endpoint name                  :"), endpointName);
                      log.data($("profile name                   :"), profileName);
                      log.data($("resource group                 :"), resourceGroup);
                      log.data($("type                           :"), result.type);
                      log.data($("host name                      :"), result.hostName);
                      log.data($("validation data                :"), result.validationData);
                      log.data($("resource state                 :"), result.resourceState);
                      log.data($("provisioning state             :"), result.provisioningState);
                      log.data($("custom https provisioning state:"), result.customHttpsProvisioningState);
                      log.data($("id                             :"), result.id);
                      log.data(""); } ; }); _(); }); }); }, true)); }, true)); }, true)); }, true)); }); });





  customDomain.command("create [name] [endpoint-name] [profile-name] [resource-group] [custom-domain-host-name]").description($("Create a custom domain of a perticular custom domain host name")).usage("[options] <name> <endpoint-name> <profile-name> <resource-group> <custom-domain-host-name>").option("-n, --name <name>", $("Name of the custom domain")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-d, --custom-domain-host-name <custom-domain-host-name>", $("The host name of the custom domain")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __23(name, endpointName, profileName, resourceGroup, customDomainHostName, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__23", line: 1394 }; return __func(_, this, arguments, __23, 6, __frame, function __$__23() {













      return cli.interaction.promptIfNotGiven($("Custom domain name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 6, 37, function ___(__0, __2) { endpointName = __2;
          return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 7, 36, function ___(__0, __3) { profileName = __3;
            return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 8, 38, function ___(__0, __4) { resourceGroup = __4;
              return cli.interaction.promptIfNotGiven($("Custom domain host name: "), customDomainHostName, __cb(_, __frame, 9, 45, function ___(__0, __5) { customDomainHostName = __5;





                subscription = profile.current.getSubscription();
                client = utils.createCdnManagementClient(subscription);

                progress = cli.interaction.progress(util.format($(("Creating custom domain named " + name))));

                callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__23() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__23() {


                            return client.customDomains.create(resourceGroup, profileName, endpointName, name, customDomainHostName, __cb(_, __frame, 23, 44, function ___(__0, __6) { callbackArgs = __6;
                              result = callbackArgs[0];
                              response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__23() { if (e) {

                              return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__23() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__23() {

                        progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__23() {


                    cli.interaction.formatOutput(result, function() {
                      log.data("");
                      log.data($("custom domain name             :"), result.name);
                      log.data("");
                      log.data($("endpoint name                  :"), endpointName);
                      log.data($("profile name                   :"), profileName);
                      log.data($("resource group                 :"), resourceGroup);
                      log.data($("type                           :"), result.type);
                      log.data($("host name                      :"), result.hostName);
                      log.data($("validation data                :"), result.validationData);
                      log.data($("resource state                 :"), result.resourceState);
                      log.data($("provisioning state             :"), result.provisioningState);
                      log.data($("custom https provisioning state:"), result.customHttpsProvisioningState);
                      log.data($("id                             :"), result.id);
                      log.data(""); }); _(); }); }); }, true)); }, true)); }, true)); }, true)); }, true)); }); });




  customDomain.command("delete [name] [endpoint-name] [profile-name] [resource-group]").description($("Delete a custom domain of a perticular custom domain host name")).usage("[options] <name> <endpoint-name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the custom domain")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __24(name, endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__24", line: 1453 }; return __func(_, this, arguments, __24, 5, __frame, function __$__24() {












      return cli.interaction.promptIfNotGiven($("Custom domain name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 6, 37, function ___(__0, __2) { endpointName = __2;
          return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 7, 36, function ___(__0, __3) { profileName = __3;
            return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 8, 38, function ___(__0, __4) { resourceGroup = __4;





              subscription = profile.current.getSubscription();
              client = utils.createCdnManagementClient(subscription);

              progress = cli.interaction.progress(util.format($(("Deleting custom domain named " + name))));

              callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__24() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__24() {


                          return client.customDomains.deleteMethod(resourceGroup, profileName, endpointName, name, __cb(_, __frame, 22, 44, function ___(__0, __5) { callbackArgs = __5;
                            result = callbackArgs[0];
                            response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__24() { if (e) {

                            return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__24() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__24() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__24() {


                  if ((response.statusCode == 200)) {
                    log.info(("Delete command successfully invoked for custom domain " + name)); } else {
                    if ((response.statusCode == 204)) {
                      log.info((("Delete success, but no custom domain named " + name) + " was found")); }
                     else {
                      log.info(("Error in deleting custom domain " + name)); } ; } ; _(); }); }); }, true)); }, true)); }, true)); }, true)); }); });




  customDomain.command("validate [endpoint-name] [profile-name] [resource-group] [custom-domain-host-name]").description($("Check to see if a custom domain host name is registered for cname mapping to the endpoint ")).usage("[options] <endpoint-name> <profile-name> <resource-group> <custom-domain-host-name>").option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-d, --custom-domain-host-name <custom-domain-host-name>", $("The host name of the custom domain")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __25(endpointName, profileName, resourceGroup, customDomainHostName, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__25", line: 1502 }; return __func(_, this, arguments, __25, 5, __frame, function __$__25() {












      return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 5, 37, function ___(__0, __1) { endpointName = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 35, function ___(__0, __3) { resourceGroup = __3;
            return cli.interaction.promptIfNotGiven($("Custom domain host name: "), customDomainHostName, __cb(_, __frame, 8, 42, function ___(__0, __4) { customDomainHostName = __4;





              subscription = profile.current.getSubscription();
              client = utils.createCdnManagementClient(subscription);

              progress = cli.interaction.progress(util.format($(("Validating custom domain host name: " + customDomainHostName))));

              callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__25() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__25() {


                          return client.endpoints.validateCustomDomain(resourceGroup, profileName, endpointName, customDomainHostName, __cb(_, __frame, 22, 40, function ___(__0, __5) { callbackArgs = __5;
                            result = callbackArgs[0];
                            response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__25() { if (e) {

                            return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__25() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__25() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__25() {

                  cli.interaction.formatOutput(result, function() {
                    if ((response.statusCode != 200)) {
                      log.info("Command invoke failed, please retry"); }
                     else if (result.customDomainValidated) {
                      log.info((("Validate host name " + customDomainHostName) + " success")); }
                     else {
                      log.info((("Validate host name " + customDomainHostName) + " failed"));
                      log.info(("Reason: " + result.reason));
                      log.info(("Message: " + result.message)); }  ; }); _(); }); }); }, true)); }, true)); }, true)); }, true)); }); });





  customDomain.command("enableHttps [name] [endpoint-name] [profile-name] [resource-group]").description($("Enable https on the custom domain.")).usage("[options] <name> <endpoint-name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the custom domain")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __26(name, endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__26", line: 1554 }; return __func(_, this, arguments, __26, 5, __frame, function __$__26() {












      return cli.interaction.promptIfNotGiven($("Custom domain name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 6, 37, function ___(__0, __2) { endpointName = __2;
          return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 7, 36, function ___(__0, __3) { profileName = __3;
            return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 8, 38, function ___(__0, __4) { resourceGroup = __4;





              subscription = profile.current.getSubscription();
              client = utils.createCdnManagementClient(subscription);

              progress = cli.interaction.progress(util.format($(("Enabling https for custom domain named " + name))));

              callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__26() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__26() {


                          return client.customDomains.enableCustomHttps(resourceGroup, profileName, endpointName, name, __cb(_, __frame, 22, 44, function ___(__0, __5) { callbackArgs = __5;
                            result = callbackArgs[0];
                            response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__26() { if (e) {

                            return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__26() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__26() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__26() {


                  if (((response.statusCode == 200) || (response.statusCode == 202))) {
                    log.info(("Enable https command successfully invoked for custom domain " + name)); }


                   else {
                    log.info(("Error when enabling https custom domain " + name)); } ; _(); }); }); }, true)); }, true)); }, true)); }, true)); }); });




  customDomain.command("disableHttps [name] [endpoint-name] [profile-name] [resource-group]").description($("Disable https on the custom domain.")).usage("[options] <name> <endpoint-name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the custom domain")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __27(name, endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__27", line: 1603 }; return __func(_, this, arguments, __27, 5, __frame, function __$__27() {












      return cli.interaction.promptIfNotGiven($("Custom domain name: "), name, __cb(_, __frame, 5, 29, function ___(__0, __1) { name = __1;
        return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 6, 37, function ___(__0, __2) { endpointName = __2;
          return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 7, 36, function ___(__0, __3) { profileName = __3;
            return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 8, 38, function ___(__0, __4) { resourceGroup = __4;





              subscription = profile.current.getSubscription();
              client = utils.createCdnManagementClient(subscription);

              progress = cli.interaction.progress(util.format($(("Disabling https for custom domain named " + name))));

              callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__27() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__27() {


                          return client.customDomains.disableCustomHttps(resourceGroup, profileName, endpointName, name, __cb(_, __frame, 22, 44, function ___(__0, __5) { callbackArgs = __5;
                            result = callbackArgs[0];
                            response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__27() { if (e) {

                            return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__27() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__27() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__27() {


                  if (((response.statusCode == 200) || (response.statusCode == 202))) {
                    log.info(("Disable https command successfully invoked for custom domain " + name)); }


                   else {
                    log.info(("Error when disabling https custom domain " + name)); } ; _(); }); }); }, true)); }, true)); }, true)); }, true)); }); });





  var geoFilter = cdn.category("geofilter").description($("Commands to manage Azure cdn profile endpoint geo filters"));



  geoFilter.command("list [endpoint-name] [profile-name] [resource-group]").description($("List geo filters by endpoint name, profile name, and resource group")).usage("[options] <endpoint-name> <profile-name> <resource-group>").option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __28(endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__28", line: 1656 }; return __func(_, this, arguments, __28, 4, __frame, function __$__28() {











      return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 5, 37, function ___(__0, __1) { endpointName = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 6, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 7, 38, function ___(__0, __3) { resourceGroup = __3;





            subscription = profile.current.getSubscription();
            client = utils.createCdnManagementClient(subscription);

            progress = cli.interaction.progress(util.format($(("Listing custom domain under " + endpointName))));

            callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__28() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__28() {


                        return client.endpoints.get(resourceGroup, profileName, endpointName, __cb(_, __frame, 21, 40, function ___(__0, __4) { callbackArgs = __4;
                          result = callbackArgs[0];
                          response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__28() { if (e) {

                          return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__28() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__28() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__28() {


                cli.interaction.formatOutput(result, function() {
                  if (!result) {
                    log.info($(("No endpoint found for endpoint name " + endpointName))); }

                   else if (!result.geoFilters) {
                    log.info($(("Geo filter field is not set for endpoint name " + endpointName))); }
                   else {
                    log.table(result.geoFilters, function(row, gf) {
                      row.cell($("RelativePath"), gf.relativePath);
                      row.cell($("Action"), gf.action);
                      row.cell($("CountryCodes"), gf.countryCodes.join(",")); }); }  ; }); _(); }); }); }, true)); }, true)); }, true)); }); });






  geoFilter.command("add [relative-path] [endpoint-name] [profile-name] [resource-group] [action] [country-codes]").description($("Add a geo filters by endpoint name, profile name, and resource group")).usage("[options] <relative-path> <endpoint-name> <profile-name> <resource-group> <action> <country-codes>").option("-r, --relative-path <relative-path>", $("Relative path of the geo filter")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-a, --action <action>", $("Action of the geo filter. Valid input: -a [Block|Allow]")).option("-c, --country-codes <country-codes>", $("List of country codes to apply the geo filter. Country codes are two letters and comma separated.")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __29(relativePath, endpointName, profileName, resourceGroup, action, countryCodes, options, _) { var countryCodesList, subscription, client, progress, callbackArgs, result, response, endpointUpdateParameters, geoFiltersObject, geoFilterToAdd; var __frame = { name: "__29", line: 1713 }; return __func(_, this, arguments, __29, 7, __frame, function __$__29() {














      return cli.interaction.promptIfNotGiven($("Relative path: "), relativePath, __cb(_, __frame, 5, 37, function ___(__0, __1) { relativePath = __1;
        return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 6, 37, function ___(__0, __2) { endpointName = __2;
          return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 7, 36, function ___(__0, __3) { profileName = __3;
            return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 8, 37, function ___(__0, __4) { resourceGroup = __4;
              return cli.interaction.promptIfNotGiven($("Action: "), action, __cb(_, __frame, 9, 31, function ___(__0, __5) { action = __5;
                return cli.interaction.promptIfNotGiven($("Country codes: "), countryCodes, __cb(_, __frame, 10, 37, function ___(__0, __6) { countryCodes = __6;

                  countryCodesList = (countryCodes ? countryCodes.split(",") : []);





                  subscription = profile.current.getSubscription();
                  client = utils.createCdnManagementClient(subscription);

                  progress = cli.interaction.progress(util.format($(("Adding geo filter under " + endpointName))));

                  callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__29() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__29() {


                              return client.endpoints.get(resourceGroup, profileName, endpointName, __cb(_, __frame, 26, 40, function ___(__0, __7) { callbackArgs = __7;
                                result = callbackArgs[0];
                                response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__29() { if (e) {

                                return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__29() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__29() {

                          progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__29() {


                      cli.interaction.formatOutput(result, function() {
                        if (!result) {
                          log.info($(("No endpoint found for endpoint name " + endpointName))); }

                         else if (!result.geoFilters) {
                          log.info($(("Geo filter field is not set for endpoint name " + endpointName))); }
                         else {
                          for (var i = 0; (i < result.geoFilters.length); i++) {
                            if ((result.geoFilters[i].relativePath.toLowerCase() === relativePath.toLowerCase())) {

                              throw new Error((("There is a geo filter with same relative path under endpoint " + endpointName) + "!")); } ; }; }  ; });





                      endpointUpdateParameters = { };

                      geoFiltersObject = result.geoFilters;
                      geoFilterToAdd = {
                        relativePath: relativePath,
                        action: action,
                        countryCodes: countryCodesList };


                      geoFiltersObject.push(geoFilterToAdd);

                      endpointUpdateParameters.geoFilters = geoFiltersObject; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__29() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__29() {


                                  return client.endpoints.update(resourceGroup, profileName, endpointName, endpointUpdateParameters, __cb(_, __frame, 65, 40, function ___(__0, __8) { callbackArgs = __8;
                                    result = callbackArgs[0];
                                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__29() { if (e) {

                                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__29() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__29() {

                              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__29() {


                          cli.interaction.formatOutput(function() {
                            log.info(($("New geo filter added for ") + endpointName)); }); _(); }); }); }); }); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });




  geoFilter.command("set [relative-path] [endpoint-name] [profile-name] [resource-group]").description($("Update a geo filters by endpoint name, profile name, and resource group")).usage("[options] <relative-path> <endpoint-name> <profile-name> <resource-group> [action] [country-codes]").option("-r, --relative-path <relative-path>", $("Relative path of the geo filter. e.g. /mycars ")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-a, --action [action]", $("Action of the geo filter. Block or Allow.")).option("-c, --country-codes [country-codes]", $("List of country codes to apply the geo filter. Country codes are two letters and comma separated.")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __30(relativePath, endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response, foundTarget, endpointUpdateParameters; var __frame = { name: "__30", line: 1803 }; return __func(_, this, arguments, __30, 5, __frame, function __$__30() {














      return cli.interaction.promptIfNotGiven($("Relative path: "), relativePath, __cb(_, __frame, 5, 37, function ___(__0, __1) { relativePath = __1;
        return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 6, 37, function ___(__0, __2) { endpointName = __2;
          return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 7, 36, function ___(__0, __3) { profileName = __3;
            return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 8, 38, function ___(__0, __4) { resourceGroup = __4;





              subscription = profile.current.getSubscription();
              client = utils.createCdnManagementClient(subscription);

              progress = cli.interaction.progress(util.format($(("Updating a geo filter under " + endpointName))));

              callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__30() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__30() {


                          return client.endpoints.get(resourceGroup, profileName, endpointName, __cb(_, __frame, 22, 40, function ___(__0, __5) { callbackArgs = __5;
                            result = callbackArgs[0];
                            response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__30() { if (e) {

                            return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__30() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__30() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__30() {


                  foundTarget = false;

                  cli.interaction.formatOutput(result, function() {
                    if (!result) {
                      log.info($(("No endpoint found for endpoint name " + endpointName))); }

                     else if (!result.geoFilters) {
                      log.info($(("Geo filter field is not set for endpoint name " + endpointName))); }
                     else {
                      for (var i = 0; (i < result.geoFilters.length); i++) {
                        if ((result.geoFilters[i].relativePath.toLowerCase() === relativePath.toLowerCase())) {

                          if (options.action) {

                            result.geoFilters[i].action = options.action; } ;

                          if (options.countryCodes) {

                            result.geoFilters[i].countryCodes = options.countryCodes.split(","); } ;


                          foundTarget = true; } ; }; }  ; });





                  if (!foundTarget) {

                    return _(new Error((((("There is no geo filter that has relative path " + relativePath) + " under endpoint ") + endpointName) + "!"))); } ;


                  endpointUpdateParameters = { };

                  endpointUpdateParameters.geoFilters = result.geoFilters; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__30() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__30() {


                              return client.endpoints.update(resourceGroup, profileName, endpointName, endpointUpdateParameters, __cb(_, __frame, 68, 40, function ___(__0, __6) { callbackArgs = __6;
                                result = callbackArgs[0];
                                response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__30() { if (e) {

                                return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__30() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__30() {

                          progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__30() {


                      cli.interaction.formatOutput(function() {
                        log.info(($("Geo filter updated for ") + endpointName)); }); _(); }); }); }); }); }, true)); }, true)); }, true)); }, true)); }); });




  geoFilter.command("delete [relative-path] [endpoint-name] [profile-name] [resource-group]").description($("Delete a geo filters by relative path, endpoint name, profile name, and resource group")).usage("[options] <relative-path> <endpoint-name> <profile-name> <resource-group> <action> <country-codes>").option("-r, --relative-path <relative-path>", $("Relative path of the geo filter. e.g. /mycars ")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __31(relativePath, endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response, foundTarget, newGeoFilterArray, endpointUpdateParameters; var __frame = { name: "__31", line: 1894 }; return __func(_, this, arguments, __31, 5, __frame, function __$__31() {












      return cli.interaction.promptIfNotGiven($("Relative path: "), relativePath, __cb(_, __frame, 5, 37, function ___(__0, __1) { relativePath = __1;
        return cli.interaction.promptIfNotGiven($("Endpoint name: "), endpointName, __cb(_, __frame, 6, 37, function ___(__0, __2) { endpointName = __2;
          return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 7, 36, function ___(__0, __3) { profileName = __3;
            return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 8, 37, function ___(__0, __4) { resourceGroup = __4;





              subscription = profile.current.getSubscription();
              client = utils.createCdnManagementClient(subscription);

              progress = cli.interaction.progress(util.format($(("Deleting a geo filter under endpoint " + endpointName))));

              callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__31() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__31() {


                          return client.endpoints.get(resourceGroup, profileName, endpointName, __cb(_, __frame, 22, 40, function ___(__0, __5) { callbackArgs = __5;
                            result = callbackArgs[0];
                            response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__31() { if (e) {

                            return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__31() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__31() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__31() {


                  foundTarget = false;

                  newGeoFilterArray = [];

                  cli.interaction.formatOutput(result, function() {
                    if (!result) {
                      log.info($(("No endpoint found for endpoint name " + endpointName))); }

                     else if (!result.geoFilters) {
                      log.info($(("Geo filter field is not set for endpoint name " + endpointName))); }
                     else {
                      for (var i = 0; (i < result.geoFilters.length); i++) {
                        if ((result.geoFilters[i].relativePath.toLowerCase() === relativePath.toLowerCase())) {

                          foundTarget = true; }


                         else {
                          newGeoFilterArray.push(result.geoFilters[i]); } ; }; }  ; });





                  if (!foundTarget) {

                    return _(new Error((((("There is no geo filter that has relative path " + relativePath) + " under endpoint ") + endpointName) + "!"))); } ;


                  endpointUpdateParameters = { };
                  endpointUpdateParameters.geoFilters = newGeoFilterArray; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__31() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__31() {


                              return client.endpoints.update(resourceGroup, profileName, endpointName, endpointUpdateParameters, __cb(_, __frame, 64, 40, function ___(__0, __6) { callbackArgs = __6;
                                result = callbackArgs[0];
                                response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__31() { if (e) {

                                return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__31() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__31() {

                          progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__31() {


                      cli.interaction.formatOutput(function() {
                        log.info(($("One geo filter deleted for ") + endpointName)); }); _(); }); }); }); }); }, true)); }, true)); }, true)); }, true)); }); });




  var edgeNodes = cdn.category("edgeNode").description($("Commands to get edge nodes of Azure CDN service"));



  edgeNodes.command("list").description($("Get the edge node list of Azure CDN service")).usage("[options]").option("--subscription <subscription>", $("the subscription identifier")).execute(function __32(options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__32", line: 1981 }; return __func(_, this, arguments, __32, 1, __frame, function __$__32() {









      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($(("Listing edge nodes for subscription: " + subscription))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__32() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__32() {


                  return client.edgeNodes.list(__cb(_, __frame, 14, 40, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__32() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__32() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__32() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__32() {


          if ((response.statusCode != 200)) {
            log.info("Command invoke failed, please retry"); }
           else {
            cli.interaction.formatOutput(result, function() {
              if ((!result || (result.value.length === null))) {
                log.info($("No edgeNodes found.")); }
               else {
                log.info($(("EdgeNodes:   \r\n" + util.inspect(result.value, { depth: null })))); } ; }); } ; _(); }); }); }); });






  var usage = cdn.category("usage").description($("Commands to get the usage of subscription"));


  usage.command("list").description($("List the usages of resources under subscription")).usage("[options]").option("--subscription <subscription>", $("the subscription identifier")).execute(function __33(options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__33", line: 2025 }; return __func(_, this, arguments, __33, 1, __frame, function __$__33() {









      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);
      progress = cli.interaction.progress(util.format($(("Listing usages for subscription: " + subscription))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__33() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__33() {


                  return client.listResourceUsage(__cb(_, __frame, 13, 30, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__33() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__33() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__33() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__33() {


          if ((response.statusCode != 200)) {
            log.info("Command invoke failed, please retry"); }
           else {
            cli.interaction.formatOutput(result, function() {
              if ((!result || (result.length === 0))) {
                log.info($("No usage record was found.")); }
               else {
                log.table(result, function(row, usage) {
                  row.cell($("ResourceType"), usage.resourceType);
                  row.cell($("Unit"), usage.unit);
                  row.cell($("CurrentValue"), usage.currentValue);
                  row.cell($("Limit"), usage.limit); }); } ; }); } ; _(); }); }); }); });};
