/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; var fs = require("fs");































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































var jsonpatch = require("fast-json-patch");

var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;
function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);};


exports.init = function(cli) {








  var virtualMachinesConvertToManagedDisks = cli.category("vm").description($("Commands to manage your virtual machines.  "));

  virtualMachinesConvertToManagedDisks.command("convert-to-managed-disks [resource-group] [vm-name]").description($("Converts virtual machine disks from blob-based to managed disks. Virtual machine must be stop-deallocated before invoking this operation.")).usage("[options] <resource-group> <vm-name>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --vm-name <vm-name>", $("vm-name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __1(resourceGroup, vMName, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__1", line: 1053 }; return __func(_, this, arguments, __1, 3, __frame, function __$__1() { return (function __$__1(__then) {






        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__1() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__1(__then) {
          if (!vMName) {
            return cli.interaction.promptIfNotGiven($("vm-name : "), vMName, __cb(_, __frame, 7, 31, function ___(__0, __2) { vMName = __2; __then(); }, true)); } else { __then(); } ; })(function __$__1() {


          cli.output.verbose(("vMName = " + vMName));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachines.convertToManagedDisks(resourceGroup, vMName, __cb(_, __frame, 13, 57, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });




























































































































































































































































































































  var virtualMachinesCreateOrUpdate = cli.category("vm").description($("Commands to manage your virtual machines.  "));

  virtualMachinesCreateOrUpdate.command("create-or-update [resource-group] [vm-name] [parameters]").description($("The operation to create or update a virtual machine.")).usage("[options] <resource-group> <vm-name> <parameters>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --vm-name <vm-name>", $("vm-name")).option("-p, --parameters <parameters>", $("A string of parameters in JSON format")).option("--parameter-file <parameter-file>", $("The text file that contains input parameter object in JSON format")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __2(resourceGroup, vMName, parameters, options, _) { var parametersObj, fileContent, subscription, computeManagementClient, result; var __frame = { name: "__2", line: 1395 }; return __func(_, this, arguments, __2, 4, __frame, function __$__2() { return (function __$__2(__then) {








        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__2() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__2(__then) {
          if (!vMName) {
            return cli.interaction.promptIfNotGiven($("vm-name : "), vMName, __cb(_, __frame, 7, 31, function ___(__0, __2) { vMName = __2; __then(); }, true)); } else { __then(); } ; })(function __$__2() {


          cli.output.verbose(("vMName = " + vMName));
          cli.output.verbose(("parameters = " + parameters));
          parametersObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            parametersObj = JSON.parse(fileContent); }

           else {
            parametersObj = JSON.parse(parameters); } ;

          cli.output.verbose(("parametersObj = " + JSON.stringify(parametersObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachines.createOrUpdate(resourceGroup, vMName, parametersObj, __cb(_, __frame, 24, 57, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });


  var virtualMachinesCreateOrUpdatecreateOrUpdateParameters2 = virtualMachinesCreateOrUpdate.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  virtualMachinesCreateOrUpdatecreateOrUpdateParameters2.command("create").description($("Generate virtualMachinesCreateOrUpdate parameter string or files.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).execute(function __3(options, _) { var filePath; var __frame = { name: "__3", line: 1430 }; return __func(_, this, arguments, __3, 1, __frame, function __$__3() {




      return cli.output.verbose("{\"plan\":{\"name\":\"\",\"publisher\":\"\",\"product\":\"\",\"promotionCode\":\"\"},\"hardwareProfile\":{\"vmSize\":\"\"},\"storageProfile\":{\"imageReference\":{\"publisher\":\"\",\"offer\":\"\",\"sku\":\"\",\"version\":\"\",\"id\":\"\"},\"osDisk\":{\"osType\":null,\"encryptionSettings\":{\"diskEncryptionKey\":{\"secretUrl\":\"\",\"sourceVault\":{\"id\":\"\"}},\"keyEncryptionKey\":{\"keyUrl\":\"\",\"sourceVault\":{\"id\":\"\"}},\"enabled\":null},\"name\":\"\",\"vhd\":{\"uri\":\"\"},\"image\":{\"uri\":\"\"},\"caching\":null,\"createOption\":\"\",\"diskSizeGB\":null,\"managedDisk\":{\"storageAccountType\":null,\"id\":\"\"}},\"dataDisks\":[{\"lun\":\"\",\"name\":\"\",\"vhd\":{\"uri\":\"\"},\"image\":{\"uri\":\"\"},\"caching\":null,\"createOption\":\"\",\"diskSizeGB\":null,\"managedDisk\":{\"storageAccountType\":null,\"id\":\"\"}}]},\"osProfile\":{\"computerName\":\"\",\"adminUsername\":\"\",\"adminPassword\":\"\",\"customData\":\"\",\"windowsConfiguration\":{\"provisionVMAgent\":null,\"enableAutomaticUpdates\":null,\"timeZone\":\"\",\"additionalUnattendContent\":[{\"passName\":null,\"componentName\":null,\"settingName\":null,\"content\":\"\"}],\"winRM\":{\"listeners\":[{\"protocol\":null,\"certificateUrl\":\"\"}]}},\"linuxConfiguration\":{\"disablePasswordAuthentication\":null,\"ssh\":{\"publicKeys\":[{\"path\":\"\",\"keyData\":\"\"}]}},\"secrets\":[{\"sourceVault\":{\"id\":\"\"},\"vaultCertificates\":[{\"certificateUrl\":\"\",\"certificateStore\":\"\"}]}]},\"networkProfile\":{\"networkInterfaces\":[{\"primary\":null,\"id\":\"\"}]},\"diagnosticsProfile\":{\"bootDiagnostics\":{\"enabled\":null,\"storageUri\":\"\"}},\"availabilitySet\":{\"id\":\"\"},\"provisioningState\":\"\",\"instanceView\":{\"platformUpdateDomain\":null,\"platformFaultDomain\":null,\"rdpThumbPrint\":\"\",\"vmAgent\":{\"vmAgentVersion\":\"\",\"extensionHandlers\":[{\"type\":\"\",\"typeHandlerVersion\":\"\",\"status\":{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}}],\"statuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}]},\"maintenanceRedeployStatus\":{\"isCustomerInitiatedMaintenanceAllowed\":null,\"preMaintenanceWindowStartTime\":null,\"preMaintenanceWindowEndTime\":null,\"maintenanceWindowStartTime\":null,\"maintenanceWindowEndTime\":null,\"lastOperationResultCode\":null,\"lastOperationMessage\":\"\"},\"disks\":[{\"name\":\"\",\"encryptionSettings\":[{\"diskEncryptionKey\":{\"secretUrl\":\"\",\"sourceVault\":{\"id\":\"\"}},\"keyEncryptionKey\":{\"keyUrl\":\"\",\"sourceVault\":{\"id\":\"\"}},\"enabled\":null}],\"statuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}]}],\"extensions\":[{\"name\":\"\",\"type\":\"\",\"typeHandlerVersion\":\"\",\"substatuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}],\"statuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}]}],\"bootDiagnostics\":{\"consoleScreenshotBlobUri\":\"\",\"serialConsoleLogBlobUri\":\"\"},\"statuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}]},\"licenseType\":\"\",\"vmId\":\"\",\"resources\":[{\"forceUpdateTag\":\"\",\"publisher\":\"\",\"virtualMachineExtensionType\":\"\",\"typeHandlerVersion\":\"\",\"autoUpgradeMinorVersion\":null,\"settings\":{},\"protectedSettings\":{},\"provisioningState\":\"\",\"instanceView\":{\"name\":\"\",\"type\":\"\",\"typeHandlerVersion\":\"\",\"substatuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}],\"statuses\":[{\"code\":\"\",\"level\":null,\"displayStatus\":\"\",\"message\":\"\",\"time\":null}]},\"id\":null,\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}],\"identity\":{\"principalId\":\"\",\"tenantId\":\"\",\"type\":null},\"zones\":[\"\"],\"id\":null,\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}", __cb(_, __frame, 1, 15, function __$__3() {
        filePath = "virtualMachinesCreateOrUpdate_createOrUpdate.json";
        if (options.parameterFile) {
          filePath = options.parameterFile; } ;

        fs.writeFileSync(filePath, beautify("{\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"product\":\"\",\r\n\"promotionCode\":\"\"\r\n},\r\n\"hardwareProfile\":{\r\n\"vmSize\":\"\"\r\n},\r\n\"storageProfile\":{\r\n\"imageReference\":{\r\n\"publisher\":\"\",\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\",\r\n\"id\":\"\"\r\n},\r\n\"osDisk\":{\r\n\"osType\":null,\r\n\"encryptionSettings\":{\r\n\"diskEncryptionKey\":{\r\n\"secretUrl\":\"\",\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n}\r\n},\r\n\"keyEncryptionKey\":{\r\n\"keyUrl\":\"\",\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n}\r\n},\r\n\"enabled\":null\r\n},\r\n\"name\":\"\",\r\n\"vhd\":{\r\n\"uri\":\"\"\r\n},\r\n\"image\":{\r\n\"uri\":\"\"\r\n},\r\n\"caching\":null,\r\n\"createOption\":\"\",\r\n\"diskSizeGB\":null,\r\n\"managedDisk\":{\r\n\"storageAccountType\":null,\r\n\"id\":\"\"\r\n}\r\n},\r\n\"dataDisks\":[\r\n{\r\n\"lun\":\"\",\r\n\"name\":\"\",\r\n\"vhd\":{\r\n\"uri\":\"\"\r\n},\r\n\"image\":{\r\n\"uri\":\"\"\r\n},\r\n\"caching\":null,\r\n\"createOption\":\"\",\r\n\"diskSizeGB\":null,\r\n\"managedDisk\":{\r\n\"storageAccountType\":null,\r\n\"id\":\"\"\r\n}\r\n}\r\n]\r\n},\r\n\"osProfile\":{\r\n\"computerName\":\"\",\r\n\"adminUsername\":\"\",\r\n\"adminPassword\":\"\",\r\n\"customData\":\"\",\r\n\"windowsConfiguration\":{\r\n\"provisionVMAgent\":null,\r\n\"enableAutomaticUpdates\":null,\r\n\"timeZone\":\"\",\r\n\"additionalUnattendContent\":[\r\n{\r\n\"passName\":null,\r\n\"componentName\":null,\r\n\"settingName\":null,\r\n\"content\":\"\"\r\n}\r\n],\r\n\"winRM\":{\r\n\"listeners\":[\r\n{\r\n\"protocol\":null,\r\n\"certificateUrl\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"linuxConfiguration\":{\r\n\"disablePasswordAuthentication\":null,\r\n\"ssh\":{\r\n\"publicKeys\":[\r\n{\r\n\"path\":\"\",\r\n\"keyData\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"secrets\":[\r\n{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"vaultCertificates\":[\r\n{\r\n\"certificateUrl\":\"\",\r\n\"certificateStore\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"networkProfile\":{\r\n\"networkInterfaces\":[\r\n{\r\n\"primary\":null,\r\n\"id\":\"\"\r\n}\r\n]\r\n},\r\n\"diagnosticsProfile\":{\r\n\"bootDiagnostics\":{\r\n\"enabled\":null,\r\n\"storageUri\":\"\"\r\n}\r\n},\r\n\"availabilitySet\":{\r\n\"id\":\"\"\r\n},\r\n\"provisioningState\":\"\",\r\n\"instanceView\":{\r\n\"platformUpdateDomain\":null,\r\n\"platformFaultDomain\":null,\r\n\"rdpThumbPrint\":\"\",\r\n\"vmAgent\":{\r\n\"vmAgentVersion\":\"\",\r\n\"extensionHandlers\":[\r\n{\r\n\"type\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"status\":{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n}\r\n],\r\n\"statuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n]\r\n},\r\n\"maintenanceRedeployStatus\":{\r\n\"isCustomerInitiatedMaintenanceAllowed\":null,\r\n\"preMaintenanceWindowStartTime\":null,\r\n\"preMaintenanceWindowEndTime\":null,\r\n\"maintenanceWindowStartTime\":null,\r\n\"maintenanceWindowEndTime\":null,\r\n\"lastOperationResultCode\":null,\r\n\"lastOperationMessage\":\"\"\r\n},\r\n\"disks\":[\r\n{\r\n\"name\":\"\",\r\n\"encryptionSettings\":[\r\n{\r\n\"diskEncryptionKey\":{\r\n\"secretUrl\":\"\",\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n}\r\n},\r\n\"keyEncryptionKey\":{\r\n\"keyUrl\":\"\",\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n}\r\n},\r\n\"enabled\":null\r\n}\r\n],\r\n\"statuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n]\r\n}\r\n],\r\n\"extensions\":[\r\n{\r\n\"name\":\"\",\r\n\"type\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"substatuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n],\r\n\"statuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n]\r\n}\r\n],\r\n\"bootDiagnostics\":{\r\n\"consoleScreenshotBlobUri\":\"\",\r\n\"serialConsoleLogBlobUri\":\"\"\r\n},\r\n\"statuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n]\r\n},\r\n\"licenseType\":\"\",\r\n\"vmId\":\"\",\r\n\"resources\":[\r\n{\r\n\"forceUpdateTag\":\"\",\r\n\"publisher\":\"\",\r\n\"virtualMachineExtensionType\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"autoUpgradeMinorVersion\":null,\r\n\"settings\":{\r\n},\r\n\"protectedSettings\":{\r\n},\r\n\"provisioningState\":\"\",\r\n\"instanceView\":{\r\n\"name\":\"\",\r\n\"type\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"substatuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n],\r\n\"statuses\":[\r\n{\r\n\"code\":\"\",\r\n\"level\":null,\r\n\"displayStatus\":\"\",\r\n\"message\":\"\",\r\n\"time\":null\r\n}\r\n]\r\n},\r\n\"id\":null,\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}\r\n],\r\n\"identity\":{\r\n\"principalId\":\"\",\r\n\"tenantId\":\"\",\r\n\"type\":null\r\n},\r\n\"zones\":[\r\n\"\"\r\n],\r\n\"id\":null,\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}"));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file output to: " + filePath));
        cli.output.verbose("====================================="); _(); }, true)); }); });


  virtualMachinesCreateOrUpdatecreateOrUpdateParameters2.command("patch").description($("Command to patch virtualMachinesCreateOrUpdate parameter JSON file.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--operation <operation>", $("The JSON patch operation: add, remove, or replace.")).option("--path <path>", $("The JSON data path, e.g.: \"foo/1\".")).option("--value <value>", $("The JSON value.")).option("--parse", $("Parse the JSON value to object.")).execute(function __4(options, _) { var fileContent, parametersObj, updatedContent; var __frame = { name: "__4", line: 1450 }; return __func(_, this, arguments, __4, 1, __frame, function __$__4() {








      return cli.output.verbose(options.parameterFile, __cb(_, __frame, 1, 15, function __$__4() {
        cli.output.verbose(options.operation);
        cli.output.verbose(options.path);
        cli.output.verbose(options.value);
        cli.output.verbose(options.parse);
        if (options.parse) {
          options.value = JSON.parse(options.value); } ;

        cli.output.verbose(options.value);
        cli.output.verbose("=====================================");
        cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
        cli.output.verbose("=====================================");
        fileContent = fs.readFileSync(options.parameterFile, "utf8");
        parametersObj = JSON.parse(fileContent);
        cli.output.verbose("JSON object:");
        cli.output.verbose(JSON.stringify(parametersObj));
        if ((options.operation == "add")) {
          jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } else {

          if ((options.operation == "remove")) {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } else {

            if ((options.operation == "replace")) {
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ; } ; } ;

        updatedContent = JSON.stringify(parametersObj);
        cli.output.verbose("=====================================");
        cli.output.verbose("JSON object (updated):");
        cli.output.verbose(JSON.stringify(parametersObj));
        cli.output.verbose("=====================================");
        fs.writeFileSync(options.parameterFile, beautify(updatedContent));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
        cli.output.verbose("====================================="); _(); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesVirtualMachine01 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesVirtualMachine01 = catparametersCreateOrUpdateVirtualMachinesVirtualMachine01.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesVirtualMachine01 = parametersCreateOrUpdateVirtualMachinesVirtualMachine01.category("virtual-machine").description($("Commands to configure virtual-machine of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesVirtualMachine01.command("set").description($("Set virtual-machine in config string or files, e.g. \r\n{\r\n  \"plan\":{\r\n    \"name\":\"\",\r\n    \"publisher\":\"\",\r\n    \"product\":\"\",\r\n    \"promotionCode\":\"\"\r\n  },\r\n  \"hardwareProfile\":{\r\n    \"vmSize\":\"\"\r\n  },\r\n  \"storageProfile\":{\r\n    \"imageReference\":{\r\n      \"publisher\":\"\",\r\n      \"offer\":\"\",\r\n      \"sku\":\"\",\r\n      \"version\":\"\",\r\n      \"id\":\"\"\r\n    },\r\n    \"osDisk\":{\r\n      \"osType\":null,\r\n      \"encryptionSettings\":{\r\n        \"diskEncryptionKey\":{\r\n          \"secretUrl\":\"\",\r\n          \"sourceVault\":{\r\n            \"id\":\"\"\r\n          }\r\n        },\r\n        \"keyEncryptionKey\":{\r\n          \"keyUrl\":\"\",\r\n          \"sourceVault\":{\r\n            \"id\":\"\"\r\n          }\r\n        },\r\n        \"enabled\":null\r\n      },\r\n      \"name\":\"\",\r\n      \"vhd\":{\r\n        \"uri\":\"\"\r\n      },\r\n      \"image\":{\r\n        \"uri\":\"\"\r\n      },\r\n      \"caching\":null,\r\n      \"createOption\":\"\",\r\n      \"diskSizeGB\":null,\r\n      \"managedDisk\":{\r\n        \"storageAccountType\":null,\r\n        \"id\":\"\"\r\n      }\r\n    },\r\n    \"dataDisks\":[\r\n      {\r\n        \"lun\":\"\",\r\n        \"name\":\"\",\r\n        \"vhd\":{\r\n          \"uri\":\"\"\r\n        },\r\n        \"image\":{\r\n          \"uri\":\"\"\r\n        },\r\n        \"caching\":null,\r\n        \"createOption\":\"\",\r\n        \"diskSizeGB\":null,\r\n        \"managedDisk\":{\r\n          \"storageAccountType\":null,\r\n          \"id\":\"\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"osProfile\":{\r\n    \"computerName\":\"\",\r\n    \"adminUsername\":\"\",\r\n    \"adminPassword\":\"\",\r\n    \"customData\":\"\",\r\n    \"windowsConfiguration\":{\r\n      \"provisionVMAgent\":null,\r\n      \"enableAutomaticUpdates\":null,\r\n      \"timeZone\":\"\",\r\n      \"additionalUnattendContent\":[\r\n        {\r\n          \"passName\":null,\r\n          \"componentName\":null,\r\n          \"settingName\":null,\r\n          \"content\":\"\"\r\n        }\r\n      ],\r\n      \"winRM\":{\r\n        \"listeners\":[\r\n          {\r\n            \"protocol\":null,\r\n            \"certificateUrl\":\"\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"linuxConfiguration\":{\r\n      \"disablePasswordAuthentication\":null,\r\n      \"ssh\":{\r\n        \"publicKeys\":[\r\n          {\r\n            \"path\":\"\",\r\n            \"keyData\":\"\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"secrets\":[\r\n      {\r\n        \"sourceVault\":{\r\n          \"id\":\"\"\r\n        },\r\n        \"vaultCertificates\":[\r\n          {\r\n            \"certificateUrl\":\"\",\r\n            \"certificateStore\":\"\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"networkProfile\":{\r\n    \"networkInterfaces\":[\r\n      {\r\n        \"primary\":null,\r\n        \"id\":\"\"\r\n      }\r\n    ]\r\n  },\r\n  \"diagnosticsProfile\":{\r\n    \"bootDiagnostics\":{\r\n      \"enabled\":null,\r\n      \"storageUri\":\"\"\r\n    }\r\n  },\r\n  \"availabilitySet\":{\r\n    \"id\":\"\"\r\n  },\r\n  \"provisioningState\":\"\",\r\n  \"instanceView\":{\r\n    \"platformUpdateDomain\":null,\r\n    \"platformFaultDomain\":null,\r\n    \"rdpThumbPrint\":\"\",\r\n    \"vmAgent\":{\r\n      \"vmAgentVersion\":\"\",\r\n      \"extensionHandlers\":[\r\n        {\r\n          \"type\":\"\",\r\n          \"typeHandlerVersion\":\"\",\r\n          \"status\":{\r\n            \"code\":\"\",\r\n            \"level\":null,\r\n            \"displayStatus\":\"\",\r\n            \"message\":\"\",\r\n            \"time\":null\r\n          }\r\n        }\r\n      ],\r\n      \"statuses\":[\r\n        {\r\n          \"code\":\"\",\r\n          \"level\":null,\r\n          \"displayStatus\":\"\",\r\n          \"message\":\"\",\r\n          \"time\":null\r\n        }\r\n      ]\r\n    },\r\n    \"maintenanceRedeployStatus\":{\r\n      \"isCustomerInitiatedMaintenanceAllowed\":null,\r\n      \"preMaintenanceWindowStartTime\":null,\r\n      \"preMaintenanceWindowEndTime\":null,\r\n      \"maintenanceWindowStartTime\":null,\r\n      \"maintenanceWindowEndTime\":null,\r\n      \"lastOperationResultCode\":null,\r\n      \"lastOperationMessage\":\"\"\r\n    },\r\n    \"disks\":[\r\n      {\r\n        \"name\":\"\",\r\n        \"encryptionSettings\":[\r\n          {\r\n            \"diskEncryptionKey\":{\r\n              \"secretUrl\":\"\",\r\n              \"sourceVault\":{\r\n                \"id\":\"\"\r\n              }\r\n            },\r\n            \"keyEncryptionKey\":{\r\n              \"keyUrl\":\"\",\r\n              \"sourceVault\":{\r\n                \"id\":\"\"\r\n              }\r\n            },\r\n            \"enabled\":null\r\n          }\r\n        ],\r\n        \"statuses\":[\r\n          {\r\n            \"code\":\"\",\r\n            \"level\":null,\r\n            \"displayStatus\":\"\",\r\n            \"message\":\"\",\r\n            \"time\":null\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"extensions\":[\r\n      {\r\n        \"name\":\"\",\r\n        \"type\":\"\",\r\n        \"typeHandlerVersion\":\"\",\r\n        \"substatuses\":[\r\n          {\r\n            \"code\":\"\",\r\n            \"level\":null,\r\n            \"displayStatus\":\"\",\r\n            \"message\":\"\",\r\n            \"time\":null\r\n          }\r\n        ],\r\n        \"statuses\":[\r\n          {\r\n            \"code\":\"\",\r\n            \"level\":null,\r\n            \"displayStatus\":\"\",\r\n            \"message\":\"\",\r\n            \"time\":null\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"bootDiagnostics\":{\r\n      \"consoleScreenshotBlobUri\":\"\",\r\n      \"serialConsoleLogBlobUri\":\"\"\r\n    },\r\n    \"statuses\":[\r\n      {\r\n        \"code\":\"\",\r\n        \"level\":null,\r\n        \"displayStatus\":\"\",\r\n        \"message\":\"\",\r\n        \"time\":null\r\n      }\r\n    ]\r\n  },\r\n  \"licenseType\":\"\",\r\n  \"vmId\":\"\",\r\n  \"resources\":[\r\n    {\r\n      \"forceUpdateTag\":\"\",\r\n      \"publisher\":\"\",\r\n      \"virtualMachineExtensionType\":\"\",\r\n      \"typeHandlerVersion\":\"\",\r\n      \"autoUpgradeMinorVersion\":null,\r\n      \"settings\":{\r\n      },\r\n      \"protectedSettings\":{\r\n      },\r\n      \"provisioningState\":\"\",\r\n      \"instanceView\":{\r\n        \"name\":\"\",\r\n        \"type\":\"\",\r\n        \"typeHandlerVersion\":\"\",\r\n        \"substatuses\":[\r\n          {\r\n            \"code\":\"\",\r\n            \"level\":null,\r\n            \"displayStatus\":\"\",\r\n            \"message\":\"\",\r\n            \"time\":null\r\n          }\r\n        ],\r\n        \"statuses\":[\r\n          {\r\n            \"code\":\"\",\r\n            \"level\":null,\r\n            \"displayStatus\":\"\",\r\n            \"message\":\"\",\r\n            \"time\":null\r\n          }\r\n        ]\r\n      },\r\n      \"id\":null,\r\n      \"name\":null,\r\n      \"type\":null,\r\n      \"location\":\"\",\r\n      \"tags\":{\r\n      }\r\n    }\r\n  ],\r\n  \"identity\":{\r\n    \"principalId\":\"\",\r\n    \"tenantId\":\"\",\r\n    \"type\":null\r\n  },\r\n  \"zones\":[\r\n    \"\"\r\n  ],\r\n  \"id\":null,\r\n  \"name\":null,\r\n  \"type\":null,\r\n  \"location\":\"\",\r\n  \"tags\":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--plan <plan>", $("Set the plan value.")).option("--hardware-profile <hardwareProfile>", $("Set the hardware-profile value.")).option("--storage-profile <storageProfile>", $("Set the storage-profile value.")).option("--os-profile <osProfile>", $("Set the os-profile value.")).option("--network-profile <networkProfile>", $("Set the network-profile value.")).option("--diagnostics-profile <diagnosticsProfile>", $("Set the diagnostics-profile value.")).option("--availability-set <availabilitySet>", $("Set the availability-set value.")).option("--provisioning-state <provisioningState>", $("Set the provisioning-state value.")).option("--instance-view <instanceView>", $("Set the instance-view value.")).option("--license-type <licenseType>", $("Set the license-type value.")).option("--vm-id <vmId>", $("Set the vm-id value.")).option("--resources <resources>", $("Set the resources value.")).option("--identity <identity>", $("Set the identity value.")).option("--zones <zones>", $("Set the zones value.")).option("--id <id>", $("Set the id value.")).option("--name <name>", $("Set the name value.")).option("--type <type>", $("Set the type value.")).option("--location <location>", $("Set the location value.")).option("--tags <tags>", $("Set the tags value.")).execute(function __5(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__5", line: 1517 }; return __func(_, this, arguments, __5, 1, __frame, function __$__5() {
























      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__5() { return (function __$__5(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__5() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "plan");
          if (options.plan) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.plan));
            cli.output.verbose("================================================");
            if ((options.parse && options.plan)) {
              options.plan = JSON.parse(options.plan); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.plan },]); } ;

          paramPath = ((options.path + "/") + "hardwareProfile");
          if (options.hardwareProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.hardwareProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.hardwareProfile)) {
              options.hardwareProfile = JSON.parse(options.hardwareProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.hardwareProfile },]); } ;

          paramPath = ((options.path + "/") + "storageProfile");
          if (options.storageProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageProfile)) {
              options.storageProfile = JSON.parse(options.storageProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageProfile },]); } ;

          paramPath = ((options.path + "/") + "osProfile");
          if (options.osProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.osProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.osProfile)) {
              options.osProfile = JSON.parse(options.osProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.osProfile },]); } ;

          paramPath = ((options.path + "/") + "networkProfile");
          if (options.networkProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.networkProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.networkProfile)) {
              options.networkProfile = JSON.parse(options.networkProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.networkProfile },]); } ;

          paramPath = ((options.path + "/") + "diagnosticsProfile");
          if (options.diagnosticsProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diagnosticsProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.diagnosticsProfile)) {
              options.diagnosticsProfile = JSON.parse(options.diagnosticsProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diagnosticsProfile },]); } ;

          paramPath = ((options.path + "/") + "availabilitySet");
          if (options.availabilitySet) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.availabilitySet));
            cli.output.verbose("================================================");
            if ((options.parse && options.availabilitySet)) {
              options.availabilitySet = JSON.parse(options.availabilitySet); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.availabilitySet },]); } ;

          paramPath = ((options.path + "/") + "provisioningState");
          if (options.provisioningState) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.provisioningState));
            cli.output.verbose("================================================");
            if ((options.parse && options.provisioningState)) {
              options.provisioningState = JSON.parse(options.provisioningState); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.provisioningState },]); } ;

          paramPath = ((options.path + "/") + "instanceView");
          if (options.instanceView) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.instanceView));
            cli.output.verbose("================================================");
            if ((options.parse && options.instanceView)) {
              options.instanceView = JSON.parse(options.instanceView); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.instanceView },]); } ;

          paramPath = ((options.path + "/") + "licenseType");
          if (options.licenseType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.licenseType));
            cli.output.verbose("================================================");
            if ((options.parse && options.licenseType)) {
              options.licenseType = JSON.parse(options.licenseType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.licenseType },]); } ;

          paramPath = ((options.path + "/") + "vmId");
          if (options.vmId) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.vmId));
            cli.output.verbose("================================================");
            if ((options.parse && options.vmId)) {
              options.vmId = JSON.parse(options.vmId); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.vmId },]); } ;

          paramPath = ((options.path + "/") + "resources");
          if (options.resources) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.resources));
            cli.output.verbose("================================================");
            if ((options.parse && options.resources)) {
              options.resources = JSON.parse(options.resources); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.resources },]); } ;

          paramPath = ((options.path + "/") + "identity");
          if (options.identity) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.identity));
            cli.output.verbose("================================================");
            if ((options.parse && options.identity)) {
              options.identity = JSON.parse(options.identity); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.identity },]); } ;

          paramPath = ((options.path + "/") + "zones");
          if (options.zones) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.zones));
            cli.output.verbose("================================================");
            if ((options.parse && options.zones)) {
              options.zones = JSON.parse(options.zones); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.zones },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "type");
          if (options.type) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.type));
            cli.output.verbose("================================================");
            if ((options.parse && options.type)) {
              options.type = JSON.parse(options.type); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.type },]); } ;

          paramPath = ((options.path + "/") + "location");
          if (options.location) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.location));
            cli.output.verbose("================================================");
            if ((options.parse && options.location)) {
              options.location = JSON.parse(options.location); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.location },]); } ;

          paramPath = ((options.path + "/") + "tags");
          if (options.tags) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tags));
            cli.output.verbose("================================================");
            if ((options.parse && options.tags)) {
              options.tags = JSON.parse(options.tags); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tags },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesVirtualMachine11 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesVirtualMachine11 = catparametersCreateOrUpdateVirtualMachinesVirtualMachine11.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesVirtualMachine11 = parametersCreateOrUpdateVirtualMachinesVirtualMachine11.category("virtual-machine").description($("Commands to configure virtual-machine of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesVirtualMachine11.command("delete").description($("Remove virtual-machine in config string or files, e.g. \r\n{\r\n  \"plan\":{\r\n    \"name\":\"\",\r\n    \"publisher\":\"\",\r\n    \"product\":\"\",\r\n    \"promotionCode\":\"\"\r\n  },\r\n  \"hardwareProfile\":{\r\n    \"vmSize\":\"\"\r\n  },\r\n  \"storageProfile\":{\r\n    \"imageReference\":{\r\n      \"publisher\":\"\",\r\n      \"offer\":\"\",\r\n      \"sku\":\"\",\r\n      \"version\":\"\",\r\n      \"id\":\"\"\r\n    },\r\n    \"osDisk\":{\r\n      \"osType\":null,\r\n      \"encryptionSettings\":{\r\n        \"diskEncryptionKey\":{\r\n          \"secretUrl\":\"\",\r\n          \"sourceVault\":{\r\n            \"id\":\"\"\r\n          }\r\n        },\r\n        \"keyEncryptionKey\":{\r\n          \"keyUrl\":\"\",\r\n          \"sourceVault\":{\r\n            \"id\":\"\"\r\n          }\r\n        },\r\n        \"enabled\":null\r\n      },\r\n      \"name\":\"\",\r\n      \"vhd\":{\r\n        \"uri\":\"\"\r\n      },\r\n      \"image\":{\r\n        \"uri\":\"\"\r\n      },\r\n      \"caching\":null,\r\n      \"createOption\":\"\",\r\n      \"diskSizeGB\":null,\r\n      \"managedDisk\":{\r\n        \"storageAccountType\":null,\r\n        \"id\":\"\"\r\n      }\r\n    },\r\n    \"dataDisks\":[\r\n      {\r\n        \"lun\":\"\",\r\n        \"name\":\"\",\r\n        \"vhd\":{\r\n          \"uri\":\"\"\r\n        },\r\n        \"image\":{\r\n          \"uri\":\"\"\r\n        },\r\n        \"caching\":null,\r\n        \"createOption\":\"\",\r\n        \"diskSizeGB\":null,\r\n        \"managedDisk\":{\r\n          \"storageAccountType\":null,\r\n          \"id\":\"\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"osProfile\":{\r\n    \"computerName\":\"\",\r\n    \"adminUsername\":\"\",\r\n    \"adminPassword\":\"\",\r\n    \"customData\":\"\",\r\n    \"windowsConfiguration\":{\r\n      \"provisionVMAgent\":null,\r\n      \"enableAutomaticUpdates\":null,\r\n      \"timeZone\":\"\",\r\n      \"additionalUnattendContent\":[\r\n        {\r\n          \"passName\":null,\r\n          \"componentName\":null,\r\n          \"settingName\":null,\r\n          \"content\":\"\"\r\n        }\r\n      ],\r\n      \"winRM\":{\r\n        \"listeners\":[\r\n          {\r\n            \"protocol\":null,\r\n            \"certificateUrl\":\"\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"linuxConfiguration\":{\r\n      \"disablePasswordAuthentication\":null,\r\n      \"ssh\":{\r\n        \"publicKeys\":[\r\n          {\r\n            \"path\":\"\",\r\n            \"keyData\":\"\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"secrets\":[\r\n      {\r\n        \"sourceVault\":{\r\n          \"id\":\"\"\r\n        },\r\n        \"vaultCertificates\":[\r\n          {\r\n            \"certificateUrl\":\"\",\r\n            \"certificateStore\":\"\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"networkProfile\":{\r\n    \"networkInterfaces\":[\r\n      {\r\n        \"primary\":null,\r\n        \"id\":\"\"\r\n      }\r\n    ]\r\n  },\r\n  \"diagnosticsProfile\":{\r\n    \"bootDiagnostics\":{\r\n      \"enabled\":null,\r\n      \"storageUri\":\"\"\r\n    }\r\n  },\r\n  \"availabilitySet\":{\r\n    \"id\":\"\"\r\n  },\r\n  \"provisioningState\":\"\",\r\n  \"instanceView\":{\r\n    \"platformUpdateDomain\":null,\r\n    \"platformFaultDomain\":null,\r\n    \"rdpThumbPrint\":\"\",\r\n    \"vmAgent\":{\r\n      \"vmAgentVersion\":\"\",\r\n      \"extensionHandlers\":[\r\n        {\r\n          \"type\":\"\",\r\n          \"typeHandlerVersion\":\"\",\r\n          \"status\":{\r\n            \"code\":\"\",\r\n            \"level\":null,\r\n            \"displayStatus\":\"\",\r\n            \"message\":\"\",\r\n            \"time\":null\r\n          }\r\n        }\r\n      ],\r\n      \"statuses\":[\r\n        {\r\n          \"code\":\"\",\r\n          \"level\":null,\r\n          \"displayStatus\":\"\",\r\n          \"message\":\"\",\r\n          \"time\":null\r\n        }\r\n      ]\r\n    },\r\n    \"maintenanceRedeployStatus\":{\r\n      \"isCustomerInitiatedMaintenanceAllowed\":null,\r\n      \"preMaintenanceWindowStartTime\":null,\r\n      \"preMaintenanceWindowEndTime\":null,\r\n      \"maintenanceWindowStartTime\":null,\r\n      \"maintenanceWindowEndTime\":null,\r\n      \"lastOperationResultCode\":null,\r\n      \"lastOperationMessage\":\"\"\r\n    },\r\n    \"disks\":[\r\n      {\r\n        \"name\":\"\",\r\n        \"encryptionSettings\":[\r\n          {\r\n            \"diskEncryptionKey\":{\r\n              \"secretUrl\":\"\",\r\n              \"sourceVault\":{\r\n                \"id\":\"\"\r\n              }\r\n            },\r\n            \"keyEncryptionKey\":{\r\n              \"keyUrl\":\"\",\r\n              \"sourceVault\":{\r\n                \"id\":\"\"\r\n              }\r\n            },\r\n            \"enabled\":null\r\n          }\r\n        ],\r\n        \"statuses\":[\r\n          {\r\n            \"code\":\"\",\r\n            \"level\":null,\r\n            \"displayStatus\":\"\",\r\n            \"message\":\"\",\r\n            \"time\":null\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"extensions\":[\r\n      {\r\n        \"name\":\"\",\r\n        \"type\":\"\",\r\n        \"typeHandlerVersion\":\"\",\r\n        \"substatuses\":[\r\n          {\r\n            \"code\":\"\",\r\n            \"level\":null,\r\n            \"displayStatus\":\"\",\r\n            \"message\":\"\",\r\n            \"time\":null\r\n          }\r\n        ],\r\n        \"statuses\":[\r\n          {\r\n            \"code\":\"\",\r\n            \"level\":null,\r\n            \"displayStatus\":\"\",\r\n            \"message\":\"\",\r\n            \"time\":null\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"bootDiagnostics\":{\r\n      \"consoleScreenshotBlobUri\":\"\",\r\n      \"serialConsoleLogBlobUri\":\"\"\r\n    },\r\n    \"statuses\":[\r\n      {\r\n        \"code\":\"\",\r\n        \"level\":null,\r\n        \"displayStatus\":\"\",\r\n        \"message\":\"\",\r\n        \"time\":null\r\n      }\r\n    ]\r\n  },\r\n  \"licenseType\":\"\",\r\n  \"vmId\":\"\",\r\n  \"resources\":[\r\n    {\r\n      \"forceUpdateTag\":\"\",\r\n      \"publisher\":\"\",\r\n      \"virtualMachineExtensionType\":\"\",\r\n      \"typeHandlerVersion\":\"\",\r\n      \"autoUpgradeMinorVersion\":null,\r\n      \"settings\":{\r\n      },\r\n      \"protectedSettings\":{\r\n      },\r\n      \"provisioningState\":\"\",\r\n      \"instanceView\":{\r\n        \"name\":\"\",\r\n        \"type\":\"\",\r\n        \"typeHandlerVersion\":\"\",\r\n        \"substatuses\":[\r\n          {\r\n            \"code\":\"\",\r\n            \"level\":null,\r\n            \"displayStatus\":\"\",\r\n            \"message\":\"\",\r\n            \"time\":null\r\n          }\r\n        ],\r\n        \"statuses\":[\r\n          {\r\n            \"code\":\"\",\r\n            \"level\":null,\r\n            \"displayStatus\":\"\",\r\n            \"message\":\"\",\r\n            \"time\":null\r\n          }\r\n        ]\r\n      },\r\n      \"id\":null,\r\n      \"name\":null,\r\n      \"type\":null,\r\n      \"location\":\"\",\r\n      \"tags\":{\r\n      }\r\n    }\r\n  ],\r\n  \"identity\":{\r\n    \"principalId\":\"\",\r\n    \"tenantId\":\"\",\r\n    \"type\":null\r\n  },\r\n  \"zones\":[\r\n    \"\"\r\n  ],\r\n  \"id\":null,\r\n  \"name\":null,\r\n  \"type\":null,\r\n  \"location\":\"\",\r\n  \"tags\":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--plan", $("Remove the plan value.")).option("--hardware-profile", $("Remove the hardware-profile value.")).option("--storage-profile", $("Remove the storage-profile value.")).option("--os-profile", $("Remove the os-profile value.")).option("--network-profile", $("Remove the network-profile value.")).option("--diagnostics-profile", $("Remove the diagnostics-profile value.")).option("--availability-set", $("Remove the availability-set value.")).option("--provisioning-state", $("Remove the provisioning-state value.")).option("--instance-view", $("Remove the instance-view value.")).option("--license-type", $("Remove the license-type value.")).option("--vm-id", $("Remove the vm-id value.")).option("--resources", $("Remove the resources value.")).option("--identity", $("Remove the identity value.")).option("--zones", $("Remove the zones value.")).option("--id", $("Remove the id value.")).option("--name", $("Remove the name value.")).option("--type", $("Remove the type value.")).option("--location", $("Remove the location value.")).option("--tags", $("Remove the tags value.")).execute(function __6(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__6", line: 1785 }; return __func(_, this, arguments, __6, 1, __frame, function __$__6() {























      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__6() { return (function __$__6(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__6() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "";
          anySubItem = (((((((((((((((((((false || options.plan) || options.hardwareProfile) || options.storageProfile) || options.osProfile) || options.networkProfile) || options.diagnosticsProfile) || options.availabilitySet) || options.provisioningState) || options.instanceView) || options.licenseType) || options.vmId) || options.resources) || options.identity) || options.zones) || options.id) || options.name) || options.type) || options.location) || options.tags);
          if (anySubItem) {
            subItemPath = null;
            if (options.plan) {
              subItemPath = (options.path + "/plan");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.hardwareProfile) {
              subItemPath = (options.path + "/hardwareProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.storageProfile) {
              subItemPath = (options.path + "/storageProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.osProfile) {
              subItemPath = (options.path + "/osProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.networkProfile) {
              subItemPath = (options.path + "/networkProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.diagnosticsProfile) {
              subItemPath = (options.path + "/diagnosticsProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.availabilitySet) {
              subItemPath = (options.path + "/availabilitySet");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.provisioningState) {
              subItemPath = (options.path + "/provisioningState");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.instanceView) {
              subItemPath = (options.path + "/instanceView");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.licenseType) {
              subItemPath = (options.path + "/licenseType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.vmId) {
              subItemPath = (options.path + "/vmId");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.resources) {
              subItemPath = (options.path + "/resources");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.identity) {
              subItemPath = (options.path + "/identity");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.zones) {
              subItemPath = (options.path + "/zones");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.type) {
              subItemPath = (options.path + "/type");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.location) {
              subItemPath = (options.path + "/location");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tags) {
              subItemPath = (options.path + "/tags");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesPlan0P1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesPlan0P1 = catparametersCreateOrUpdateVirtualMachinesPlan0P1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesPlan0P1 = parametersCreateOrUpdateVirtualMachinesPlan0P1.category("plan").description($("Commands to configure plan of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesPlan0P1.command("set").description($("Set plan in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"plan\" : {\r\n             \"name\":\"\",\r\n             \"publisher\":\"\",\r\n             \"product\":\"\",\r\n             \"promotionCode\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--publisher <publisher>", $("Set the publisher value.")).option("--product <product>", $("Set the product value.")).option("--promotion-code <promotionCode>", $("Set the promotion-code value.")).execute(function __7(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__7", line: 1909 }; return __func(_, this, arguments, __7, 1, __frame, function __$__7() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__7() { return (function __$__7(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__7() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/plan";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "publisher");
          if (options.publisher) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publisher));
            cli.output.verbose("================================================");
            if ((options.parse && options.publisher)) {
              options.publisher = JSON.parse(options.publisher); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publisher },]); } ;

          paramPath = ((options.path + "/") + "product");
          if (options.product) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.product));
            cli.output.verbose("================================================");
            if ((options.parse && options.product)) {
              options.product = JSON.parse(options.product); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.product },]); } ;

          paramPath = ((options.path + "/") + "promotionCode");
          if (options.promotionCode) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.promotionCode));
            cli.output.verbose("================================================");
            if ((options.parse && options.promotionCode)) {
              options.promotionCode = JSON.parse(options.promotionCode); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.promotionCode },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesPlan1P1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesPlan1P1 = catparametersCreateOrUpdateVirtualMachinesPlan1P1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesPlan1P1 = parametersCreateOrUpdateVirtualMachinesPlan1P1.category("plan").description($("Commands to configure plan of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesPlan1P1.command("delete").description($("Remove plan in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"plan\" : {\r\n             \"name\":\"\",\r\n             \"publisher\":\"\",\r\n             \"product\":\"\",\r\n             \"promotionCode\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--name", $("Remove the name value.")).option("--publisher", $("Remove the publisher value.")).option("--product", $("Remove the product value.")).option("--promotion-code", $("Remove the promotion-code value.")).execute(function __8(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__8", line: 1997 }; return __func(_, this, arguments, __8, 1, __frame, function __$__8() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__8() { return (function __$__8(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__8() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/plan";
          anySubItem = ((((false || options.name) || options.publisher) || options.product) || options.promotionCode);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.publisher) {
              subItemPath = (options.path + "/publisher");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.product) {
              subItemPath = (options.path + "/product");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.promotionCode) {
              subItemPath = (options.path + "/promotionCode");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesHardwareProfile0HP1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesHardwareProfile0HP1 = catparametersCreateOrUpdateVirtualMachinesHardwareProfile0HP1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesHardwareProfile0HP1 = parametersCreateOrUpdateVirtualMachinesHardwareProfile0HP1.category("hardware-profile").description($("Commands to configure hardware-profile of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesHardwareProfile0HP1.command("set").description($("Set hardware-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"hardwareProfile\" : {\r\n             \"vmSize\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--vm-size <vmSize>", $("Set the vm-size value.")).execute(function __9(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__9", line: 2058 }; return __func(_, this, arguments, __9, 1, __frame, function __$__9() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__9() { return (function __$__9(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__9() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/hardwareProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "vmSize");
          if (options.vmSize) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.vmSize));
            cli.output.verbose("================================================");
            if ((options.parse && options.vmSize)) {
              options.vmSize = JSON.parse(options.vmSize); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.vmSize },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesHardwareProfile1HP1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesHardwareProfile1HP1 = catparametersCreateOrUpdateVirtualMachinesHardwareProfile1HP1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesHardwareProfile1HP1 = parametersCreateOrUpdateVirtualMachinesHardwareProfile1HP1.category("hardware-profile").description($("Commands to configure hardware-profile of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesHardwareProfile1HP1.command("delete").description($("Remove hardware-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"hardwareProfile\" : {\r\n             \"vmSize\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--vm-size", $("Remove the vm-size value.")).execute(function __10(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__10", line: 2110 }; return __func(_, this, arguments, __10, 1, __frame, function __$__10() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__10() { return (function __$__10(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__10() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/hardwareProfile";
          anySubItem = (false || options.vmSize);
          if (anySubItem) {
            subItemPath = null;
            if (options.vmSize) {
              subItemPath = (options.path + "/vmSize");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesStorageProfile0SP1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStorageProfile0SP1 = catparametersCreateOrUpdateVirtualMachinesStorageProfile0SP1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesStorageProfile0SP1 = parametersCreateOrUpdateVirtualMachinesStorageProfile0SP1.category("storage-profile").description($("Commands to configure storage-profile of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesStorageProfile0SP1.command("set").description($("Set storage-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"storageProfile\" : {\r\n             \"imageReference\":{\r\n               \"publisher\":\"\",\r\n               \"offer\":\"\",\r\n               \"sku\":\"\",\r\n               \"version\":\"\",\r\n               \"id\":\"\"\r\n             },\r\n             \"osDisk\":{\r\n               \"osType\":null,\r\n               \"encryptionSettings\":{\r\n                 \"diskEncryptionKey\":{\r\n                   \"secretUrl\":\"\",\r\n                   \"sourceVault\":{\r\n                     \"id\":\"\"\r\n                   }\r\n                 },\r\n                 \"keyEncryptionKey\":{\r\n                   \"keyUrl\":\"\",\r\n                   \"sourceVault\":{\r\n                     \"id\":\"\"\r\n                   }\r\n                 },\r\n                 \"enabled\":null\r\n               },\r\n               \"name\":\"\",\r\n               \"vhd\":{\r\n                 \"uri\":\"\"\r\n               },\r\n               \"image\":{\r\n                 \"uri\":\"\"\r\n               },\r\n               \"caching\":null,\r\n               \"createOption\":\"\",\r\n               \"diskSizeGB\":null,\r\n               \"managedDisk\":{\r\n                 \"storageAccountType\":null,\r\n                 \"id\":\"\"\r\n               }\r\n             },\r\n             \"dataDisks\":[\r\n               {\r\n                 \"lun\":\"\",\r\n                 \"name\":\"\",\r\n                 \"vhd\":{\r\n                   \"uri\":\"\"\r\n                 },\r\n                 \"image\":{\r\n                   \"uri\":\"\"\r\n                 },\r\n                 \"caching\":null,\r\n                 \"createOption\":\"\",\r\n                 \"diskSizeGB\":null,\r\n                 \"managedDisk\":{\r\n                   \"storageAccountType\":null,\r\n                   \"id\":\"\"\r\n                 }\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--image-reference <imageReference>", $("Set the image-reference value.")).option("--os-disk <osDisk>", $("Set the os-disk value.")).option("--data-disks <dataDisks>", $("Set the data-disks value.")).execute(function __11(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__11", line: 2161 }; return __func(_, this, arguments, __11, 1, __frame, function __$__11() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__11() { return (function __$__11(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__11() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/storageProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "imageReference");
          if (options.imageReference) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.imageReference));
            cli.output.verbose("================================================");
            if ((options.parse && options.imageReference)) {
              options.imageReference = JSON.parse(options.imageReference); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.imageReference },]); } ;

          paramPath = ((options.path + "/") + "osDisk");
          if (options.osDisk) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.osDisk));
            cli.output.verbose("================================================");
            if ((options.parse && options.osDisk)) {
              options.osDisk = JSON.parse(options.osDisk); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.osDisk },]); } ;

          paramPath = ((options.path + "/") + "dataDisks");
          if (options.dataDisks) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.dataDisks));
            cli.output.verbose("================================================");
            if ((options.parse && options.dataDisks)) {
              options.dataDisks = JSON.parse(options.dataDisks); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.dataDisks },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesStorageProfile1SP1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStorageProfile1SP1 = catparametersCreateOrUpdateVirtualMachinesStorageProfile1SP1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesStorageProfile1SP1 = parametersCreateOrUpdateVirtualMachinesStorageProfile1SP1.category("storage-profile").description($("Commands to configure storage-profile of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesStorageProfile1SP1.command("delete").description($("Remove storage-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"storageProfile\" : {\r\n             \"imageReference\":{\r\n               \"publisher\":\"\",\r\n               \"offer\":\"\",\r\n               \"sku\":\"\",\r\n               \"version\":\"\",\r\n               \"id\":\"\"\r\n             },\r\n             \"osDisk\":{\r\n               \"osType\":null,\r\n               \"encryptionSettings\":{\r\n                 \"diskEncryptionKey\":{\r\n                   \"secretUrl\":\"\",\r\n                   \"sourceVault\":{\r\n                     \"id\":\"\"\r\n                   }\r\n                 },\r\n                 \"keyEncryptionKey\":{\r\n                   \"keyUrl\":\"\",\r\n                   \"sourceVault\":{\r\n                     \"id\":\"\"\r\n                   }\r\n                 },\r\n                 \"enabled\":null\r\n               },\r\n               \"name\":\"\",\r\n               \"vhd\":{\r\n                 \"uri\":\"\"\r\n               },\r\n               \"image\":{\r\n                 \"uri\":\"\"\r\n               },\r\n               \"caching\":null,\r\n               \"createOption\":\"\",\r\n               \"diskSizeGB\":null,\r\n               \"managedDisk\":{\r\n                 \"storageAccountType\":null,\r\n                 \"id\":\"\"\r\n               }\r\n             },\r\n             \"dataDisks\":[\r\n               {\r\n                 \"lun\":\"\",\r\n                 \"name\":\"\",\r\n                 \"vhd\":{\r\n                   \"uri\":\"\"\r\n                 },\r\n                 \"image\":{\r\n                   \"uri\":\"\"\r\n                 },\r\n                 \"caching\":null,\r\n                 \"createOption\":\"\",\r\n                 \"diskSizeGB\":null,\r\n                 \"managedDisk\":{\r\n                   \"storageAccountType\":null,\r\n                   \"id\":\"\"\r\n                 }\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--image-reference", $("Remove the image-reference value.")).option("--os-disk", $("Remove the os-disk value.")).option("--data-disks", $("Remove the data-disks value.")).execute(function __12(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__12", line: 2237 }; return __func(_, this, arguments, __12, 1, __frame, function __$__12() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__12() { return (function __$__12(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__12() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/storageProfile";
          anySubItem = (((false || options.imageReference) || options.osDisk) || options.dataDisks);
          if (anySubItem) {
            subItemPath = null;
            if (options.imageReference) {
              subItemPath = (options.path + "/imageReference");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.osDisk) {
              subItemPath = (options.path + "/osDisk");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.dataDisks) {
              subItemPath = (options.path + "/dataDisks");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesImageReference0SPiR1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesImageReference0SPiR1 = catparametersCreateOrUpdateVirtualMachinesImageReference0SPiR1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesImageReference0SPiR1 = parametersCreateOrUpdateVirtualMachinesImageReference0SPiR1.category("image-reference").description($("Commands to configure image-reference of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesImageReference0SPiR1.command("set").description($("Set image-reference in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"imageReference\" : {\r\n             \"publisher\":\"\",\r\n             \"offer\":\"\",\r\n             \"sku\":\"\",\r\n             \"version\":\"\",\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--publisher <publisher>", $("Set the publisher value.")).option("--offer <offer>", $("Set the offer value.")).option("--sku <sku>", $("Set the sku value.")).option("--version <version>", $("Set the version value.")).option("--id <id>", $("Set the id value.")).execute(function __13(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__13", line: 2298 }; return __func(_, this, arguments, __13, 1, __frame, function __$__13() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__13() { return (function __$__13(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__13() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/storageProfile/imageReference";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "publisher");
          if (options.publisher) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publisher));
            cli.output.verbose("================================================");
            if ((options.parse && options.publisher)) {
              options.publisher = JSON.parse(options.publisher); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publisher },]); } ;

          paramPath = ((options.path + "/") + "offer");
          if (options.offer) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.offer));
            cli.output.verbose("================================================");
            if ((options.parse && options.offer)) {
              options.offer = JSON.parse(options.offer); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.offer },]); } ;

          paramPath = ((options.path + "/") + "sku");
          if (options.sku) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sku));
            cli.output.verbose("================================================");
            if ((options.parse && options.sku)) {
              options.sku = JSON.parse(options.sku); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sku },]); } ;

          paramPath = ((options.path + "/") + "version");
          if (options.version) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.version));
            cli.output.verbose("================================================");
            if ((options.parse && options.version)) {
              options.version = JSON.parse(options.version); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.version },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesImageReference1SPiR1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesImageReference1SPiR1 = catparametersCreateOrUpdateVirtualMachinesImageReference1SPiR1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesImageReference1SPiR1 = parametersCreateOrUpdateVirtualMachinesImageReference1SPiR1.category("image-reference").description($("Commands to configure image-reference of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesImageReference1SPiR1.command("delete").description($("Remove image-reference in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"imageReference\" : {\r\n             \"publisher\":\"\",\r\n             \"offer\":\"\",\r\n             \"sku\":\"\",\r\n             \"version\":\"\",\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--publisher", $("Remove the publisher value.")).option("--offer", $("Remove the offer value.")).option("--sku", $("Remove the sku value.")).option("--version", $("Remove the version value.")).option("--id", $("Remove the id value.")).execute(function __14(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__14", line: 2398 }; return __func(_, this, arguments, __14, 1, __frame, function __$__14() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__14() { return (function __$__14(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__14() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/storageProfile/imageReference";
          anySubItem = (((((false || options.publisher) || options.offer) || options.sku) || options.version) || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.publisher) {
              subItemPath = (options.path + "/publisher");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.offer) {
              subItemPath = (options.path + "/offer");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.sku) {
              subItemPath = (options.path + "/sku");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.version) {
              subItemPath = (options.path + "/version");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesOsDisk0SPoD1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesOsDisk0SPoD1 = catparametersCreateOrUpdateVirtualMachinesOsDisk0SPoD1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesOsDisk0SPoD1 = parametersCreateOrUpdateVirtualMachinesOsDisk0SPoD1.category("os-disk").description($("Commands to configure os-disk of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesOsDisk0SPoD1.command("set").description($("Set os-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"osDisk\" : {\r\n             \"osType\":null,\r\n             \"encryptionSettings\":{\r\n               \"diskEncryptionKey\":{\r\n                 \"secretUrl\":\"\",\r\n                 \"sourceVault\":{\r\n                   \"id\":\"\"\r\n                 }\r\n               },\r\n               \"keyEncryptionKey\":{\r\n                 \"keyUrl\":\"\",\r\n                 \"sourceVault\":{\r\n                   \"id\":\"\"\r\n                 }\r\n               },\r\n               \"enabled\":null\r\n             },\r\n             \"name\":\"\",\r\n             \"vhd\":{\r\n               \"uri\":\"\"\r\n             },\r\n             \"image\":{\r\n               \"uri\":\"\"\r\n             },\r\n             \"caching\":null,\r\n             \"createOption\":\"\",\r\n             \"diskSizeGB\":null,\r\n             \"managedDisk\":{\r\n               \"storageAccountType\":null,\r\n               \"id\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--os-type <osType>", $("Set the os-type value.")).option("--encryption-settings <encryptionSettings>", $("Set the encryption-settings value.")).option("--name <name>", $("Set the name value.")).option("--vhd <vhd>", $("Set the vhd value.")).option("--image <image>", $("Set the image value.")).option("--caching <caching>", $("Set the caching value.")).option("--create-option <createOption>", $("Set the create-option value.")).option("--disk-size-g-b <diskSizeGB>", $("Set the disk-size-g-b value.")).option("--managed-disk <managedDisk>", $("Set the managed-disk value.")).execute(function __15(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__15", line: 2471 }; return __func(_, this, arguments, __15, 1, __frame, function __$__15() {














      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__15() { return (function __$__15(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__15() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/storageProfile/osDisk";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "osType");
          if (options.osType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.osType));
            cli.output.verbose("================================================");
            if ((options.parse && options.osType)) {
              options.osType = JSON.parse(options.osType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.osType },]); } ;

          paramPath = ((options.path + "/") + "encryptionSettings");
          if (options.encryptionSettings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.encryptionSettings));
            cli.output.verbose("================================================");
            if ((options.parse && options.encryptionSettings)) {
              options.encryptionSettings = JSON.parse(options.encryptionSettings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.encryptionSettings },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "vhd");
          if (options.vhd) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.vhd));
            cli.output.verbose("================================================");
            if ((options.parse && options.vhd)) {
              options.vhd = JSON.parse(options.vhd); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.vhd },]); } ;

          paramPath = ((options.path + "/") + "image");
          if (options.image) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.image));
            cli.output.verbose("================================================");
            if ((options.parse && options.image)) {
              options.image = JSON.parse(options.image); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.image },]); } ;

          paramPath = ((options.path + "/") + "caching");
          if (options.caching) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.caching));
            cli.output.verbose("================================================");
            if ((options.parse && options.caching)) {
              options.caching = JSON.parse(options.caching); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.caching },]); } ;

          paramPath = ((options.path + "/") + "createOption");
          if (options.createOption) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.createOption));
            cli.output.verbose("================================================");
            if ((options.parse && options.createOption)) {
              options.createOption = JSON.parse(options.createOption); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.createOption },]); } ;

          paramPath = ((options.path + "/") + "diskSizeGB");
          if (options.diskSizeGB) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diskSizeGB));
            cli.output.verbose("================================================");
            if ((options.parse && options.diskSizeGB)) {
              options.diskSizeGB = JSON.parse(options.diskSizeGB); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diskSizeGB },]); } ;

          paramPath = ((options.path + "/") + "managedDisk");
          if (options.managedDisk) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.managedDisk));
            cli.output.verbose("================================================");
            if ((options.parse && options.managedDisk)) {
              options.managedDisk = JSON.parse(options.managedDisk); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.managedDisk },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesOsDisk1SPoD1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesOsDisk1SPoD1 = catparametersCreateOrUpdateVirtualMachinesOsDisk1SPoD1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesOsDisk1SPoD1 = parametersCreateOrUpdateVirtualMachinesOsDisk1SPoD1.category("os-disk").description($("Commands to configure os-disk of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesOsDisk1SPoD1.command("delete").description($("Remove os-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"osDisk\" : {\r\n             \"osType\":null,\r\n             \"encryptionSettings\":{\r\n               \"diskEncryptionKey\":{\r\n                 \"secretUrl\":\"\",\r\n                 \"sourceVault\":{\r\n                   \"id\":\"\"\r\n                 }\r\n               },\r\n               \"keyEncryptionKey\":{\r\n                 \"keyUrl\":\"\",\r\n                 \"sourceVault\":{\r\n                   \"id\":\"\"\r\n                 }\r\n               },\r\n               \"enabled\":null\r\n             },\r\n             \"name\":\"\",\r\n             \"vhd\":{\r\n               \"uri\":\"\"\r\n             },\r\n             \"image\":{\r\n               \"uri\":\"\"\r\n             },\r\n             \"caching\":null,\r\n             \"createOption\":\"\",\r\n             \"diskSizeGB\":null,\r\n             \"managedDisk\":{\r\n               \"storageAccountType\":null,\r\n               \"id\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--os-type", $("Remove the os-type value.")).option("--encryption-settings", $("Remove the encryption-settings value.")).option("--name", $("Remove the name value.")).option("--vhd", $("Remove the vhd value.")).option("--image", $("Remove the image value.")).option("--caching", $("Remove the caching value.")).option("--create-option", $("Remove the create-option value.")).option("--disk-size-g-b", $("Remove the disk-size-g-b value.")).option("--managed-disk", $("Remove the managed-disk value.")).execute(function __16(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__16", line: 2619 }; return __func(_, this, arguments, __16, 1, __frame, function __$__16() {













      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__16() { return (function __$__16(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__16() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/storageProfile/osDisk";
          anySubItem = (((((((((false || options.osType) || options.encryptionSettings) || options.name) || options.vhd) || options.image) || options.caching) || options.createOption) || options.diskSizeGB) || options.managedDisk);
          if (anySubItem) {
            subItemPath = null;
            if (options.osType) {
              subItemPath = (options.path + "/osType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.encryptionSettings) {
              subItemPath = (options.path + "/encryptionSettings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.vhd) {
              subItemPath = (options.path + "/vhd");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.image) {
              subItemPath = (options.path + "/image");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.caching) {
              subItemPath = (options.path + "/caching");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.createOption) {
              subItemPath = (options.path + "/createOption");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.diskSizeGB) {
              subItemPath = (options.path + "/diskSizeGB");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.managedDisk) {
              subItemPath = (options.path + "/managedDisk");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesEncryptionSettings0SPoDeS1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesEncryptionSettings0SPoDeS1 = catparametersCreateOrUpdateVirtualMachinesEncryptionSettings0SPoDeS1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesEncryptionSettings0SPoDeS1 = parametersCreateOrUpdateVirtualMachinesEncryptionSettings0SPoDeS1.category("encryption-settings").description($("Commands to configure encryption-settings of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesEncryptionSettings0SPoDeS1.command("set").description($("Set encryption-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"encryptionSettings\" : {\r\n             \"diskEncryptionKey\":{\r\n               \"secretUrl\":\"\",\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               }\r\n             },\r\n             \"keyEncryptionKey\":{\r\n               \"keyUrl\":\"\",\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               }\r\n             },\r\n             \"enabled\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--disk-encryption-key <diskEncryptionKey>", $("Set the disk-encryption-key value.")).option("--key-encryption-key <keyEncryptionKey>", $("Set the key-encryption-key value.")).option("--enabled <enabled>", $("Set the enabled value.")).execute(function __17(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__17", line: 2702 }; return __func(_, this, arguments, __17, 1, __frame, function __$__17() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__17() { return (function __$__17(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__17() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/storageProfile/osDisk/encryptionSettings";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "diskEncryptionKey");
          if (options.diskEncryptionKey) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diskEncryptionKey));
            cli.output.verbose("================================================");
            if ((options.parse && options.diskEncryptionKey)) {
              options.diskEncryptionKey = JSON.parse(options.diskEncryptionKey); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diskEncryptionKey },]); } ;

          paramPath = ((options.path + "/") + "keyEncryptionKey");
          if (options.keyEncryptionKey) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.keyEncryptionKey));
            cli.output.verbose("================================================");
            if ((options.parse && options.keyEncryptionKey)) {
              options.keyEncryptionKey = JSON.parse(options.keyEncryptionKey); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.keyEncryptionKey },]); } ;

          paramPath = ((options.path + "/") + "enabled");
          if (options.enabled) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.enabled));
            cli.output.verbose("================================================");
            if ((options.parse && options.enabled)) {
              options.enabled = JSON.parse(options.enabled); } ;

            options.enabled = JSON.parse(options.enabled);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.enabled },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesEncryptionSettings1SPoDeS1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesEncryptionSettings1SPoDeS1 = catparametersCreateOrUpdateVirtualMachinesEncryptionSettings1SPoDeS1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesEncryptionSettings1SPoDeS1 = parametersCreateOrUpdateVirtualMachinesEncryptionSettings1SPoDeS1.category("encryption-settings").description($("Commands to configure encryption-settings of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesEncryptionSettings1SPoDeS1.command("delete").description($("Remove encryption-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"encryptionSettings\" : {\r\n             \"diskEncryptionKey\":{\r\n               \"secretUrl\":\"\",\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               }\r\n             },\r\n             \"keyEncryptionKey\":{\r\n               \"keyUrl\":\"\",\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               }\r\n             },\r\n             \"enabled\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--disk-encryption-key", $("Remove the disk-encryption-key value.")).option("--key-encryption-key", $("Remove the key-encryption-key value.")).option("--enabled", $("Remove the enabled value.")).execute(function __18(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__18", line: 2779 }; return __func(_, this, arguments, __18, 1, __frame, function __$__18() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__18() { return (function __$__18(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__18() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/storageProfile/osDisk/encryptionSettings";
          anySubItem = (((false || options.diskEncryptionKey) || options.keyEncryptionKey) || options.enabled);
          if (anySubItem) {
            subItemPath = null;
            if (options.diskEncryptionKey) {
              subItemPath = (options.path + "/diskEncryptionKey");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.keyEncryptionKey) {
              subItemPath = (options.path + "/keyEncryptionKey");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.enabled) {
              subItemPath = (options.path + "/enabled");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0SPoDeSdEK1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0SPoDeSdEK1 = catparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0SPoDeSdEK1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0SPoDeSdEK1 = parametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0SPoDeSdEK1.category("disk-encryption-key").description($("Commands to configure disk-encryption-key of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0SPoDeSdEK1.command("set").description($("Set disk-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"diskEncryptionKey\" : {\r\n             \"secretUrl\":\"\",\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--secret-url <secretUrl>", $("Set the secret-url value.")).option("--source-vault <sourceVault>", $("Set the source-vault value.")).execute(function __19(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__19", line: 2837 }; return __func(_, this, arguments, __19, 1, __frame, function __$__19() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__19() { return (function __$__19(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__19() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/storageProfile/osDisk/encryptionSettings/diskEncryptionKey";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "secretUrl");
          if (options.secretUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.secretUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.secretUrl)) {
              options.secretUrl = JSON.parse(options.secretUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.secretUrl },]); } ;

          paramPath = ((options.path + "/") + "sourceVault");
          if (options.sourceVault) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceVault));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceVault)) {
              options.sourceVault = JSON.parse(options.sourceVault); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceVault },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1SPoDeSdEK1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1SPoDeSdEK1 = catparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1SPoDeSdEK1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1SPoDeSdEK1 = parametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1SPoDeSdEK1.category("disk-encryption-key").description($("Commands to configure disk-encryption-key of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1SPoDeSdEK1.command("delete").description($("Remove disk-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"diskEncryptionKey\" : {\r\n             \"secretUrl\":\"\",\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--secret-url", $("Remove the secret-url value.")).option("--source-vault", $("Remove the source-vault value.")).execute(function __20(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__20", line: 2901 }; return __func(_, this, arguments, __20, 1, __frame, function __$__20() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__20() { return (function __$__20(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__20() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/storageProfile/osDisk/encryptionSettings/diskEncryptionKey";
          anySubItem = ((false || options.secretUrl) || options.sourceVault);
          if (anySubItem) {
            subItemPath = null;
            if (options.secretUrl) {
              subItemPath = (options.path + "/secretUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.sourceVault) {
              subItemPath = (options.path + "/sourceVault");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSdEKsV1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSdEKsV1 = catparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSdEKsV1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSdEKsV1 = parametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSdEKsV1.category("source-vault").description($("Commands to configure source-vault of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSdEKsV1.command("set").description($("Set source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __21(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__21", line: 2954 }; return __func(_, this, arguments, __21, 1, __frame, function __$__21() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__21() { return (function __$__21(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__21() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/storageProfile/osDisk/encryptionSettings/diskEncryptionKey/sourceVault";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSdEKsV1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSdEKsV1 = catparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSdEKsV1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSdEKsV1 = parametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSdEKsV1.category("source-vault").description($("Commands to configure source-vault of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSdEKsV1.command("delete").description($("Remove source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--id", $("Remove the id value.")).execute(function __22(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__22", line: 3006 }; return __func(_, this, arguments, __22, 1, __frame, function __$__22() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__22() { return (function __$__22(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__22() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/storageProfile/osDisk/encryptionSettings/diskEncryptionKey/sourceVault";
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0SPoDeSkEK1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0SPoDeSkEK1 = catparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0SPoDeSkEK1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0SPoDeSkEK1 = parametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0SPoDeSkEK1.category("key-encryption-key").description($("Commands to configure key-encryption-key of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0SPoDeSkEK1.command("set").description($("Set key-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"keyEncryptionKey\" : {\r\n             \"keyUrl\":\"\",\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--key-url <keyUrl>", $("Set the key-url value.")).option("--source-vault <sourceVault>", $("Set the source-vault value.")).execute(function __23(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__23", line: 3056 }; return __func(_, this, arguments, __23, 1, __frame, function __$__23() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__23() { return (function __$__23(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__23() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/storageProfile/osDisk/encryptionSettings/keyEncryptionKey";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "keyUrl");
          if (options.keyUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.keyUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.keyUrl)) {
              options.keyUrl = JSON.parse(options.keyUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.keyUrl },]); } ;

          paramPath = ((options.path + "/") + "sourceVault");
          if (options.sourceVault) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceVault));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceVault)) {
              options.sourceVault = JSON.parse(options.sourceVault); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceVault },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1SPoDeSkEK1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1SPoDeSkEK1 = catparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1SPoDeSkEK1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1SPoDeSkEK1 = parametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1SPoDeSkEK1.category("key-encryption-key").description($("Commands to configure key-encryption-key of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1SPoDeSkEK1.command("delete").description($("Remove key-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"keyEncryptionKey\" : {\r\n             \"keyUrl\":\"\",\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--key-url", $("Remove the key-url value.")).option("--source-vault", $("Remove the source-vault value.")).execute(function __24(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__24", line: 3120 }; return __func(_, this, arguments, __24, 1, __frame, function __$__24() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__24() { return (function __$__24(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__24() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/storageProfile/osDisk/encryptionSettings/keyEncryptionKey";
          anySubItem = ((false || options.keyUrl) || options.sourceVault);
          if (anySubItem) {
            subItemPath = null;
            if (options.keyUrl) {
              subItemPath = (options.path + "/keyUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.sourceVault) {
              subItemPath = (options.path + "/sourceVault");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSkEKsV1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSkEKsV1 = catparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSkEKsV1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSkEKsV1 = parametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSkEKsV1.category("key-encryption-key-source-vault").description($("Commands to configure key-encryption-key-source-vault of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesSourceVault0SPoDeSkEKsV1.command("set").description($("Set key-encryption-key-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __25(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__25", line: 3173 }; return __func(_, this, arguments, __25, 1, __frame, function __$__25() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__25() { return (function __$__25(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__25() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/storageProfile/osDisk/encryptionSettings/keyEncryptionKey/sourceVault";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSkEKsV1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSkEKsV1 = catparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSkEKsV1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSkEKsV1 = parametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSkEKsV1.category("key-encryption-key-source-vault").description($("Commands to configure key-encryption-key-source-vault of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesSourceVault1SPoDeSkEKsV1.command("delete").description($("Remove key-encryption-key-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--id", $("Remove the id value.")).execute(function __26(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__26", line: 3225 }; return __func(_, this, arguments, __26, 1, __frame, function __$__26() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__26() { return (function __$__26(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__26() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/storageProfile/osDisk/encryptionSettings/keyEncryptionKey/sourceVault";
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesVhd0SPoDv1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesVhd0SPoDv1 = catparametersCreateOrUpdateVirtualMachinesVhd0SPoDv1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesVhd0SPoDv1 = parametersCreateOrUpdateVirtualMachinesVhd0SPoDv1.category("vhd").description($("Commands to configure vhd of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesVhd0SPoDv1.command("set").description($("Set vhd in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"vhd\" : {\r\n             \"uri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--uri <uri>", $("Set the uri value.")).execute(function __27(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__27", line: 3274 }; return __func(_, this, arguments, __27, 1, __frame, function __$__27() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__27() { return (function __$__27(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__27() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/storageProfile/osDisk/vhd";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "uri");
          if (options.uri) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.uri));
            cli.output.verbose("================================================");
            if ((options.parse && options.uri)) {
              options.uri = JSON.parse(options.uri); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.uri },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesVhd1SPoDv1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesVhd1SPoDv1 = catparametersCreateOrUpdateVirtualMachinesVhd1SPoDv1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesVhd1SPoDv1 = parametersCreateOrUpdateVirtualMachinesVhd1SPoDv1.category("vhd").description($("Commands to configure vhd of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesVhd1SPoDv1.command("delete").description($("Remove vhd in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"vhd\" : {\r\n             \"uri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--uri", $("Remove the uri value.")).execute(function __28(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__28", line: 3326 }; return __func(_, this, arguments, __28, 1, __frame, function __$__28() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__28() { return (function __$__28(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__28() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/storageProfile/osDisk/vhd";
          anySubItem = (false || options.uri);
          if (anySubItem) {
            subItemPath = null;
            if (options.uri) {
              subItemPath = (options.path + "/uri");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesImage0SPoDi2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesImage0SPoDi2 = catparametersCreateOrUpdateVirtualMachinesImage0SPoDi2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesImage0SPoDi2 = parametersCreateOrUpdateVirtualMachinesImage0SPoDi2.category("image").description($("Commands to configure image of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesImage0SPoDi2.command("set").description($("Set image in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"image\" : {\r\n             \"uri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--uri <uri>", $("Set the uri value.")).execute(function __29(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__29", line: 3375 }; return __func(_, this, arguments, __29, 1, __frame, function __$__29() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__29() { return (function __$__29(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__29() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/storageProfile/osDisk/image";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "uri");
          if (options.uri) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.uri));
            cli.output.verbose("================================================");
            if ((options.parse && options.uri)) {
              options.uri = JSON.parse(options.uri); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.uri },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesImage1SPoDi2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesImage1SPoDi2 = catparametersCreateOrUpdateVirtualMachinesImage1SPoDi2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesImage1SPoDi2 = parametersCreateOrUpdateVirtualMachinesImage1SPoDi2.category("image").description($("Commands to configure image of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesImage1SPoDi2.command("delete").description($("Remove image in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"image\" : {\r\n             \"uri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--uri", $("Remove the uri value.")).execute(function __30(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__30", line: 3427 }; return __func(_, this, arguments, __30, 1, __frame, function __$__30() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__30() { return (function __$__30(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__30() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/storageProfile/osDisk/image";
          anySubItem = (false || options.uri);
          if (anySubItem) {
            subItemPath = null;
            if (options.uri) {
              subItemPath = (options.path + "/uri");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesManagedDisk0SPoDmD1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesManagedDisk0SPoDmD1 = catparametersCreateOrUpdateVirtualMachinesManagedDisk0SPoDmD1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesManagedDisk0SPoDmD1 = parametersCreateOrUpdateVirtualMachinesManagedDisk0SPoDmD1.category("managed-disk").description($("Commands to configure managed-disk of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesManagedDisk0SPoDmD1.command("set").description($("Set managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"managedDisk\" : {\r\n             \"storageAccountType\":null,\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--storage-account-type <storageAccountType>", $("Set the storage-account-type value.")).option("--id <id>", $("Set the id value.")).execute(function __31(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__31", line: 3477 }; return __func(_, this, arguments, __31, 1, __frame, function __$__31() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__31() { return (function __$__31(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__31() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/storageProfile/osDisk/managedDisk";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "storageAccountType");
          if (options.storageAccountType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageAccountType));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageAccountType)) {
              options.storageAccountType = JSON.parse(options.storageAccountType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageAccountType },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesManagedDisk1SPoDmD1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesManagedDisk1SPoDmD1 = catparametersCreateOrUpdateVirtualMachinesManagedDisk1SPoDmD1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesManagedDisk1SPoDmD1 = parametersCreateOrUpdateVirtualMachinesManagedDisk1SPoDmD1.category("managed-disk").description($("Commands to configure managed-disk of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesManagedDisk1SPoDmD1.command("delete").description($("Remove managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"managedDisk\" : {\r\n             \"storageAccountType\":null,\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--storage-account-type", $("Remove the storage-account-type value.")).option("--id", $("Remove the id value.")).execute(function __32(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__32", line: 3541 }; return __func(_, this, arguments, __32, 1, __frame, function __$__32() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__32() { return (function __$__32(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__32() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/storageProfile/osDisk/managedDisk";
          anySubItem = ((false || options.storageAccountType) || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.storageAccountType) {
              subItemPath = (options.path + "/storageAccountType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesDataDisks0SPdD1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesDataDisks0SPdD1 = catparametersCreateOrUpdateVirtualMachinesDataDisks0SPdD1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesDataDisks0SPdD1 = parametersCreateOrUpdateVirtualMachinesDataDisks0SPdD1.category("data-disks").description($("Commands to configure data-disks of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesDataDisks0SPdD1.command("set").description($("Set data-disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"dataDisks\" : {\r\n             \"lun\":\"\",\r\n             \"name\":\"\",\r\n             \"vhd\":{\r\n               \"uri\":\"\"\r\n             },\r\n             \"image\":{\r\n               \"uri\":\"\"\r\n             },\r\n             \"caching\":null,\r\n             \"createOption\":\"\",\r\n             \"diskSizeGB\":null,\r\n             \"managedDisk\":{\r\n               \"storageAccountType\":null,\r\n               \"id\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--lun <lun>", $("Set the lun value.")).option("--name <name>", $("Set the name value.")).option("--vhd <vhd>", $("Set the vhd value.")).option("--image <image>", $("Set the image value.")).option("--caching <caching>", $("Set the caching value.")).option("--create-option <createOption>", $("Set the create-option value.")).option("--disk-size-g-b <diskSizeGB>", $("Set the disk-size-g-b value.")).option("--managed-disk <managedDisk>", $("Set the managed-disk value.")).execute(function __33(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__33", line: 3603 }; return __func(_, this, arguments, __33, 1, __frame, function __$__33() {















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__33() { return (function __$__33(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__33() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/storageProfile/dataDisks" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "lun");
          if (options.lun) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.lun));
            cli.output.verbose("================================================");
            if ((options.parse && options.lun)) {
              options.lun = JSON.parse(options.lun); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.lun },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "vhd");
          if (options.vhd) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.vhd));
            cli.output.verbose("================================================");
            if ((options.parse && options.vhd)) {
              options.vhd = JSON.parse(options.vhd); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.vhd },]); } ;

          paramPath = ((options.path + "/") + "image");
          if (options.image) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.image));
            cli.output.verbose("================================================");
            if ((options.parse && options.image)) {
              options.image = JSON.parse(options.image); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.image },]); } ;

          paramPath = ((options.path + "/") + "caching");
          if (options.caching) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.caching));
            cli.output.verbose("================================================");
            if ((options.parse && options.caching)) {
              options.caching = JSON.parse(options.caching); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.caching },]); } ;

          paramPath = ((options.path + "/") + "createOption");
          if (options.createOption) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.createOption));
            cli.output.verbose("================================================");
            if ((options.parse && options.createOption)) {
              options.createOption = JSON.parse(options.createOption); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.createOption },]); } ;

          paramPath = ((options.path + "/") + "diskSizeGB");
          if (options.diskSizeGB) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diskSizeGB));
            cli.output.verbose("================================================");
            if ((options.parse && options.diskSizeGB)) {
              options.diskSizeGB = JSON.parse(options.diskSizeGB); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diskSizeGB },]); } ;

          paramPath = ((options.path + "/") + "managedDisk");
          if (options.managedDisk) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.managedDisk));
            cli.output.verbose("================================================");
            if ((options.parse && options.managedDisk)) {
              options.managedDisk = JSON.parse(options.managedDisk); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.managedDisk },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesDataDisks1SPdD1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesDataDisks1SPdD1 = catparametersCreateOrUpdateVirtualMachinesDataDisks1SPdD1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesDataDisks1SPdD1 = parametersCreateOrUpdateVirtualMachinesDataDisks1SPdD1.category("data-disks").description($("Commands to configure data-disks of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesDataDisks1SPdD1.command("delete").description($("Remove data-disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"dataDisks\" : {\r\n             \"lun\":\"\",\r\n             \"name\":\"\",\r\n             \"vhd\":{\r\n               \"uri\":\"\"\r\n             },\r\n             \"image\":{\r\n               \"uri\":\"\"\r\n             },\r\n             \"caching\":null,\r\n             \"createOption\":\"\",\r\n             \"diskSizeGB\":null,\r\n             \"managedDisk\":{\r\n               \"storageAccountType\":null,\r\n               \"id\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--lun", $("Remove the lun value.")).option("--name", $("Remove the name value.")).option("--vhd", $("Remove the vhd value.")).option("--image", $("Remove the image value.")).option("--caching", $("Remove the caching value.")).option("--create-option", $("Remove the create-option value.")).option("--disk-size-g-b", $("Remove the disk-size-g-b value.")).option("--managed-disk", $("Remove the managed-disk value.")).execute(function __34(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__34", line: 3744 }; return __func(_, this, arguments, __34, 1, __frame, function __$__34() {













      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__34() { return (function __$__34(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__34() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/storageProfile/dataDisks" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((((((((false || options.lun) || options.name) || options.vhd) || options.image) || options.caching) || options.createOption) || options.diskSizeGB) || options.managedDisk);
          if (anySubItem) {
            subItemPath = null;
            if (options.lun) {
              subItemPath = (options.path + "/lun");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.vhd) {
              subItemPath = (options.path + "/vhd");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.image) {
              subItemPath = (options.path + "/image");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.caching) {
              subItemPath = (options.path + "/caching");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.createOption) {
              subItemPath = (options.path + "/createOption");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.diskSizeGB) {
              subItemPath = (options.path + "/diskSizeGB");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.managedDisk) {
              subItemPath = (options.path + "/managedDisk");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesVhd0SPdDDIv3 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesVhd0SPdDDIv3 = catparametersCreateOrUpdateVirtualMachinesVhd0SPdDDIv3.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesVhd0SPdDDIv3 = parametersCreateOrUpdateVirtualMachinesVhd0SPdDDIv3.category("data-disks-vhd").description($("Commands to configure data-disks-vhd of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesVhd0SPdDDIv3.command("set").description($("Set data-disks-vhd in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"vhd\" : {\r\n             \"uri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--data-disks-index <data-disks-index>", $("Indexer: data-disks-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--uri <uri>", $("Set the uri value.")).execute(function __35(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__35", line: 3822 }; return __func(_, this, arguments, __35, 1, __frame, function __$__35() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__35() { return (function __$__35(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__35() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/storageProfile/dataDisks/" + options.dataDisksIndex) + "/vhd");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "uri");
          if (options.uri) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.uri));
            cli.output.verbose("================================================");
            if ((options.parse && options.uri)) {
              options.uri = JSON.parse(options.uri); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.uri },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesVhd1SPdDDIv3 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesVhd1SPdDDIv3 = catparametersCreateOrUpdateVirtualMachinesVhd1SPdDDIv3.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesVhd1SPdDDIv3 = parametersCreateOrUpdateVirtualMachinesVhd1SPdDDIv3.category("data-disks-vhd").description($("Commands to configure data-disks-vhd of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesVhd1SPdDDIv3.command("delete").description($("Remove data-disks-vhd in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"vhd\" : {\r\n             \"uri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--data-disks-index <data-disks-index>", $("Indexer: data-disks-index.")).option("--uri", $("Remove the uri value.")).execute(function __36(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__36", line: 3875 }; return __func(_, this, arguments, __36, 1, __frame, function __$__36() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__36() { return (function __$__36(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__36() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/storageProfile/dataDisks/" + options.dataDisksIndex) + "/vhd");
          anySubItem = (false || options.uri);
          if (anySubItem) {
            subItemPath = null;
            if (options.uri) {
              subItemPath = (options.path + "/uri");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesImage0SPdDDIi4 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesImage0SPdDDIi4 = catparametersCreateOrUpdateVirtualMachinesImage0SPdDDIi4.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesImage0SPdDDIi4 = parametersCreateOrUpdateVirtualMachinesImage0SPdDDIi4.category("data-disks-image").description($("Commands to configure data-disks-image of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesImage0SPdDDIi4.command("set").description($("Set data-disks-image in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"image\" : {\r\n             \"uri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--data-disks-index <data-disks-index>", $("Indexer: data-disks-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--uri <uri>", $("Set the uri value.")).execute(function __37(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__37", line: 3925 }; return __func(_, this, arguments, __37, 1, __frame, function __$__37() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__37() { return (function __$__37(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__37() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/storageProfile/dataDisks/" + options.dataDisksIndex) + "/image");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "uri");
          if (options.uri) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.uri));
            cli.output.verbose("================================================");
            if ((options.parse && options.uri)) {
              options.uri = JSON.parse(options.uri); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.uri },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesImage1SPdDDIi4 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesImage1SPdDDIi4 = catparametersCreateOrUpdateVirtualMachinesImage1SPdDDIi4.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesImage1SPdDDIi4 = parametersCreateOrUpdateVirtualMachinesImage1SPdDDIi4.category("data-disks-image").description($("Commands to configure data-disks-image of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesImage1SPdDDIi4.command("delete").description($("Remove data-disks-image in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"image\" : {\r\n             \"uri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--data-disks-index <data-disks-index>", $("Indexer: data-disks-index.")).option("--uri", $("Remove the uri value.")).execute(function __38(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__38", line: 3978 }; return __func(_, this, arguments, __38, 1, __frame, function __$__38() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__38() { return (function __$__38(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__38() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/storageProfile/dataDisks/" + options.dataDisksIndex) + "/image");
          anySubItem = (false || options.uri);
          if (anySubItem) {
            subItemPath = null;
            if (options.uri) {
              subItemPath = (options.path + "/uri");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesManagedDisk0SPdDDImD2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesManagedDisk0SPdDDImD2 = catparametersCreateOrUpdateVirtualMachinesManagedDisk0SPdDDImD2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesManagedDisk0SPdDDImD2 = parametersCreateOrUpdateVirtualMachinesManagedDisk0SPdDDImD2.category("data-disks-managed-disk").description($("Commands to configure data-disks-managed-disk of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesManagedDisk0SPdDDImD2.command("set").description($("Set data-disks-managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"managedDisk\" : {\r\n             \"storageAccountType\":null,\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--data-disks-index <data-disks-index>", $("Indexer: data-disks-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--storage-account-type <storageAccountType>", $("Set the storage-account-type value.")).option("--id <id>", $("Set the id value.")).execute(function __39(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__39", line: 4029 }; return __func(_, this, arguments, __39, 1, __frame, function __$__39() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__39() { return (function __$__39(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__39() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/storageProfile/dataDisks/" + options.dataDisksIndex) + "/managedDisk");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "storageAccountType");
          if (options.storageAccountType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageAccountType));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageAccountType)) {
              options.storageAccountType = JSON.parse(options.storageAccountType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageAccountType },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesManagedDisk1SPdDDImD2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesManagedDisk1SPdDDImD2 = catparametersCreateOrUpdateVirtualMachinesManagedDisk1SPdDDImD2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesManagedDisk1SPdDDImD2 = parametersCreateOrUpdateVirtualMachinesManagedDisk1SPdDDImD2.category("data-disks-managed-disk").description($("Commands to configure data-disks-managed-disk of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesManagedDisk1SPdDDImD2.command("delete").description($("Remove data-disks-managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"managedDisk\" : {\r\n             \"storageAccountType\":null,\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--data-disks-index <data-disks-index>", $("Indexer: data-disks-index.")).option("--storage-account-type", $("Remove the storage-account-type value.")).option("--id", $("Remove the id value.")).execute(function __40(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__40", line: 4094 }; return __func(_, this, arguments, __40, 1, __frame, function __$__40() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__40() { return (function __$__40(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__40() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/storageProfile/dataDisks/" + options.dataDisksIndex) + "/managedDisk");
          anySubItem = ((false || options.storageAccountType) || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.storageAccountType) {
              subItemPath = (options.path + "/storageAccountType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesOsProfile0OP1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesOsProfile0OP1 = catparametersCreateOrUpdateVirtualMachinesOsProfile0OP1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesOsProfile0OP1 = parametersCreateOrUpdateVirtualMachinesOsProfile0OP1.category("os-profile").description($("Commands to configure os-profile of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesOsProfile0OP1.command("set").description($("Set os-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"osProfile\" : {\r\n             \"computerName\":\"\",\r\n             \"adminUsername\":\"\",\r\n             \"adminPassword\":\"\",\r\n             \"customData\":\"\",\r\n             \"windowsConfiguration\":{\r\n               \"provisionVMAgent\":null,\r\n               \"enableAutomaticUpdates\":null,\r\n               \"timeZone\":\"\",\r\n               \"additionalUnattendContent\":[\r\n                 {\r\n                   \"passName\":null,\r\n                   \"componentName\":null,\r\n                   \"settingName\":null,\r\n                   \"content\":\"\"\r\n                 }\r\n               ],\r\n               \"winRM\":{\r\n                 \"listeners\":[\r\n                   {\r\n                     \"protocol\":null,\r\n                     \"certificateUrl\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             \"linuxConfiguration\":{\r\n               \"disablePasswordAuthentication\":null,\r\n               \"ssh\":{\r\n                 \"publicKeys\":[\r\n                   {\r\n                     \"path\":\"\",\r\n                     \"keyData\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             \"secrets\":[\r\n               {\r\n                 \"sourceVault\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"vaultCertificates\":[\r\n                   {\r\n                     \"certificateUrl\":\"\",\r\n                     \"certificateStore\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--computer-name <computerName>", $("Set the computer-name value.")).option("--admin-username <adminUsername>", $("Set the admin-username value.")).option("--admin-password <adminPassword>", $("Set the admin-password value.")).option("--custom-data <customData>", $("Set the custom-data value.")).option("--windows-configuration <windowsConfiguration>", $("Set the windows-configuration value.")).option("--linux-configuration <linuxConfiguration>", $("Set the linux-configuration value.")).option("--secrets <secrets>", $("Set the secrets value.")).execute(function __41(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__41", line: 4153 }; return __func(_, this, arguments, __41, 1, __frame, function __$__41() {












      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__41() { return (function __$__41(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__41() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/osProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "computerName");
          if (options.computerName) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.computerName));
            cli.output.verbose("================================================");
            if ((options.parse && options.computerName)) {
              options.computerName = JSON.parse(options.computerName); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.computerName },]); } ;

          paramPath = ((options.path + "/") + "adminUsername");
          if (options.adminUsername) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.adminUsername));
            cli.output.verbose("================================================");
            if ((options.parse && options.adminUsername)) {
              options.adminUsername = JSON.parse(options.adminUsername); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.adminUsername },]); } ;

          paramPath = ((options.path + "/") + "adminPassword");
          if (options.adminPassword) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.adminPassword));
            cli.output.verbose("================================================");
            if ((options.parse && options.adminPassword)) {
              options.adminPassword = JSON.parse(options.adminPassword); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.adminPassword },]); } ;

          paramPath = ((options.path + "/") + "customData");
          if (options.customData) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.customData));
            cli.output.verbose("================================================");
            if ((options.parse && options.customData)) {
              options.customData = JSON.parse(options.customData); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.customData },]); } ;

          paramPath = ((options.path + "/") + "windowsConfiguration");
          if (options.windowsConfiguration) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.windowsConfiguration));
            cli.output.verbose("================================================");
            if ((options.parse && options.windowsConfiguration)) {
              options.windowsConfiguration = JSON.parse(options.windowsConfiguration); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.windowsConfiguration },]); } ;

          paramPath = ((options.path + "/") + "linuxConfiguration");
          if (options.linuxConfiguration) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.linuxConfiguration));
            cli.output.verbose("================================================");
            if ((options.parse && options.linuxConfiguration)) {
              options.linuxConfiguration = JSON.parse(options.linuxConfiguration); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.linuxConfiguration },]); } ;

          paramPath = ((options.path + "/") + "secrets");
          if (options.secrets) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.secrets));
            cli.output.verbose("================================================");
            if ((options.parse && options.secrets)) {
              options.secrets = JSON.parse(options.secrets); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.secrets },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesOsProfile1OP1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesOsProfile1OP1 = catparametersCreateOrUpdateVirtualMachinesOsProfile1OP1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesOsProfile1OP1 = parametersCreateOrUpdateVirtualMachinesOsProfile1OP1.category("os-profile").description($("Commands to configure os-profile of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesOsProfile1OP1.command("delete").description($("Remove os-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"osProfile\" : {\r\n             \"computerName\":\"\",\r\n             \"adminUsername\":\"\",\r\n             \"adminPassword\":\"\",\r\n             \"customData\":\"\",\r\n             \"windowsConfiguration\":{\r\n               \"provisionVMAgent\":null,\r\n               \"enableAutomaticUpdates\":null,\r\n               \"timeZone\":\"\",\r\n               \"additionalUnattendContent\":[\r\n                 {\r\n                   \"passName\":null,\r\n                   \"componentName\":null,\r\n                   \"settingName\":null,\r\n                   \"content\":\"\"\r\n                 }\r\n               ],\r\n               \"winRM\":{\r\n                 \"listeners\":[\r\n                   {\r\n                     \"protocol\":null,\r\n                     \"certificateUrl\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             \"linuxConfiguration\":{\r\n               \"disablePasswordAuthentication\":null,\r\n               \"ssh\":{\r\n                 \"publicKeys\":[\r\n                   {\r\n                     \"path\":\"\",\r\n                     \"keyData\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             \"secrets\":[\r\n               {\r\n                 \"sourceVault\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"vaultCertificates\":[\r\n                   {\r\n                     \"certificateUrl\":\"\",\r\n                     \"certificateStore\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--computer-name", $("Remove the computer-name value.")).option("--admin-username", $("Remove the admin-username value.")).option("--admin-password", $("Remove the admin-password value.")).option("--custom-data", $("Remove the custom-data value.")).option("--windows-configuration", $("Remove the windows-configuration value.")).option("--linux-configuration", $("Remove the linux-configuration value.")).option("--secrets", $("Remove the secrets value.")).execute(function __42(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__42", line: 4277 }; return __func(_, this, arguments, __42, 1, __frame, function __$__42() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__42() { return (function __$__42(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__42() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/osProfile";
          anySubItem = (((((((false || options.computerName) || options.adminUsername) || options.adminPassword) || options.customData) || options.windowsConfiguration) || options.linuxConfiguration) || options.secrets);
          if (anySubItem) {
            subItemPath = null;
            if (options.computerName) {
              subItemPath = (options.path + "/computerName");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.adminUsername) {
              subItemPath = (options.path + "/adminUsername");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.adminPassword) {
              subItemPath = (options.path + "/adminPassword");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.customData) {
              subItemPath = (options.path + "/customData");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.windowsConfiguration) {
              subItemPath = (options.path + "/windowsConfiguration");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.linuxConfiguration) {
              subItemPath = (options.path + "/linuxConfiguration");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.secrets) {
              subItemPath = (options.path + "/secrets");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesWindowsConfiguration0OPwC1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesWindowsConfiguration0OPwC1 = catparametersCreateOrUpdateVirtualMachinesWindowsConfiguration0OPwC1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesWindowsConfiguration0OPwC1 = parametersCreateOrUpdateVirtualMachinesWindowsConfiguration0OPwC1.category("windows-configuration").description($("Commands to configure windows-configuration of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesWindowsConfiguration0OPwC1.command("set").description($("Set windows-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"windowsConfiguration\" : {\r\n             \"provisionVMAgent\":null,\r\n             \"enableAutomaticUpdates\":null,\r\n             \"timeZone\":\"\",\r\n             \"additionalUnattendContent\":[\r\n               {\r\n                 \"passName\":null,\r\n                 \"componentName\":null,\r\n                 \"settingName\":null,\r\n                 \"content\":\"\"\r\n               }\r\n             ],\r\n             \"winRM\":{\r\n               \"listeners\":[\r\n                 {\r\n                   \"protocol\":null,\r\n                   \"certificateUrl\":\"\"\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--provision-vm-agent <provisionVMAgent>", $("Set the provision-vm-agent value.")).option("--enable-automatic-updates <enableAutomaticUpdates>", $("Set the enable-automatic-updates value.")).option("--time-zone <timeZone>", $("Set the time-zone value.")).option("--additional-unattend-content <additionalUnattendContent>", $("Set the additional-unattend-content value.")).option("--win-rm <winRM>", $("Set the win-rm value.")).execute(function __43(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__43", line: 4354 }; return __func(_, this, arguments, __43, 1, __frame, function __$__43() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__43() { return (function __$__43(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__43() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/osProfile/windowsConfiguration";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "provisionVMAgent");
          if (options.provisionVMAgent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.provisionVMAgent));
            cli.output.verbose("================================================");
            if ((options.parse && options.provisionVMAgent)) {
              options.provisionVMAgent = JSON.parse(options.provisionVMAgent); } ;

            options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.provisionVMAgent },]); } ;

          paramPath = ((options.path + "/") + "enableAutomaticUpdates");
          if (options.enableAutomaticUpdates) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.enableAutomaticUpdates));
            cli.output.verbose("================================================");
            if ((options.parse && options.enableAutomaticUpdates)) {
              options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates); } ;

            options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.enableAutomaticUpdates },]); } ;

          paramPath = ((options.path + "/") + "timeZone");
          if (options.timeZone) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.timeZone));
            cli.output.verbose("================================================");
            if ((options.parse && options.timeZone)) {
              options.timeZone = JSON.parse(options.timeZone); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.timeZone },]); } ;

          paramPath = ((options.path + "/") + "additionalUnattendContent");
          if (options.additionalUnattendContent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.additionalUnattendContent));
            cli.output.verbose("================================================");
            if ((options.parse && options.additionalUnattendContent)) {
              options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.additionalUnattendContent },]); } ;

          paramPath = ((options.path + "/") + "winRM");
          if (options.winRM) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.winRM));
            cli.output.verbose("================================================");
            if ((options.parse && options.winRM)) {
              options.winRM = JSON.parse(options.winRM); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.winRM },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesWindowsConfiguration1OPwC1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesWindowsConfiguration1OPwC1 = catparametersCreateOrUpdateVirtualMachinesWindowsConfiguration1OPwC1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesWindowsConfiguration1OPwC1 = parametersCreateOrUpdateVirtualMachinesWindowsConfiguration1OPwC1.category("windows-configuration").description($("Commands to configure windows-configuration of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesWindowsConfiguration1OPwC1.command("delete").description($("Remove windows-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"windowsConfiguration\" : {\r\n             \"provisionVMAgent\":null,\r\n             \"enableAutomaticUpdates\":null,\r\n             \"timeZone\":\"\",\r\n             \"additionalUnattendContent\":[\r\n               {\r\n                 \"passName\":null,\r\n                 \"componentName\":null,\r\n                 \"settingName\":null,\r\n                 \"content\":\"\"\r\n               }\r\n             ],\r\n             \"winRM\":{\r\n               \"listeners\":[\r\n                 {\r\n                   \"protocol\":null,\r\n                   \"certificateUrl\":\"\"\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--provision-vm-agent", $("Remove the provision-vm-agent value.")).option("--enable-automatic-updates", $("Remove the enable-automatic-updates value.")).option("--time-zone", $("Remove the time-zone value.")).option("--additional-unattend-content", $("Remove the additional-unattend-content value.")).option("--win-rm", $("Remove the win-rm value.")).execute(function __44(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__44", line: 4456 }; return __func(_, this, arguments, __44, 1, __frame, function __$__44() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__44() { return (function __$__44(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__44() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/osProfile/windowsConfiguration";
          anySubItem = (((((false || options.provisionVMAgent) || options.enableAutomaticUpdates) || options.timeZone) || options.additionalUnattendContent) || options.winRM);
          if (anySubItem) {
            subItemPath = null;
            if (options.provisionVMAgent) {
              subItemPath = (options.path + "/provisionVMAgent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.enableAutomaticUpdates) {
              subItemPath = (options.path + "/enableAutomaticUpdates");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.timeZone) {
              subItemPath = (options.path + "/timeZone");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.additionalUnattendContent) {
              subItemPath = (options.path + "/additionalUnattendContent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.winRM) {
              subItemPath = (options.path + "/winRM");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent0OPwCaUC1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent0OPwCaUC1 = catparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent0OPwCaUC1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent0OPwCaUC1 = parametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent0OPwCaUC1.category("additional-unattend-content").description($("Commands to configure additional-unattend-content of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent0OPwCaUC1.command("set").description($("Set additional-unattend-content in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"additionalUnattendContent\" : {\r\n             \"passName\":null,\r\n             \"componentName\":null,\r\n             \"settingName\":null,\r\n             \"content\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--pass-name <passName>", $("Set the pass-name value.")).option("--component-name <componentName>", $("Set the component-name value.")).option("--setting-name <settingName>", $("Set the setting-name value.")).option("--content <content>", $("Set the content value.")).execute(function __45(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__45", line: 4526 }; return __func(_, this, arguments, __45, 1, __frame, function __$__45() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__45() { return (function __$__45(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__45() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/osProfile/windowsConfiguration/additionalUnattendContent" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "passName");
          if (options.passName) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.passName));
            cli.output.verbose("================================================");
            if ((options.parse && options.passName)) {
              options.passName = JSON.parse(options.passName); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.passName },]); } ;

          paramPath = ((options.path + "/") + "componentName");
          if (options.componentName) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.componentName));
            cli.output.verbose("================================================");
            if ((options.parse && options.componentName)) {
              options.componentName = JSON.parse(options.componentName); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.componentName },]); } ;

          paramPath = ((options.path + "/") + "settingName");
          if (options.settingName) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.settingName));
            cli.output.verbose("================================================");
            if ((options.parse && options.settingName)) {
              options.settingName = JSON.parse(options.settingName); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.settingName },]); } ;

          paramPath = ((options.path + "/") + "content");
          if (options.content) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.content));
            cli.output.verbose("================================================");
            if ((options.parse && options.content)) {
              options.content = JSON.parse(options.content); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.content },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent1OPwCaUC1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent1OPwCaUC1 = catparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent1OPwCaUC1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent1OPwCaUC1 = parametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent1OPwCaUC1.category("additional-unattend-content").description($("Commands to configure additional-unattend-content of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesAdditionalUnattendContent1OPwCaUC1.command("delete").description($("Remove additional-unattend-content in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"additionalUnattendContent\" : {\r\n             \"passName\":null,\r\n             \"componentName\":null,\r\n             \"settingName\":null,\r\n             \"content\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--pass-name", $("Remove the pass-name value.")).option("--component-name", $("Remove the component-name value.")).option("--setting-name", $("Remove the setting-name value.")).option("--content", $("Remove the content value.")).execute(function __46(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__46", line: 4619 }; return __func(_, this, arguments, __46, 1, __frame, function __$__46() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__46() { return (function __$__46(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__46() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/osProfile/windowsConfiguration/additionalUnattendContent" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((((false || options.passName) || options.componentName) || options.settingName) || options.content);
          if (anySubItem) {
            subItemPath = null;
            if (options.passName) {
              subItemPath = (options.path + "/passName");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.componentName) {
              subItemPath = (options.path + "/componentName");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.settingName) {
              subItemPath = (options.path + "/settingName");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.content) {
              subItemPath = (options.path + "/content");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesWinRM0OPwCwRM1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesWinRM0OPwCwRM1 = catparametersCreateOrUpdateVirtualMachinesWinRM0OPwCwRM1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesWinRM0OPwCwRM1 = parametersCreateOrUpdateVirtualMachinesWinRM0OPwCwRM1.category("win-rm").description($("Commands to configure win-rm of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesWinRM0OPwCwRM1.command("set").description($("Set win-rm in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"winRM\" : {\r\n             \"listeners\":[\r\n               {\r\n                 \"protocol\":null,\r\n                 \"certificateUrl\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--listeners <listeners>", $("Set the listeners value.")).execute(function __47(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__47", line: 4680 }; return __func(_, this, arguments, __47, 1, __frame, function __$__47() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__47() { return (function __$__47(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__47() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/osProfile/windowsConfiguration/winRM";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "listeners");
          if (options.listeners) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.listeners));
            cli.output.verbose("================================================");
            if ((options.parse && options.listeners)) {
              options.listeners = JSON.parse(options.listeners); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.listeners },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesWinRM1OPwCwRM1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesWinRM1OPwCwRM1 = catparametersCreateOrUpdateVirtualMachinesWinRM1OPwCwRM1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesWinRM1OPwCwRM1 = parametersCreateOrUpdateVirtualMachinesWinRM1OPwCwRM1.category("win-rm").description($("Commands to configure win-rm of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesWinRM1OPwCwRM1.command("delete").description($("Remove win-rm in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"winRM\" : {\r\n             \"listeners\":[\r\n               {\r\n                 \"protocol\":null,\r\n                 \"certificateUrl\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--listeners", $("Remove the listeners value.")).execute(function __48(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__48", line: 4732 }; return __func(_, this, arguments, __48, 1, __frame, function __$__48() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__48() { return (function __$__48(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__48() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/osProfile/windowsConfiguration/winRM";
          anySubItem = (false || options.listeners);
          if (anySubItem) {
            subItemPath = null;
            if (options.listeners) {
              subItemPath = (options.path + "/listeners");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesListeners0OPwCwRMl1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesListeners0OPwCwRMl1 = catparametersCreateOrUpdateVirtualMachinesListeners0OPwCwRMl1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesListeners0OPwCwRMl1 = parametersCreateOrUpdateVirtualMachinesListeners0OPwCwRMl1.category("listeners").description($("Commands to configure listeners of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesListeners0OPwCwRMl1.command("set").description($("Set listeners in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"listeners\" : {\r\n             \"protocol\":null,\r\n             \"certificateUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--protocol <protocol>", $("Set the protocol value.")).option("--certificate-url <certificateUrl>", $("Set the certificate-url value.")).execute(function __49(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__49", line: 4784 }; return __func(_, this, arguments, __49, 1, __frame, function __$__49() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__49() { return (function __$__49(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__49() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/osProfile/windowsConfiguration/winRM/listeners" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "protocol");
          if (options.protocol) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.protocol));
            cli.output.verbose("================================================");
            if ((options.parse && options.protocol)) {
              options.protocol = JSON.parse(options.protocol); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.protocol },]); } ;

          paramPath = ((options.path + "/") + "certificateUrl");
          if (options.certificateUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.certificateUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.certificateUrl)) {
              options.certificateUrl = JSON.parse(options.certificateUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.certificateUrl },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesListeners1OPwCwRMl1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesListeners1OPwCwRMl1 = catparametersCreateOrUpdateVirtualMachinesListeners1OPwCwRMl1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesListeners1OPwCwRMl1 = parametersCreateOrUpdateVirtualMachinesListeners1OPwCwRMl1.category("listeners").description($("Commands to configure listeners of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesListeners1OPwCwRMl1.command("delete").description($("Remove listeners in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"listeners\" : {\r\n             \"protocol\":null,\r\n             \"certificateUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--protocol", $("Remove the protocol value.")).option("--certificate-url", $("Remove the certificate-url value.")).execute(function __50(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__50", line: 4853 }; return __func(_, this, arguments, __50, 1, __frame, function __$__50() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__50() { return (function __$__50(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__50() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/osProfile/windowsConfiguration/winRM/listeners" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.protocol) || options.certificateUrl);
          if (anySubItem) {
            subItemPath = null;
            if (options.protocol) {
              subItemPath = (options.path + "/protocol");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.certificateUrl) {
              subItemPath = (options.path + "/certificateUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesLinuxConfiguration0OPlC1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesLinuxConfiguration0OPlC1 = catparametersCreateOrUpdateVirtualMachinesLinuxConfiguration0OPlC1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesLinuxConfiguration0OPlC1 = parametersCreateOrUpdateVirtualMachinesLinuxConfiguration0OPlC1.category("linux-configuration").description($("Commands to configure linux-configuration of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesLinuxConfiguration0OPlC1.command("set").description($("Set linux-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"linuxConfiguration\" : {\r\n             \"disablePasswordAuthentication\":null,\r\n             \"ssh\":{\r\n               \"publicKeys\":[\r\n                 {\r\n                   \"path\":\"\",\r\n                   \"keyData\":\"\"\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--disable-password-authentication <disablePasswordAuthentication>", $("Set the disable-password-authentication value.")).option("--ssh <ssh>", $("Set the ssh value.")).execute(function __51(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__51", line: 4907 }; return __func(_, this, arguments, __51, 1, __frame, function __$__51() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__51() { return (function __$__51(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__51() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/osProfile/linuxConfiguration";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "disablePasswordAuthentication");
          if (options.disablePasswordAuthentication) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.disablePasswordAuthentication));
            cli.output.verbose("================================================");
            if ((options.parse && options.disablePasswordAuthentication)) {
              options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication); } ;

            options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.disablePasswordAuthentication },]); } ;

          paramPath = ((options.path + "/") + "ssh");
          if (options.ssh) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.ssh));
            cli.output.verbose("================================================");
            if ((options.parse && options.ssh)) {
              options.ssh = JSON.parse(options.ssh); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.ssh },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesLinuxConfiguration1OPlC1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesLinuxConfiguration1OPlC1 = catparametersCreateOrUpdateVirtualMachinesLinuxConfiguration1OPlC1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesLinuxConfiguration1OPlC1 = parametersCreateOrUpdateVirtualMachinesLinuxConfiguration1OPlC1.category("linux-configuration").description($("Commands to configure linux-configuration of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesLinuxConfiguration1OPlC1.command("delete").description($("Remove linux-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"linuxConfiguration\" : {\r\n             \"disablePasswordAuthentication\":null,\r\n             \"ssh\":{\r\n               \"publicKeys\":[\r\n                 {\r\n                   \"path\":\"\",\r\n                   \"keyData\":\"\"\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--disable-password-authentication", $("Remove the disable-password-authentication value.")).option("--ssh", $("Remove the ssh value.")).execute(function __52(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__52", line: 4972 }; return __func(_, this, arguments, __52, 1, __frame, function __$__52() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__52() { return (function __$__52(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__52() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/osProfile/linuxConfiguration";
          anySubItem = ((false || options.disablePasswordAuthentication) || options.ssh);
          if (anySubItem) {
            subItemPath = null;
            if (options.disablePasswordAuthentication) {
              subItemPath = (options.path + "/disablePasswordAuthentication");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.ssh) {
              subItemPath = (options.path + "/ssh");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesSsh0OPlCs1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSsh0OPlCs1 = catparametersCreateOrUpdateVirtualMachinesSsh0OPlCs1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesSsh0OPlCs1 = parametersCreateOrUpdateVirtualMachinesSsh0OPlCs1.category("ssh").description($("Commands to configure ssh of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesSsh0OPlCs1.command("set").description($("Set ssh in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"ssh\" : {\r\n             \"publicKeys\":[\r\n               {\r\n                 \"path\":\"\",\r\n                 \"keyData\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--public-keys <publicKeys>", $("Set the public-keys value.")).execute(function __53(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__53", line: 5025 }; return __func(_, this, arguments, __53, 1, __frame, function __$__53() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__53() { return (function __$__53(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__53() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/osProfile/linuxConfiguration/ssh";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "publicKeys");
          if (options.publicKeys) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publicKeys));
            cli.output.verbose("================================================");
            if ((options.parse && options.publicKeys)) {
              options.publicKeys = JSON.parse(options.publicKeys); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publicKeys },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesSsh1OPlCs1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSsh1OPlCs1 = catparametersCreateOrUpdateVirtualMachinesSsh1OPlCs1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesSsh1OPlCs1 = parametersCreateOrUpdateVirtualMachinesSsh1OPlCs1.category("ssh").description($("Commands to configure ssh of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesSsh1OPlCs1.command("delete").description($("Remove ssh in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"ssh\" : {\r\n             \"publicKeys\":[\r\n               {\r\n                 \"path\":\"\",\r\n                 \"keyData\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--public-keys", $("Remove the public-keys value.")).execute(function __54(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__54", line: 5077 }; return __func(_, this, arguments, __54, 1, __frame, function __$__54() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__54() { return (function __$__54(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__54() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/osProfile/linuxConfiguration/ssh";
          anySubItem = (false || options.publicKeys);
          if (anySubItem) {
            subItemPath = null;
            if (options.publicKeys) {
              subItemPath = (options.path + "/publicKeys");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesPublicKeys0OPlCspK1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesPublicKeys0OPlCspK1 = catparametersCreateOrUpdateVirtualMachinesPublicKeys0OPlCspK1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesPublicKeys0OPlCspK1 = parametersCreateOrUpdateVirtualMachinesPublicKeys0OPlCspK1.category("public-keys").description($("Commands to configure public-keys of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesPublicKeys0OPlCspK1.command("set").description($("Set public-keys in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"publicKeys\" : {\r\n             \"path\":\"\",\r\n             \"keyData\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--path <path>", $("Set the path value.")).option("--key-data <keyData>", $("Set the key-data value.")).execute(function __55(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__55", line: 5129 }; return __func(_, this, arguments, __55, 1, __frame, function __$__55() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__55() { return (function __$__55(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__55() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/osProfile/linuxConfiguration/ssh/publicKeys" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "path");
          if (options.path) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.path));
            cli.output.verbose("================================================");
            if ((options.parse && options.path)) {
              options.path = JSON.parse(options.path); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.path },]); } ;

          paramPath = ((options.path + "/") + "keyData");
          if (options.keyData) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.keyData));
            cli.output.verbose("================================================");
            if ((options.parse && options.keyData)) {
              options.keyData = JSON.parse(options.keyData); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.keyData },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesPublicKeys1OPlCspK1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesPublicKeys1OPlCspK1 = catparametersCreateOrUpdateVirtualMachinesPublicKeys1OPlCspK1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesPublicKeys1OPlCspK1 = parametersCreateOrUpdateVirtualMachinesPublicKeys1OPlCspK1.category("public-keys").description($("Commands to configure public-keys of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesPublicKeys1OPlCspK1.command("delete").description($("Remove public-keys in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"publicKeys\" : {\r\n             \"path\":\"\",\r\n             \"keyData\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--path", $("Remove the path value.")).option("--key-data", $("Remove the key-data value.")).execute(function __56(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__56", line: 5198 }; return __func(_, this, arguments, __56, 1, __frame, function __$__56() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__56() { return (function __$__56(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__56() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/osProfile/linuxConfiguration/ssh/publicKeys" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.path) || options.keyData);
          if (anySubItem) {
            subItemPath = null;
            if (options.path) {
              subItemPath = (options.path + "/path");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.keyData) {
              subItemPath = (options.path + "/keyData");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesSecrets0OPs1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSecrets0OPs1 = catparametersCreateOrUpdateVirtualMachinesSecrets0OPs1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesSecrets0OPs1 = parametersCreateOrUpdateVirtualMachinesSecrets0OPs1.category("secrets").description($("Commands to configure secrets of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesSecrets0OPs1.command("set").description($("Set secrets in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"secrets\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"vaultCertificates\":[\r\n               {\r\n                 \"certificateUrl\":\"\",\r\n                 \"certificateStore\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--source-vault <sourceVault>", $("Set the source-vault value.")).option("--vault-certificates <vaultCertificates>", $("Set the vault-certificates value.")).execute(function __57(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__57", line: 5254 }; return __func(_, this, arguments, __57, 1, __frame, function __$__57() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__57() { return (function __$__57(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__57() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/osProfile/secrets" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "sourceVault");
          if (options.sourceVault) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceVault));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceVault)) {
              options.sourceVault = JSON.parse(options.sourceVault); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceVault },]); } ;

          paramPath = ((options.path + "/") + "vaultCertificates");
          if (options.vaultCertificates) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.vaultCertificates));
            cli.output.verbose("================================================");
            if ((options.parse && options.vaultCertificates)) {
              options.vaultCertificates = JSON.parse(options.vaultCertificates); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.vaultCertificates },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesSecrets1OPs1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSecrets1OPs1 = catparametersCreateOrUpdateVirtualMachinesSecrets1OPs1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesSecrets1OPs1 = parametersCreateOrUpdateVirtualMachinesSecrets1OPs1.category("secrets").description($("Commands to configure secrets of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesSecrets1OPs1.command("delete").description($("Remove secrets in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"secrets\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"vaultCertificates\":[\r\n               {\r\n                 \"certificateUrl\":\"\",\r\n                 \"certificateStore\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--source-vault", $("Remove the source-vault value.")).option("--vault-certificates", $("Remove the vault-certificates value.")).execute(function __58(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__58", line: 5323 }; return __func(_, this, arguments, __58, 1, __frame, function __$__58() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__58() { return (function __$__58(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__58() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/osProfile/secrets" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.sourceVault) || options.vaultCertificates);
          if (anySubItem) {
            subItemPath = null;
            if (options.sourceVault) {
              subItemPath = (options.path + "/sourceVault");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.vaultCertificates) {
              subItemPath = (options.path + "/vaultCertificates");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesSourceVault0OPsIsV1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSourceVault0OPsIsV1 = catparametersCreateOrUpdateVirtualMachinesSourceVault0OPsIsV1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesSourceVault0OPsIsV1 = parametersCreateOrUpdateVirtualMachinesSourceVault0OPsIsV1.category("secrets-source-vault").description($("Commands to configure secrets-source-vault of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesSourceVault0OPsIsV1.command("set").description($("Set secrets-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--secrets-index <secrets-index>", $("Indexer: secrets-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __59(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__59", line: 5377 }; return __func(_, this, arguments, __59, 1, __frame, function __$__59() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__59() { return (function __$__59(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__59() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/osProfile/secrets/" + options.secretsIndex) + "/sourceVault");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesSourceVault1OPsIsV1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSourceVault1OPsIsV1 = catparametersCreateOrUpdateVirtualMachinesSourceVault1OPsIsV1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesSourceVault1OPsIsV1 = parametersCreateOrUpdateVirtualMachinesSourceVault1OPsIsV1.category("secrets-source-vault").description($("Commands to configure secrets-source-vault of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesSourceVault1OPsIsV1.command("delete").description($("Remove secrets-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--secrets-index <secrets-index>", $("Indexer: secrets-index.")).option("--id", $("Remove the id value.")).execute(function __60(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__60", line: 5430 }; return __func(_, this, arguments, __60, 1, __frame, function __$__60() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__60() { return (function __$__60(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__60() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/osProfile/secrets/" + options.secretsIndex) + "/sourceVault");
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesVaultCertificates0OPsIvC1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesVaultCertificates0OPsIvC1 = catparametersCreateOrUpdateVirtualMachinesVaultCertificates0OPsIvC1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesVaultCertificates0OPsIvC1 = parametersCreateOrUpdateVirtualMachinesVaultCertificates0OPsIvC1.category("vault-certificates").description($("Commands to configure vault-certificates of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesVaultCertificates0OPsIvC1.command("set").description($("Set vault-certificates in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"vaultCertificates\" : {\r\n             \"certificateUrl\":\"\",\r\n             \"certificateStore\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--secrets-index <secrets-index>", $("Indexer: secrets-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--certificate-url <certificateUrl>", $("Set the certificate-url value.")).option("--certificate-store <certificateStore>", $("Set the certificate-store value.")).execute(function __61(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__61", line: 5483 }; return __func(_, this, arguments, __61, 1, __frame, function __$__61() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__61() { return (function __$__61(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__61() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/osProfile/secrets/" + options.secretsIndex) + "/vaultCertificates") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "certificateUrl");
          if (options.certificateUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.certificateUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.certificateUrl)) {
              options.certificateUrl = JSON.parse(options.certificateUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.certificateUrl },]); } ;

          paramPath = ((options.path + "/") + "certificateStore");
          if (options.certificateStore) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.certificateStore));
            cli.output.verbose("================================================");
            if ((options.parse && options.certificateStore)) {
              options.certificateStore = JSON.parse(options.certificateStore); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.certificateStore },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesVaultCertificates1OPsIvC1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesVaultCertificates1OPsIvC1 = catparametersCreateOrUpdateVirtualMachinesVaultCertificates1OPsIvC1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesVaultCertificates1OPsIvC1 = parametersCreateOrUpdateVirtualMachinesVaultCertificates1OPsIvC1.category("vault-certificates").description($("Commands to configure vault-certificates of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesVaultCertificates1OPsIvC1.command("delete").description($("Remove vault-certificates in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"vaultCertificates\" : {\r\n             \"certificateUrl\":\"\",\r\n             \"certificateStore\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--secrets-index <secrets-index>", $("Indexer: secrets-index.")).option("--certificate-url", $("Remove the certificate-url value.")).option("--certificate-store", $("Remove the certificate-store value.")).execute(function __62(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__62", line: 5553 }; return __func(_, this, arguments, __62, 1, __frame, function __$__62() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__62() { return (function __$__62(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__62() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/osProfile/secrets/" + options.secretsIndex) + "/vaultCertificates") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.certificateUrl) || options.certificateStore);
          if (anySubItem) {
            subItemPath = null;
            if (options.certificateUrl) {
              subItemPath = (options.path + "/certificateUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.certificateStore) {
              subItemPath = (options.path + "/certificateStore");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesNetworkProfile0NP1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesNetworkProfile0NP1 = catparametersCreateOrUpdateVirtualMachinesNetworkProfile0NP1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesNetworkProfile0NP1 = parametersCreateOrUpdateVirtualMachinesNetworkProfile0NP1.category("network-profile").description($("Commands to configure network-profile of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesNetworkProfile0NP1.command("set").description($("Set network-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkProfile\" : {\r\n             \"networkInterfaces\":[\r\n               {\r\n                 \"primary\":null,\r\n                 \"id\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--network-interfaces <networkInterfaces>", $("Set the network-interfaces value.")).execute(function __63(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__63", line: 5606 }; return __func(_, this, arguments, __63, 1, __frame, function __$__63() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__63() { return (function __$__63(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__63() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/networkProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "networkInterfaces");
          if (options.networkInterfaces) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.networkInterfaces));
            cli.output.verbose("================================================");
            if ((options.parse && options.networkInterfaces)) {
              options.networkInterfaces = JSON.parse(options.networkInterfaces); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.networkInterfaces },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesNetworkProfile1NP1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesNetworkProfile1NP1 = catparametersCreateOrUpdateVirtualMachinesNetworkProfile1NP1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesNetworkProfile1NP1 = parametersCreateOrUpdateVirtualMachinesNetworkProfile1NP1.category("network-profile").description($("Commands to configure network-profile of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesNetworkProfile1NP1.command("delete").description($("Remove network-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkProfile\" : {\r\n             \"networkInterfaces\":[\r\n               {\r\n                 \"primary\":null,\r\n                 \"id\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--network-interfaces", $("Remove the network-interfaces value.")).execute(function __64(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__64", line: 5658 }; return __func(_, this, arguments, __64, 1, __frame, function __$__64() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__64() { return (function __$__64(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__64() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/networkProfile";
          anySubItem = (false || options.networkInterfaces);
          if (anySubItem) {
            subItemPath = null;
            if (options.networkInterfaces) {
              subItemPath = (options.path + "/networkInterfaces");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesNetworkInterfaces0NPnI1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesNetworkInterfaces0NPnI1 = catparametersCreateOrUpdateVirtualMachinesNetworkInterfaces0NPnI1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesNetworkInterfaces0NPnI1 = parametersCreateOrUpdateVirtualMachinesNetworkInterfaces0NPnI1.category("network-interfaces").description($("Commands to configure network-interfaces of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesNetworkInterfaces0NPnI1.command("set").description($("Set network-interfaces in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkInterfaces\" : {\r\n             \"primary\":null,\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--primary <primary>", $("Set the primary value.")).option("--id <id>", $("Set the id value.")).execute(function __65(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__65", line: 5710 }; return __func(_, this, arguments, __65, 1, __frame, function __$__65() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__65() { return (function __$__65(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__65() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/networkProfile/networkInterfaces" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "primary");
          if (options.primary) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.primary));
            cli.output.verbose("================================================");
            if ((options.parse && options.primary)) {
              options.primary = JSON.parse(options.primary); } ;

            options.primary = JSON.parse(options.primary);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.primary },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesNetworkInterfaces1NPnI1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesNetworkInterfaces1NPnI1 = catparametersCreateOrUpdateVirtualMachinesNetworkInterfaces1NPnI1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesNetworkInterfaces1NPnI1 = parametersCreateOrUpdateVirtualMachinesNetworkInterfaces1NPnI1.category("network-interfaces").description($("Commands to configure network-interfaces of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesNetworkInterfaces1NPnI1.command("delete").description($("Remove network-interfaces in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkInterfaces\" : {\r\n             \"primary\":null,\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--primary", $("Remove the primary value.")).option("--id", $("Remove the id value.")).execute(function __66(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__66", line: 5780 }; return __func(_, this, arguments, __66, 1, __frame, function __$__66() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__66() { return (function __$__66(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__66() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/networkProfile/networkInterfaces" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.primary) || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.primary) {
              subItemPath = (options.path + "/primary");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile0DP1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesDiagnosticsProfile0DP1 = catparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile0DP1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile0DP1 = parametersCreateOrUpdateVirtualMachinesDiagnosticsProfile0DP1.category("diagnostics-profile").description($("Commands to configure diagnostics-profile of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile0DP1.command("set").description($("Set diagnostics-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"diagnosticsProfile\" : {\r\n             \"bootDiagnostics\":{\r\n               \"enabled\":null,\r\n               \"storageUri\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--boot-diagnostics <bootDiagnostics>", $("Set the boot-diagnostics value.")).execute(function __67(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__67", line: 5833 }; return __func(_, this, arguments, __67, 1, __frame, function __$__67() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__67() { return (function __$__67(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__67() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/diagnosticsProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "bootDiagnostics");
          if (options.bootDiagnostics) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.bootDiagnostics));
            cli.output.verbose("================================================");
            if ((options.parse && options.bootDiagnostics)) {
              options.bootDiagnostics = JSON.parse(options.bootDiagnostics); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.bootDiagnostics },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile1DP1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesDiagnosticsProfile1DP1 = catparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile1DP1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile1DP1 = parametersCreateOrUpdateVirtualMachinesDiagnosticsProfile1DP1.category("diagnostics-profile").description($("Commands to configure diagnostics-profile of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesDiagnosticsProfile1DP1.command("delete").description($("Remove diagnostics-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"diagnosticsProfile\" : {\r\n             \"bootDiagnostics\":{\r\n               \"enabled\":null,\r\n               \"storageUri\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--boot-diagnostics", $("Remove the boot-diagnostics value.")).execute(function __68(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__68", line: 5885 }; return __func(_, this, arguments, __68, 1, __frame, function __$__68() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__68() { return (function __$__68(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__68() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/diagnosticsProfile";
          anySubItem = (false || options.bootDiagnostics);
          if (anySubItem) {
            subItemPath = null;
            if (options.bootDiagnostics) {
              subItemPath = (options.path + "/bootDiagnostics");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesBootDiagnostics0DPbD1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesBootDiagnostics0DPbD1 = catparametersCreateOrUpdateVirtualMachinesBootDiagnostics0DPbD1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesBootDiagnostics0DPbD1 = parametersCreateOrUpdateVirtualMachinesBootDiagnostics0DPbD1.category("boot-diagnostics").description($("Commands to configure boot-diagnostics of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesBootDiagnostics0DPbD1.command("set").description($("Set boot-diagnostics in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"bootDiagnostics\" : {\r\n             \"enabled\":null,\r\n             \"storageUri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--enabled <enabled>", $("Set the enabled value.")).option("--storage-uri <storageUri>", $("Set the storage-uri value.")).execute(function __69(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__69", line: 5935 }; return __func(_, this, arguments, __69, 1, __frame, function __$__69() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__69() { return (function __$__69(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__69() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/diagnosticsProfile/bootDiagnostics";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "enabled");
          if (options.enabled) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.enabled));
            cli.output.verbose("================================================");
            if ((options.parse && options.enabled)) {
              options.enabled = JSON.parse(options.enabled); } ;

            options.enabled = JSON.parse(options.enabled);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.enabled },]); } ;

          paramPath = ((options.path + "/") + "storageUri");
          if (options.storageUri) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageUri));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageUri)) {
              options.storageUri = JSON.parse(options.storageUri); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageUri },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesBootDiagnostics1DPbD1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesBootDiagnostics1DPbD1 = catparametersCreateOrUpdateVirtualMachinesBootDiagnostics1DPbD1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesBootDiagnostics1DPbD1 = parametersCreateOrUpdateVirtualMachinesBootDiagnostics1DPbD1.category("boot-diagnostics").description($("Commands to configure boot-diagnostics of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesBootDiagnostics1DPbD1.command("delete").description($("Remove boot-diagnostics in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"bootDiagnostics\" : {\r\n             \"enabled\":null,\r\n             \"storageUri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--enabled", $("Remove the enabled value.")).option("--storage-uri", $("Remove the storage-uri value.")).execute(function __70(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__70", line: 6000 }; return __func(_, this, arguments, __70, 1, __frame, function __$__70() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__70() { return (function __$__70(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__70() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/diagnosticsProfile/bootDiagnostics";
          anySubItem = ((false || options.enabled) || options.storageUri);
          if (anySubItem) {
            subItemPath = null;
            if (options.enabled) {
              subItemPath = (options.path + "/enabled");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.storageUri) {
              subItemPath = (options.path + "/storageUri");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesAvailabilitySet0AS1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesAvailabilitySet0AS1 = catparametersCreateOrUpdateVirtualMachinesAvailabilitySet0AS1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesAvailabilitySet0AS1 = parametersCreateOrUpdateVirtualMachinesAvailabilitySet0AS1.category("availability-set").description($("Commands to configure availability-set of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesAvailabilitySet0AS1.command("set").description($("Set availability-set in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"availabilitySet\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __71(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__71", line: 6053 }; return __func(_, this, arguments, __71, 1, __frame, function __$__71() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__71() { return (function __$__71(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__71() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/availabilitySet";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesAvailabilitySet1AS1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesAvailabilitySet1AS1 = catparametersCreateOrUpdateVirtualMachinesAvailabilitySet1AS1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesAvailabilitySet1AS1 = parametersCreateOrUpdateVirtualMachinesAvailabilitySet1AS1.category("availability-set").description($("Commands to configure availability-set of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesAvailabilitySet1AS1.command("delete").description($("Remove availability-set in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"availabilitySet\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--id", $("Remove the id value.")).execute(function __72(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__72", line: 6105 }; return __func(_, this, arguments, __72, 1, __frame, function __$__72() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__72() { return (function __$__72(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__72() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/availabilitySet";
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesInstanceView0IV1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesInstanceView0IV1 = catparametersCreateOrUpdateVirtualMachinesInstanceView0IV1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesInstanceView0IV1 = parametersCreateOrUpdateVirtualMachinesInstanceView0IV1.category("instance-view").description($("Commands to configure instance-view of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesInstanceView0IV1.command("set").description($("Set instance-view in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"instanceView\" : {\r\n             \"platformUpdateDomain\":null,\r\n             \"platformFaultDomain\":null,\r\n             \"rdpThumbPrint\":\"\",\r\n             \"vmAgent\":{\r\n               \"vmAgentVersion\":\"\",\r\n               \"extensionHandlers\":[\r\n                 {\r\n                   \"type\":\"\",\r\n                   \"typeHandlerVersion\":\"\",\r\n                   \"status\":{\r\n                     \"code\":\"\",\r\n                     \"level\":null,\r\n                     \"displayStatus\":\"\",\r\n                     \"message\":\"\",\r\n                     \"time\":null\r\n                   }\r\n                 }\r\n               ],\r\n               \"statuses\":[\r\n                 {\r\n                   \"code\":\"\",\r\n                   \"level\":null,\r\n                   \"displayStatus\":\"\",\r\n                   \"message\":\"\",\r\n                   \"time\":null\r\n                 }\r\n               ]\r\n             },\r\n             \"maintenanceRedeployStatus\":{\r\n               \"isCustomerInitiatedMaintenanceAllowed\":null,\r\n               \"preMaintenanceWindowStartTime\":null,\r\n               \"preMaintenanceWindowEndTime\":null,\r\n               \"maintenanceWindowStartTime\":null,\r\n               \"maintenanceWindowEndTime\":null,\r\n               \"lastOperationResultCode\":null,\r\n               \"lastOperationMessage\":\"\"\r\n             },\r\n             \"disks\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"encryptionSettings\":[\r\n                   {\r\n                     \"diskEncryptionKey\":{\r\n                       \"secretUrl\":\"\",\r\n                       \"sourceVault\":{\r\n                         \"id\":\"\"\r\n                       }\r\n                     },\r\n                     \"keyEncryptionKey\":{\r\n                       \"keyUrl\":\"\",\r\n                       \"sourceVault\":{\r\n                         \"id\":\"\"\r\n                       }\r\n                     },\r\n                     \"enabled\":null\r\n                   }\r\n                 ],\r\n                 \"statuses\":[\r\n                   {\r\n                     \"code\":\"\",\r\n                     \"level\":null,\r\n                     \"displayStatus\":\"\",\r\n                     \"message\":\"\",\r\n                     \"time\":null\r\n                   }\r\n                 ]\r\n               }\r\n             ],\r\n             \"extensions\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"type\":\"\",\r\n                 \"typeHandlerVersion\":\"\",\r\n                 \"substatuses\":[\r\n                   {\r\n                     \"code\":\"\",\r\n                     \"level\":null,\r\n                     \"displayStatus\":\"\",\r\n                     \"message\":\"\",\r\n                     \"time\":null\r\n                   }\r\n                 ],\r\n                 \"statuses\":[\r\n                   {\r\n                     \"code\":\"\",\r\n                     \"level\":null,\r\n                     \"displayStatus\":\"\",\r\n                     \"message\":\"\",\r\n                     \"time\":null\r\n                   }\r\n                 ]\r\n               }\r\n             ],\r\n             \"bootDiagnostics\":{\r\n               \"consoleScreenshotBlobUri\":\"\",\r\n               \"serialConsoleLogBlobUri\":\"\"\r\n             },\r\n             \"statuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--platform-update-domain <platformUpdateDomain>", $("Set the platform-update-domain value.")).option("--platform-fault-domain <platformFaultDomain>", $("Set the platform-fault-domain value.")).option("--rdp-thumb-print <rdpThumbPrint>", $("Set the rdp-thumb-print value.")).option("--vm-agent <vmAgent>", $("Set the vm-agent value.")).option("--maintenance-redeploy-status <maintenanceRedeployStatus>", $("Set the maintenance-redeploy-status value.")).option("--disks <disks>", $("Set the disks value.")).option("--extensions <extensions>", $("Set the extensions value.")).option("--boot-diagnostics <bootDiagnostics>", $("Set the boot-diagnostics value.")).option("--statuses <statuses>", $("Set the statuses value.")).execute(function __73(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__73", line: 6162 }; return __func(_, this, arguments, __73, 1, __frame, function __$__73() {














      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__73() { return (function __$__73(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__73() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/instanceView";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "platformUpdateDomain");
          if (options.platformUpdateDomain) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.platformUpdateDomain));
            cli.output.verbose("================================================");
            if ((options.parse && options.platformUpdateDomain)) {
              options.platformUpdateDomain = JSON.parse(options.platformUpdateDomain); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.platformUpdateDomain },]); } ;

          paramPath = ((options.path + "/") + "platformFaultDomain");
          if (options.platformFaultDomain) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.platformFaultDomain));
            cli.output.verbose("================================================");
            if ((options.parse && options.platformFaultDomain)) {
              options.platformFaultDomain = JSON.parse(options.platformFaultDomain); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.platformFaultDomain },]); } ;

          paramPath = ((options.path + "/") + "rdpThumbPrint");
          if (options.rdpThumbPrint) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.rdpThumbPrint));
            cli.output.verbose("================================================");
            if ((options.parse && options.rdpThumbPrint)) {
              options.rdpThumbPrint = JSON.parse(options.rdpThumbPrint); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.rdpThumbPrint },]); } ;

          paramPath = ((options.path + "/") + "vmAgent");
          if (options.vmAgent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.vmAgent));
            cli.output.verbose("================================================");
            if ((options.parse && options.vmAgent)) {
              options.vmAgent = JSON.parse(options.vmAgent); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.vmAgent },]); } ;

          paramPath = ((options.path + "/") + "maintenanceRedeployStatus");
          if (options.maintenanceRedeployStatus) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.maintenanceRedeployStatus));
            cli.output.verbose("================================================");
            if ((options.parse && options.maintenanceRedeployStatus)) {
              options.maintenanceRedeployStatus = JSON.parse(options.maintenanceRedeployStatus); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.maintenanceRedeployStatus },]); } ;

          paramPath = ((options.path + "/") + "disks");
          if (options.disks) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.disks));
            cli.output.verbose("================================================");
            if ((options.parse && options.disks)) {
              options.disks = JSON.parse(options.disks); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.disks },]); } ;

          paramPath = ((options.path + "/") + "extensions");
          if (options.extensions) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.extensions));
            cli.output.verbose("================================================");
            if ((options.parse && options.extensions)) {
              options.extensions = JSON.parse(options.extensions); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.extensions },]); } ;

          paramPath = ((options.path + "/") + "bootDiagnostics");
          if (options.bootDiagnostics) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.bootDiagnostics));
            cli.output.verbose("================================================");
            if ((options.parse && options.bootDiagnostics)) {
              options.bootDiagnostics = JSON.parse(options.bootDiagnostics); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.bootDiagnostics },]); } ;

          paramPath = ((options.path + "/") + "statuses");
          if (options.statuses) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.statuses));
            cli.output.verbose("================================================");
            if ((options.parse && options.statuses)) {
              options.statuses = JSON.parse(options.statuses); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.statuses },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesInstanceView1IV1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesInstanceView1IV1 = catparametersCreateOrUpdateVirtualMachinesInstanceView1IV1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesInstanceView1IV1 = parametersCreateOrUpdateVirtualMachinesInstanceView1IV1.category("instance-view").description($("Commands to configure instance-view of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesInstanceView1IV1.command("delete").description($("Remove instance-view in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"instanceView\" : {\r\n             \"platformUpdateDomain\":null,\r\n             \"platformFaultDomain\":null,\r\n             \"rdpThumbPrint\":\"\",\r\n             \"vmAgent\":{\r\n               \"vmAgentVersion\":\"\",\r\n               \"extensionHandlers\":[\r\n                 {\r\n                   \"type\":\"\",\r\n                   \"typeHandlerVersion\":\"\",\r\n                   \"status\":{\r\n                     \"code\":\"\",\r\n                     \"level\":null,\r\n                     \"displayStatus\":\"\",\r\n                     \"message\":\"\",\r\n                     \"time\":null\r\n                   }\r\n                 }\r\n               ],\r\n               \"statuses\":[\r\n                 {\r\n                   \"code\":\"\",\r\n                   \"level\":null,\r\n                   \"displayStatus\":\"\",\r\n                   \"message\":\"\",\r\n                   \"time\":null\r\n                 }\r\n               ]\r\n             },\r\n             \"maintenanceRedeployStatus\":{\r\n               \"isCustomerInitiatedMaintenanceAllowed\":null,\r\n               \"preMaintenanceWindowStartTime\":null,\r\n               \"preMaintenanceWindowEndTime\":null,\r\n               \"maintenanceWindowStartTime\":null,\r\n               \"maintenanceWindowEndTime\":null,\r\n               \"lastOperationResultCode\":null,\r\n               \"lastOperationMessage\":\"\"\r\n             },\r\n             \"disks\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"encryptionSettings\":[\r\n                   {\r\n                     \"diskEncryptionKey\":{\r\n                       \"secretUrl\":\"\",\r\n                       \"sourceVault\":{\r\n                         \"id\":\"\"\r\n                       }\r\n                     },\r\n                     \"keyEncryptionKey\":{\r\n                       \"keyUrl\":\"\",\r\n                       \"sourceVault\":{\r\n                         \"id\":\"\"\r\n                       }\r\n                     },\r\n                     \"enabled\":null\r\n                   }\r\n                 ],\r\n                 \"statuses\":[\r\n                   {\r\n                     \"code\":\"\",\r\n                     \"level\":null,\r\n                     \"displayStatus\":\"\",\r\n                     \"message\":\"\",\r\n                     \"time\":null\r\n                   }\r\n                 ]\r\n               }\r\n             ],\r\n             \"extensions\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"type\":\"\",\r\n                 \"typeHandlerVersion\":\"\",\r\n                 \"substatuses\":[\r\n                   {\r\n                     \"code\":\"\",\r\n                     \"level\":null,\r\n                     \"displayStatus\":\"\",\r\n                     \"message\":\"\",\r\n                     \"time\":null\r\n                   }\r\n                 ],\r\n                 \"statuses\":[\r\n                   {\r\n                     \"code\":\"\",\r\n                     \"level\":null,\r\n                     \"displayStatus\":\"\",\r\n                     \"message\":\"\",\r\n                     \"time\":null\r\n                   }\r\n                 ]\r\n               }\r\n             ],\r\n             \"bootDiagnostics\":{\r\n               \"consoleScreenshotBlobUri\":\"\",\r\n               \"serialConsoleLogBlobUri\":\"\"\r\n             },\r\n             \"statuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--platform-update-domain", $("Remove the platform-update-domain value.")).option("--platform-fault-domain", $("Remove the platform-fault-domain value.")).option("--rdp-thumb-print", $("Remove the rdp-thumb-print value.")).option("--vm-agent", $("Remove the vm-agent value.")).option("--maintenance-redeploy-status", $("Remove the maintenance-redeploy-status value.")).option("--disks", $("Remove the disks value.")).option("--extensions", $("Remove the extensions value.")).option("--boot-diagnostics", $("Remove the boot-diagnostics value.")).option("--statuses", $("Remove the statuses value.")).execute(function __74(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__74", line: 6310 }; return __func(_, this, arguments, __74, 1, __frame, function __$__74() {













      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__74() { return (function __$__74(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__74() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/instanceView";
          anySubItem = (((((((((false || options.platformUpdateDomain) || options.platformFaultDomain) || options.rdpThumbPrint) || options.vmAgent) || options.maintenanceRedeployStatus) || options.disks) || options.extensions) || options.bootDiagnostics) || options.statuses);
          if (anySubItem) {
            subItemPath = null;
            if (options.platformUpdateDomain) {
              subItemPath = (options.path + "/platformUpdateDomain");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.platformFaultDomain) {
              subItemPath = (options.path + "/platformFaultDomain");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.rdpThumbPrint) {
              subItemPath = (options.path + "/rdpThumbPrint");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.vmAgent) {
              subItemPath = (options.path + "/vmAgent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.maintenanceRedeployStatus) {
              subItemPath = (options.path + "/maintenanceRedeployStatus");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.disks) {
              subItemPath = (options.path + "/disks");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.extensions) {
              subItemPath = (options.path + "/extensions");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.bootDiagnostics) {
              subItemPath = (options.path + "/bootDiagnostics");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.statuses) {
              subItemPath = (options.path + "/statuses");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesVmAgent0IVvA1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesVmAgent0IVvA1 = catparametersCreateOrUpdateVirtualMachinesVmAgent0IVvA1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesVmAgent0IVvA1 = parametersCreateOrUpdateVirtualMachinesVmAgent0IVvA1.category("vm-agent").description($("Commands to configure vm-agent of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesVmAgent0IVvA1.command("set").description($("Set vm-agent in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"vmAgent\" : {\r\n             \"vmAgentVersion\":\"\",\r\n             \"extensionHandlers\":[\r\n               {\r\n                 \"type\":\"\",\r\n                 \"typeHandlerVersion\":\"\",\r\n                 \"status\":{\r\n                   \"code\":\"\",\r\n                   \"level\":null,\r\n                   \"displayStatus\":\"\",\r\n                   \"message\":\"\",\r\n                   \"time\":null\r\n                 }\r\n               }\r\n             ],\r\n             \"statuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--vm-agent-version <vmAgentVersion>", $("Set the vm-agent-version value.")).option("--extension-handlers <extensionHandlers>", $("Set the extension-handlers value.")).option("--statuses <statuses>", $("Set the statuses value.")).execute(function __75(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__75", line: 6393 }; return __func(_, this, arguments, __75, 1, __frame, function __$__75() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__75() { return (function __$__75(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__75() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/instanceView/vmAgent";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "vmAgentVersion");
          if (options.vmAgentVersion) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.vmAgentVersion));
            cli.output.verbose("================================================");
            if ((options.parse && options.vmAgentVersion)) {
              options.vmAgentVersion = JSON.parse(options.vmAgentVersion); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.vmAgentVersion },]); } ;

          paramPath = ((options.path + "/") + "extensionHandlers");
          if (options.extensionHandlers) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.extensionHandlers));
            cli.output.verbose("================================================");
            if ((options.parse && options.extensionHandlers)) {
              options.extensionHandlers = JSON.parse(options.extensionHandlers); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.extensionHandlers },]); } ;

          paramPath = ((options.path + "/") + "statuses");
          if (options.statuses) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.statuses));
            cli.output.verbose("================================================");
            if ((options.parse && options.statuses)) {
              options.statuses = JSON.parse(options.statuses); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.statuses },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesVmAgent1IVvA1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesVmAgent1IVvA1 = catparametersCreateOrUpdateVirtualMachinesVmAgent1IVvA1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesVmAgent1IVvA1 = parametersCreateOrUpdateVirtualMachinesVmAgent1IVvA1.category("vm-agent").description($("Commands to configure vm-agent of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesVmAgent1IVvA1.command("delete").description($("Remove vm-agent in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"vmAgent\" : {\r\n             \"vmAgentVersion\":\"\",\r\n             \"extensionHandlers\":[\r\n               {\r\n                 \"type\":\"\",\r\n                 \"typeHandlerVersion\":\"\",\r\n                 \"status\":{\r\n                   \"code\":\"\",\r\n                   \"level\":null,\r\n                   \"displayStatus\":\"\",\r\n                   \"message\":\"\",\r\n                   \"time\":null\r\n                 }\r\n               }\r\n             ],\r\n             \"statuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--vm-agent-version", $("Remove the vm-agent-version value.")).option("--extension-handlers", $("Remove the extension-handlers value.")).option("--statuses", $("Remove the statuses value.")).execute(function __76(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__76", line: 6469 }; return __func(_, this, arguments, __76, 1, __frame, function __$__76() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__76() { return (function __$__76(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__76() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/instanceView/vmAgent";
          anySubItem = (((false || options.vmAgentVersion) || options.extensionHandlers) || options.statuses);
          if (anySubItem) {
            subItemPath = null;
            if (options.vmAgentVersion) {
              subItemPath = (options.path + "/vmAgentVersion");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.extensionHandlers) {
              subItemPath = (options.path + "/extensionHandlers");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.statuses) {
              subItemPath = (options.path + "/statuses");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesExtensionHandlers0IVvAeH1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesExtensionHandlers0IVvAeH1 = catparametersCreateOrUpdateVirtualMachinesExtensionHandlers0IVvAeH1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesExtensionHandlers0IVvAeH1 = parametersCreateOrUpdateVirtualMachinesExtensionHandlers0IVvAeH1.category("extension-handlers").description($("Commands to configure extension-handlers of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesExtensionHandlers0IVvAeH1.command("set").description($("Set extension-handlers in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"extensionHandlers\" : {\r\n             \"type\":\"\",\r\n             \"typeHandlerVersion\":\"\",\r\n             \"status\":{\r\n               \"code\":\"\",\r\n               \"level\":null,\r\n               \"displayStatus\":\"\",\r\n               \"message\":\"\",\r\n               \"time\":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--type <type>", $("Set the type value.")).option("--type-handler-version <typeHandlerVersion>", $("Set the type-handler-version value.")).option("--status <status>", $("Set the status value.")).execute(function __77(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__77", line: 6530 }; return __func(_, this, arguments, __77, 1, __frame, function __$__77() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__77() { return (function __$__77(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__77() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/instanceView/vmAgent/extensionHandlers" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "type");
          if (options.type) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.type));
            cli.output.verbose("================================================");
            if ((options.parse && options.type)) {
              options.type = JSON.parse(options.type); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.type },]); } ;

          paramPath = ((options.path + "/") + "typeHandlerVersion");
          if (options.typeHandlerVersion) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.typeHandlerVersion));
            cli.output.verbose("================================================");
            if ((options.parse && options.typeHandlerVersion)) {
              options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.typeHandlerVersion },]); } ;

          paramPath = ((options.path + "/") + "status");
          if (options.status) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.status));
            cli.output.verbose("================================================");
            if ((options.parse && options.status)) {
              options.status = JSON.parse(options.status); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.status },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesExtensionHandlers1IVvAeH1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesExtensionHandlers1IVvAeH1 = catparametersCreateOrUpdateVirtualMachinesExtensionHandlers1IVvAeH1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesExtensionHandlers1IVvAeH1 = parametersCreateOrUpdateVirtualMachinesExtensionHandlers1IVvAeH1.category("extension-handlers").description($("Commands to configure extension-handlers of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesExtensionHandlers1IVvAeH1.command("delete").description($("Remove extension-handlers in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"extensionHandlers\" : {\r\n             \"type\":\"\",\r\n             \"typeHandlerVersion\":\"\",\r\n             \"status\":{\r\n               \"code\":\"\",\r\n               \"level\":null,\r\n               \"displayStatus\":\"\",\r\n               \"message\":\"\",\r\n               \"time\":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--type", $("Remove the type value.")).option("--type-handler-version", $("Remove the type-handler-version value.")).option("--status", $("Remove the status value.")).execute(function __78(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__78", line: 6611 }; return __func(_, this, arguments, __78, 1, __frame, function __$__78() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__78() { return (function __$__78(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__78() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/instanceView/vmAgent/extensionHandlers" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((false || options.type) || options.typeHandlerVersion) || options.status);
          if (anySubItem) {
            subItemPath = null;
            if (options.type) {
              subItemPath = (options.path + "/type");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.typeHandlerVersion) {
              subItemPath = (options.path + "/typeHandlerVersion");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.status) {
              subItemPath = (options.path + "/status");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesStatus0IVvAeHHIs1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStatus0IVvAeHHIs1 = catparametersCreateOrUpdateVirtualMachinesStatus0IVvAeHHIs1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesStatus0IVvAeHHIs1 = parametersCreateOrUpdateVirtualMachinesStatus0IVvAeHHIs1.category("status").description($("Commands to configure status of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesStatus0IVvAeHHIs1.command("set").description($("Set status in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"status\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--extension-handlers-index <extension-handlers-index>", $("Indexer: extension-handlers-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--code <code>", $("Set the code value.")).option("--level <level>", $("Set the level value.")).option("--display-status <displayStatus>", $("Set the display-status value.")).option("--message <message>", $("Set the message value.")).option("--time <time>", $("Set the time value.")).execute(function __79(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__79", line: 6673 }; return __func(_, this, arguments, __79, 1, __frame, function __$__79() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__79() { return (function __$__79(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__79() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/instanceView/vmAgent/extensionHandlers/" + options.extensionHandlersIndex) + "/status");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "code");
          if (options.code) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.code));
            cli.output.verbose("================================================");
            if ((options.parse && options.code)) {
              options.code = JSON.parse(options.code); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.code },]); } ;

          paramPath = ((options.path + "/") + "level");
          if (options.level) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.level));
            cli.output.verbose("================================================");
            if ((options.parse && options.level)) {
              options.level = JSON.parse(options.level); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.level },]); } ;

          paramPath = ((options.path + "/") + "displayStatus");
          if (options.displayStatus) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.displayStatus));
            cli.output.verbose("================================================");
            if ((options.parse && options.displayStatus)) {
              options.displayStatus = JSON.parse(options.displayStatus); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.displayStatus },]); } ;

          paramPath = ((options.path + "/") + "message");
          if (options.message) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.message));
            cli.output.verbose("================================================");
            if ((options.parse && options.message)) {
              options.message = JSON.parse(options.message); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.message },]); } ;

          paramPath = ((options.path + "/") + "time");
          if (options.time) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.time));
            cli.output.verbose("================================================");
            if ((options.parse && options.time)) {
              options.time = JSON.parse(options.time); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.time },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesStatus1IVvAeHHIs1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStatus1IVvAeHHIs1 = catparametersCreateOrUpdateVirtualMachinesStatus1IVvAeHHIs1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesStatus1IVvAeHHIs1 = parametersCreateOrUpdateVirtualMachinesStatus1IVvAeHHIs1.category("status").description($("Commands to configure status of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesStatus1IVvAeHHIs1.command("delete").description($("Remove status in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"status\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--extension-handlers-index <extension-handlers-index>", $("Indexer: extension-handlers-index.")).option("--code", $("Remove the code value.")).option("--level", $("Remove the level value.")).option("--display-status", $("Remove the display-status value.")).option("--message", $("Remove the message value.")).option("--time", $("Remove the time value.")).execute(function __80(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__80", line: 6774 }; return __func(_, this, arguments, __80, 1, __frame, function __$__80() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__80() { return (function __$__80(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__80() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/instanceView/vmAgent/extensionHandlers/" + options.extensionHandlersIndex) + "/status");
          anySubItem = (((((false || options.code) || options.level) || options.displayStatus) || options.message) || options.time);
          if (anySubItem) {
            subItemPath = null;
            if (options.code) {
              subItemPath = (options.path + "/code");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.level) {
              subItemPath = (options.path + "/level");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.displayStatus) {
              subItemPath = (options.path + "/displayStatus");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.message) {
              subItemPath = (options.path + "/message");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.time) {
              subItemPath = (options.path + "/time");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesStatuses0IVvAs2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStatuses0IVvAs2 = catparametersCreateOrUpdateVirtualMachinesStatuses0IVvAs2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesStatuses0IVvAs2 = parametersCreateOrUpdateVirtualMachinesStatuses0IVvAs2.category("statuses").description($("Commands to configure statuses of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesStatuses0IVvAs2.command("set").description($("Set statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"statuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--code <code>", $("Set the code value.")).option("--level <level>", $("Set the level value.")).option("--display-status <displayStatus>", $("Set the display-status value.")).option("--message <message>", $("Set the message value.")).option("--time <time>", $("Set the time value.")).execute(function __81(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__81", line: 6845 }; return __func(_, this, arguments, __81, 1, __frame, function __$__81() {












      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__81() { return (function __$__81(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__81() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/instanceView/vmAgent/statuses" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "code");
          if (options.code) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.code));
            cli.output.verbose("================================================");
            if ((options.parse && options.code)) {
              options.code = JSON.parse(options.code); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.code },]); } ;

          paramPath = ((options.path + "/") + "level");
          if (options.level) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.level));
            cli.output.verbose("================================================");
            if ((options.parse && options.level)) {
              options.level = JSON.parse(options.level); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.level },]); } ;

          paramPath = ((options.path + "/") + "displayStatus");
          if (options.displayStatus) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.displayStatus));
            cli.output.verbose("================================================");
            if ((options.parse && options.displayStatus)) {
              options.displayStatus = JSON.parse(options.displayStatus); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.displayStatus },]); } ;

          paramPath = ((options.path + "/") + "message");
          if (options.message) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.message));
            cli.output.verbose("================================================");
            if ((options.parse && options.message)) {
              options.message = JSON.parse(options.message); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.message },]); } ;

          paramPath = ((options.path + "/") + "time");
          if (options.time) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.time));
            cli.output.verbose("================================================");
            if ((options.parse && options.time)) {
              options.time = JSON.parse(options.time); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.time },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesStatuses1IVvAs2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStatuses1IVvAs2 = catparametersCreateOrUpdateVirtualMachinesStatuses1IVvAs2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVvAs2 = parametersCreateOrUpdateVirtualMachinesStatuses1IVvAs2.category("statuses").description($("Commands to configure statuses of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVvAs2.command("delete").description($("Remove statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"statuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--code", $("Remove the code value.")).option("--level", $("Remove the level value.")).option("--display-status", $("Remove the display-status value.")).option("--message", $("Remove the message value.")).option("--time", $("Remove the time value.")).execute(function __82(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__82", line: 6950 }; return __func(_, this, arguments, __82, 1, __frame, function __$__82() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__82() { return (function __$__82(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__82() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/instanceView/vmAgent/statuses" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((((false || options.code) || options.level) || options.displayStatus) || options.message) || options.time);
          if (anySubItem) {
            subItemPath = null;
            if (options.code) {
              subItemPath = (options.path + "/code");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.level) {
              subItemPath = (options.path + "/level");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.displayStatus) {
              subItemPath = (options.path + "/displayStatus");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.message) {
              subItemPath = (options.path + "/message");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.time) {
              subItemPath = (options.path + "/time");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus0IVmRS1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus0IVmRS1 = catparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus0IVmRS1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus0IVmRS1 = parametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus0IVmRS1.category("maintenance-redeploy-status").description($("Commands to configure maintenance-redeploy-status of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus0IVmRS1.command("set").description($("Set maintenance-redeploy-status in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"maintenanceRedeployStatus\" : {\r\n             \"isCustomerInitiatedMaintenanceAllowed\":null,\r\n             \"preMaintenanceWindowStartTime\":null,\r\n             \"preMaintenanceWindowEndTime\":null,\r\n             \"maintenanceWindowStartTime\":null,\r\n             \"maintenanceWindowEndTime\":null,\r\n             \"lastOperationResultCode\":null,\r\n             \"lastOperationMessage\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--is-customer-initiated-maintenance-allowed <isCustomerInitiatedMaintenanceAllowed>", $("Set the is-customer-initiated-maintenance-allowed value.")).option("--pre-maintenance-window-start-time <preMaintenanceWindowStartTime>", $("Set the pre-maintenance-window-start-time value.")).option("--pre-maintenance-window-end-time <preMaintenanceWindowEndTime>", $("Set the pre-maintenance-window-end-time value.")).option("--maintenance-window-start-time <maintenanceWindowStartTime>", $("Set the maintenance-window-start-time value.")).option("--maintenance-window-end-time <maintenanceWindowEndTime>", $("Set the maintenance-window-end-time value.")).option("--last-operation-result-code <lastOperationResultCode>", $("Set the last-operation-result-code value.")).option("--last-operation-message <lastOperationMessage>", $("Set the last-operation-message value.")).execute(function __83(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__83", line: 7021 }; return __func(_, this, arguments, __83, 1, __frame, function __$__83() {












      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__83() { return (function __$__83(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__83() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/instanceView/maintenanceRedeployStatus";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "isCustomerInitiatedMaintenanceAllowed");
          if (options.isCustomerInitiatedMaintenanceAllowed) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.isCustomerInitiatedMaintenanceAllowed));
            cli.output.verbose("================================================");
            if ((options.parse && options.isCustomerInitiatedMaintenanceAllowed)) {
              options.isCustomerInitiatedMaintenanceAllowed = JSON.parse(options.isCustomerInitiatedMaintenanceAllowed); } ;

            options.isCustomerInitiatedMaintenanceAllowed = JSON.parse(options.isCustomerInitiatedMaintenanceAllowed);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.isCustomerInitiatedMaintenanceAllowed },]); } ;

          paramPath = ((options.path + "/") + "preMaintenanceWindowStartTime");
          if (options.preMaintenanceWindowStartTime) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.preMaintenanceWindowStartTime));
            cli.output.verbose("================================================");
            if ((options.parse && options.preMaintenanceWindowStartTime)) {
              options.preMaintenanceWindowStartTime = JSON.parse(options.preMaintenanceWindowStartTime); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.preMaintenanceWindowStartTime },]); } ;

          paramPath = ((options.path + "/") + "preMaintenanceWindowEndTime");
          if (options.preMaintenanceWindowEndTime) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.preMaintenanceWindowEndTime));
            cli.output.verbose("================================================");
            if ((options.parse && options.preMaintenanceWindowEndTime)) {
              options.preMaintenanceWindowEndTime = JSON.parse(options.preMaintenanceWindowEndTime); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.preMaintenanceWindowEndTime },]); } ;

          paramPath = ((options.path + "/") + "maintenanceWindowStartTime");
          if (options.maintenanceWindowStartTime) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.maintenanceWindowStartTime));
            cli.output.verbose("================================================");
            if ((options.parse && options.maintenanceWindowStartTime)) {
              options.maintenanceWindowStartTime = JSON.parse(options.maintenanceWindowStartTime); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.maintenanceWindowStartTime },]); } ;

          paramPath = ((options.path + "/") + "maintenanceWindowEndTime");
          if (options.maintenanceWindowEndTime) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.maintenanceWindowEndTime));
            cli.output.verbose("================================================");
            if ((options.parse && options.maintenanceWindowEndTime)) {
              options.maintenanceWindowEndTime = JSON.parse(options.maintenanceWindowEndTime); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.maintenanceWindowEndTime },]); } ;

          paramPath = ((options.path + "/") + "lastOperationResultCode");
          if (options.lastOperationResultCode) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.lastOperationResultCode));
            cli.output.verbose("================================================");
            if ((options.parse && options.lastOperationResultCode)) {
              options.lastOperationResultCode = JSON.parse(options.lastOperationResultCode); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.lastOperationResultCode },]); } ;

          paramPath = ((options.path + "/") + "lastOperationMessage");
          if (options.lastOperationMessage) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.lastOperationMessage));
            cli.output.verbose("================================================");
            if ((options.parse && options.lastOperationMessage)) {
              options.lastOperationMessage = JSON.parse(options.lastOperationMessage); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.lastOperationMessage },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus1IVmRS1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus1IVmRS1 = catparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus1IVmRS1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus1IVmRS1 = parametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus1IVmRS1.category("maintenance-redeploy-status").description($("Commands to configure maintenance-redeploy-status of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesMaintenanceRedeployStatus1IVmRS1.command("delete").description($("Remove maintenance-redeploy-status in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"maintenanceRedeployStatus\" : {\r\n             \"isCustomerInitiatedMaintenanceAllowed\":null,\r\n             \"preMaintenanceWindowStartTime\":null,\r\n             \"preMaintenanceWindowEndTime\":null,\r\n             \"maintenanceWindowStartTime\":null,\r\n             \"maintenanceWindowEndTime\":null,\r\n             \"lastOperationResultCode\":null,\r\n             \"lastOperationMessage\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--is-customer-initiated-maintenance-allowed", $("Remove the is-customer-initiated-maintenance-allowed value.")).option("--pre-maintenance-window-start-time", $("Remove the pre-maintenance-window-start-time value.")).option("--pre-maintenance-window-end-time", $("Remove the pre-maintenance-window-end-time value.")).option("--maintenance-window-start-time", $("Remove the maintenance-window-start-time value.")).option("--maintenance-window-end-time", $("Remove the maintenance-window-end-time value.")).option("--last-operation-result-code", $("Remove the last-operation-result-code value.")).option("--last-operation-message", $("Remove the last-operation-message value.")).execute(function __84(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__84", line: 7146 }; return __func(_, this, arguments, __84, 1, __frame, function __$__84() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__84() { return (function __$__84(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__84() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/instanceView/maintenanceRedeployStatus";
          anySubItem = (((((((false || options.isCustomerInitiatedMaintenanceAllowed) || options.preMaintenanceWindowStartTime) || options.preMaintenanceWindowEndTime) || options.maintenanceWindowStartTime) || options.maintenanceWindowEndTime) || options.lastOperationResultCode) || options.lastOperationMessage);
          if (anySubItem) {
            subItemPath = null;
            if (options.isCustomerInitiatedMaintenanceAllowed) {
              subItemPath = (options.path + "/isCustomerInitiatedMaintenanceAllowed");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.preMaintenanceWindowStartTime) {
              subItemPath = (options.path + "/preMaintenanceWindowStartTime");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.preMaintenanceWindowEndTime) {
              subItemPath = (options.path + "/preMaintenanceWindowEndTime");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.maintenanceWindowStartTime) {
              subItemPath = (options.path + "/maintenanceWindowStartTime");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.maintenanceWindowEndTime) {
              subItemPath = (options.path + "/maintenanceWindowEndTime");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.lastOperationResultCode) {
              subItemPath = (options.path + "/lastOperationResultCode");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.lastOperationMessage) {
              subItemPath = (options.path + "/lastOperationMessage");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesDisks0IVd1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesDisks0IVd1 = catparametersCreateOrUpdateVirtualMachinesDisks0IVd1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesDisks0IVd1 = parametersCreateOrUpdateVirtualMachinesDisks0IVd1.category("disks").description($("Commands to configure disks of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesDisks0IVd1.command("set").description($("Set disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"disks\" : {\r\n             \"name\":\"\",\r\n             \"encryptionSettings\":[\r\n               {\r\n                 \"diskEncryptionKey\":{\r\n                   \"secretUrl\":\"\",\r\n                   \"sourceVault\":{\r\n                     \"id\":\"\"\r\n                   }\r\n                 },\r\n                 \"keyEncryptionKey\":{\r\n                   \"keyUrl\":\"\",\r\n                   \"sourceVault\":{\r\n                     \"id\":\"\"\r\n                   }\r\n                 },\r\n                 \"enabled\":null\r\n               }\r\n             ],\r\n             \"statuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--encryption-settings <encryptionSettings>", $("Set the encryption-settings value.")).option("--statuses <statuses>", $("Set the statuses value.")).execute(function __85(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__85", line: 7223 }; return __func(_, this, arguments, __85, 1, __frame, function __$__85() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__85() { return (function __$__85(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__85() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/instanceView/disks" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "encryptionSettings");
          if (options.encryptionSettings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.encryptionSettings));
            cli.output.verbose("================================================");
            if ((options.parse && options.encryptionSettings)) {
              options.encryptionSettings = JSON.parse(options.encryptionSettings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.encryptionSettings },]); } ;

          paramPath = ((options.path + "/") + "statuses");
          if (options.statuses) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.statuses));
            cli.output.verbose("================================================");
            if ((options.parse && options.statuses)) {
              options.statuses = JSON.parse(options.statuses); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.statuses },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesDisks1IVd1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesDisks1IVd1 = catparametersCreateOrUpdateVirtualMachinesDisks1IVd1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesDisks1IVd1 = parametersCreateOrUpdateVirtualMachinesDisks1IVd1.category("disks").description($("Commands to configure disks of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesDisks1IVd1.command("delete").description($("Remove disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"disks\" : {\r\n             \"name\":\"\",\r\n             \"encryptionSettings\":[\r\n               {\r\n                 \"diskEncryptionKey\":{\r\n                   \"secretUrl\":\"\",\r\n                   \"sourceVault\":{\r\n                     \"id\":\"\"\r\n                   }\r\n                 },\r\n                 \"keyEncryptionKey\":{\r\n                   \"keyUrl\":\"\",\r\n                   \"sourceVault\":{\r\n                     \"id\":\"\"\r\n                   }\r\n                 },\r\n                 \"enabled\":null\r\n               }\r\n             ],\r\n             \"statuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--name", $("Remove the name value.")).option("--encryption-settings", $("Remove the encryption-settings value.")).option("--statuses", $("Remove the statuses value.")).execute(function __86(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__86", line: 7304 }; return __func(_, this, arguments, __86, 1, __frame, function __$__86() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__86() { return (function __$__86(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__86() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/instanceView/disks" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((false || options.name) || options.encryptionSettings) || options.statuses);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.encryptionSettings) {
              subItemPath = (options.path + "/encryptionSettings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.statuses) {
              subItemPath = (options.path + "/statuses");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesEncryptionSettings0IVdIeS2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesEncryptionSettings0IVdIeS2 = catparametersCreateOrUpdateVirtualMachinesEncryptionSettings0IVdIeS2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesEncryptionSettings0IVdIeS2 = parametersCreateOrUpdateVirtualMachinesEncryptionSettings0IVdIeS2.category("disks-encryption-settings").description($("Commands to configure disks-encryption-settings of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesEncryptionSettings0IVdIeS2.command("set").description($("Set disks-encryption-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"encryptionSettings\" : {\r\n             \"diskEncryptionKey\":{\r\n               \"secretUrl\":\"\",\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               }\r\n             },\r\n             \"keyEncryptionKey\":{\r\n               \"keyUrl\":\"\",\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               }\r\n             },\r\n             \"enabled\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--disks-index <disks-index>", $("Indexer: disks-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--disk-encryption-key <diskEncryptionKey>", $("Set the disk-encryption-key value.")).option("--key-encryption-key <keyEncryptionKey>", $("Set the key-encryption-key value.")).option("--enabled <enabled>", $("Set the enabled value.")).execute(function __87(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__87", line: 7366 }; return __func(_, this, arguments, __87, 1, __frame, function __$__87() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__87() { return (function __$__87(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__87() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/instanceView/disks/" + options.disksIndex) + "/encryptionSettings") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "diskEncryptionKey");
          if (options.diskEncryptionKey) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diskEncryptionKey));
            cli.output.verbose("================================================");
            if ((options.parse && options.diskEncryptionKey)) {
              options.diskEncryptionKey = JSON.parse(options.diskEncryptionKey); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diskEncryptionKey },]); } ;

          paramPath = ((options.path + "/") + "keyEncryptionKey");
          if (options.keyEncryptionKey) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.keyEncryptionKey));
            cli.output.verbose("================================================");
            if ((options.parse && options.keyEncryptionKey)) {
              options.keyEncryptionKey = JSON.parse(options.keyEncryptionKey); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.keyEncryptionKey },]); } ;

          paramPath = ((options.path + "/") + "enabled");
          if (options.enabled) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.enabled));
            cli.output.verbose("================================================");
            if ((options.parse && options.enabled)) {
              options.enabled = JSON.parse(options.enabled); } ;

            options.enabled = JSON.parse(options.enabled);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.enabled },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesEncryptionSettings1IVdIeS2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesEncryptionSettings1IVdIeS2 = catparametersCreateOrUpdateVirtualMachinesEncryptionSettings1IVdIeS2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesEncryptionSettings1IVdIeS2 = parametersCreateOrUpdateVirtualMachinesEncryptionSettings1IVdIeS2.category("disks-encryption-settings").description($("Commands to configure disks-encryption-settings of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesEncryptionSettings1IVdIeS2.command("delete").description($("Remove disks-encryption-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"encryptionSettings\" : {\r\n             \"diskEncryptionKey\":{\r\n               \"secretUrl\":\"\",\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               }\r\n             },\r\n             \"keyEncryptionKey\":{\r\n               \"keyUrl\":\"\",\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               }\r\n             },\r\n             \"enabled\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--disks-index <disks-index>", $("Indexer: disks-index.")).option("--disk-encryption-key", $("Remove the disk-encryption-key value.")).option("--key-encryption-key", $("Remove the key-encryption-key value.")).option("--enabled", $("Remove the enabled value.")).execute(function __88(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__88", line: 7449 }; return __func(_, this, arguments, __88, 1, __frame, function __$__88() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__88() { return (function __$__88(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__88() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/instanceView/disks/" + options.disksIndex) + "/encryptionSettings") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((false || options.diskEncryptionKey) || options.keyEncryptionKey) || options.enabled);
          if (anySubItem) {
            subItemPath = null;
            if (options.diskEncryptionKey) {
              subItemPath = (options.path + "/diskEncryptionKey");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.keyEncryptionKey) {
              subItemPath = (options.path + "/keyEncryptionKey");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.enabled) {
              subItemPath = (options.path + "/enabled");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0IVdIeSSIdEK2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0IVdIeSSIdEK2 = catparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0IVdIeSSIdEK2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0IVdIeSSIdEK2 = parametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0IVdIeSSIdEK2.category("encryption-settings-disk-encryption-key").description($("Commands to configure encryption-settings-disk-encryption-key of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey0IVdIeSSIdEK2.command("set").description($("Set encryption-settings-disk-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"diskEncryptionKey\" : {\r\n             \"secretUrl\":\"\",\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--encryption-settings-index <encryption-settings-index>", $("Indexer: encryption-settings-index.")).option("--disks-index <disks-index>", $("Indexer: disks-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--secret-url <secretUrl>", $("Set the secret-url value.")).option("--source-vault <sourceVault>", $("Set the source-vault value.")).execute(function __89(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__89", line: 7509 }; return __func(_, this, arguments, __89, 1, __frame, function __$__89() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__89() { return (function __$__89(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__89() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (((("/instanceView/disks/" + options.disksIndex) + "/encryptionSettings/") + options.encryptionSettingsIndex) + "/diskEncryptionKey");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "secretUrl");
          if (options.secretUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.secretUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.secretUrl)) {
              options.secretUrl = JSON.parse(options.secretUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.secretUrl },]); } ;

          paramPath = ((options.path + "/") + "sourceVault");
          if (options.sourceVault) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceVault));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceVault)) {
              options.sourceVault = JSON.parse(options.sourceVault); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceVault },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1IVdIeSSIdEK2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1IVdIeSSIdEK2 = catparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1IVdIeSSIdEK2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1IVdIeSSIdEK2 = parametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1IVdIeSSIdEK2.category("encryption-settings-disk-encryption-key").description($("Commands to configure encryption-settings-disk-encryption-key of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesDiskEncryptionKey1IVdIeSSIdEK2.command("delete").description($("Remove encryption-settings-disk-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"diskEncryptionKey\" : {\r\n             \"secretUrl\":\"\",\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--encryption-settings-index <encryption-settings-index>", $("Indexer: encryption-settings-index.")).option("--disks-index <disks-index>", $("Indexer: disks-index.")).option("--secret-url", $("Remove the secret-url value.")).option("--source-vault", $("Remove the source-vault value.")).execute(function __90(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__90", line: 7575 }; return __func(_, this, arguments, __90, 1, __frame, function __$__90() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__90() { return (function __$__90(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__90() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (((("/instanceView/disks/" + options.disksIndex) + "/encryptionSettings/") + options.encryptionSettingsIndex) + "/diskEncryptionKey");
          anySubItem = ((false || options.secretUrl) || options.sourceVault);
          if (anySubItem) {
            subItemPath = null;
            if (options.secretUrl) {
              subItemPath = (options.path + "/secretUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.sourceVault) {
              subItemPath = (options.path + "/sourceVault");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesSourceVault0IVdIeSSIdEKsV2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSourceVault0IVdIeSSIdEKsV2 = catparametersCreateOrUpdateVirtualMachinesSourceVault0IVdIeSSIdEKsV2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesSourceVault0IVdIeSSIdEKsV2 = parametersCreateOrUpdateVirtualMachinesSourceVault0IVdIeSSIdEKsV2.category("disk-encryption-key-source-vault").description($("Commands to configure disk-encryption-key-source-vault of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesSourceVault0IVdIeSSIdEKsV2.command("set").description($("Set disk-encryption-key-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--encryption-settings-index <encryption-settings-index>", $("Indexer: encryption-settings-index.")).option("--disks-index <disks-index>", $("Indexer: disks-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __91(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__91", line: 7630 }; return __func(_, this, arguments, __91, 1, __frame, function __$__91() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__91() { return (function __$__91(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__91() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (((("/instanceView/disks/" + options.disksIndex) + "/encryptionSettings/") + options.encryptionSettingsIndex) + "/diskEncryptionKey/sourceVault");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesSourceVault1IVdIeSSIdEKsV2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSourceVault1IVdIeSSIdEKsV2 = catparametersCreateOrUpdateVirtualMachinesSourceVault1IVdIeSSIdEKsV2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesSourceVault1IVdIeSSIdEKsV2 = parametersCreateOrUpdateVirtualMachinesSourceVault1IVdIeSSIdEKsV2.category("disk-encryption-key-source-vault").description($("Commands to configure disk-encryption-key-source-vault of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesSourceVault1IVdIeSSIdEKsV2.command("delete").description($("Remove disk-encryption-key-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--encryption-settings-index <encryption-settings-index>", $("Indexer: encryption-settings-index.")).option("--disks-index <disks-index>", $("Indexer: disks-index.")).option("--id", $("Remove the id value.")).execute(function __92(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__92", line: 7684 }; return __func(_, this, arguments, __92, 1, __frame, function __$__92() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__92() { return (function __$__92(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__92() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (((("/instanceView/disks/" + options.disksIndex) + "/encryptionSettings/") + options.encryptionSettingsIndex) + "/diskEncryptionKey/sourceVault");
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0IVdIeSSIkEK2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0IVdIeSSIkEK2 = catparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0IVdIeSSIkEK2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0IVdIeSSIkEK2 = parametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0IVdIeSSIkEK2.category("encryption-settings-key-encryption-key").description($("Commands to configure encryption-settings-key-encryption-key of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey0IVdIeSSIkEK2.command("set").description($("Set encryption-settings-key-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"keyEncryptionKey\" : {\r\n             \"keyUrl\":\"\",\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--encryption-settings-index <encryption-settings-index>", $("Indexer: encryption-settings-index.")).option("--disks-index <disks-index>", $("Indexer: disks-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--key-url <keyUrl>", $("Set the key-url value.")).option("--source-vault <sourceVault>", $("Set the source-vault value.")).execute(function __93(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__93", line: 7736 }; return __func(_, this, arguments, __93, 1, __frame, function __$__93() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__93() { return (function __$__93(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__93() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (((("/instanceView/disks/" + options.disksIndex) + "/encryptionSettings/") + options.encryptionSettingsIndex) + "/keyEncryptionKey");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "keyUrl");
          if (options.keyUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.keyUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.keyUrl)) {
              options.keyUrl = JSON.parse(options.keyUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.keyUrl },]); } ;

          paramPath = ((options.path + "/") + "sourceVault");
          if (options.sourceVault) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceVault));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceVault)) {
              options.sourceVault = JSON.parse(options.sourceVault); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceVault },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1IVdIeSSIkEK2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1IVdIeSSIkEK2 = catparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1IVdIeSSIkEK2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1IVdIeSSIkEK2 = parametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1IVdIeSSIkEK2.category("encryption-settings-key-encryption-key").description($("Commands to configure encryption-settings-key-encryption-key of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesKeyEncryptionKey1IVdIeSSIkEK2.command("delete").description($("Remove encryption-settings-key-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"keyEncryptionKey\" : {\r\n             \"keyUrl\":\"\",\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--encryption-settings-index <encryption-settings-index>", $("Indexer: encryption-settings-index.")).option("--disks-index <disks-index>", $("Indexer: disks-index.")).option("--key-url", $("Remove the key-url value.")).option("--source-vault", $("Remove the source-vault value.")).execute(function __94(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__94", line: 7802 }; return __func(_, this, arguments, __94, 1, __frame, function __$__94() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__94() { return (function __$__94(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__94() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (((("/instanceView/disks/" + options.disksIndex) + "/encryptionSettings/") + options.encryptionSettingsIndex) + "/keyEncryptionKey");
          anySubItem = ((false || options.keyUrl) || options.sourceVault);
          if (anySubItem) {
            subItemPath = null;
            if (options.keyUrl) {
              subItemPath = (options.path + "/keyUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.sourceVault) {
              subItemPath = (options.path + "/sourceVault");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesSourceVault0IVdIeSSIkEKsV2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSourceVault0IVdIeSSIkEKsV2 = catparametersCreateOrUpdateVirtualMachinesSourceVault0IVdIeSSIkEKsV2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesSourceVault0IVdIeSSIkEKsV2 = parametersCreateOrUpdateVirtualMachinesSourceVault0IVdIeSSIkEKsV2.category("key-encryption-key-source-vault").description($("Commands to configure key-encryption-key-source-vault of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesSourceVault0IVdIeSSIkEKsV2.command("set").description($("Set key-encryption-key-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--encryption-settings-index <encryption-settings-index>", $("Indexer: encryption-settings-index.")).option("--disks-index <disks-index>", $("Indexer: disks-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __95(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__95", line: 7857 }; return __func(_, this, arguments, __95, 1, __frame, function __$__95() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__95() { return (function __$__95(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__95() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (((("/instanceView/disks/" + options.disksIndex) + "/encryptionSettings/") + options.encryptionSettingsIndex) + "/keyEncryptionKey/sourceVault");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesSourceVault1IVdIeSSIkEKsV2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSourceVault1IVdIeSSIkEKsV2 = catparametersCreateOrUpdateVirtualMachinesSourceVault1IVdIeSSIkEKsV2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesSourceVault1IVdIeSSIkEKsV2 = parametersCreateOrUpdateVirtualMachinesSourceVault1IVdIeSSIkEKsV2.category("key-encryption-key-source-vault").description($("Commands to configure key-encryption-key-source-vault of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesSourceVault1IVdIeSSIkEKsV2.command("delete").description($("Remove key-encryption-key-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--encryption-settings-index <encryption-settings-index>", $("Indexer: encryption-settings-index.")).option("--disks-index <disks-index>", $("Indexer: disks-index.")).option("--id", $("Remove the id value.")).execute(function __96(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__96", line: 7911 }; return __func(_, this, arguments, __96, 1, __frame, function __$__96() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__96() { return (function __$__96(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__96() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (((("/instanceView/disks/" + options.disksIndex) + "/encryptionSettings/") + options.encryptionSettingsIndex) + "/keyEncryptionKey/sourceVault");
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesStatuses0IVdIs3 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStatuses0IVdIs3 = catparametersCreateOrUpdateVirtualMachinesStatuses0IVdIs3.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesStatuses0IVdIs3 = parametersCreateOrUpdateVirtualMachinesStatuses0IVdIs3.category("disks-statuses").description($("Commands to configure disks-statuses of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesStatuses0IVdIs3.command("set").description($("Set disks-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"statuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--disks-index <disks-index>", $("Indexer: disks-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--code <code>", $("Set the code value.")).option("--level <level>", $("Set the level value.")).option("--display-status <displayStatus>", $("Set the display-status value.")).option("--message <message>", $("Set the message value.")).option("--time <time>", $("Set the time value.")).execute(function __97(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__97", line: 7967 }; return __func(_, this, arguments, __97, 1, __frame, function __$__97() {













      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__97() { return (function __$__97(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__97() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/instanceView/disks/" + options.disksIndex) + "/statuses") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "code");
          if (options.code) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.code));
            cli.output.verbose("================================================");
            if ((options.parse && options.code)) {
              options.code = JSON.parse(options.code); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.code },]); } ;

          paramPath = ((options.path + "/") + "level");
          if (options.level) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.level));
            cli.output.verbose("================================================");
            if ((options.parse && options.level)) {
              options.level = JSON.parse(options.level); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.level },]); } ;

          paramPath = ((options.path + "/") + "displayStatus");
          if (options.displayStatus) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.displayStatus));
            cli.output.verbose("================================================");
            if ((options.parse && options.displayStatus)) {
              options.displayStatus = JSON.parse(options.displayStatus); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.displayStatus },]); } ;

          paramPath = ((options.path + "/") + "message");
          if (options.message) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.message));
            cli.output.verbose("================================================");
            if ((options.parse && options.message)) {
              options.message = JSON.parse(options.message); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.message },]); } ;

          paramPath = ((options.path + "/") + "time");
          if (options.time) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.time));
            cli.output.verbose("================================================");
            if ((options.parse && options.time)) {
              options.time = JSON.parse(options.time); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.time },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesStatuses1IVdIs3 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStatuses1IVdIs3 = catparametersCreateOrUpdateVirtualMachinesStatuses1IVdIs3.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVdIs3 = parametersCreateOrUpdateVirtualMachinesStatuses1IVdIs3.category("disks-statuses").description($("Commands to configure disks-statuses of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVdIs3.command("delete").description($("Remove disks-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"statuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--disks-index <disks-index>", $("Indexer: disks-index.")).option("--code", $("Remove the code value.")).option("--level", $("Remove the level value.")).option("--display-status", $("Remove the display-status value.")).option("--message", $("Remove the message value.")).option("--time", $("Remove the time value.")).execute(function __98(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__98", line: 8073 }; return __func(_, this, arguments, __98, 1, __frame, function __$__98() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__98() { return (function __$__98(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__98() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/instanceView/disks/" + options.disksIndex) + "/statuses") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((((false || options.code) || options.level) || options.displayStatus) || options.message) || options.time);
          if (anySubItem) {
            subItemPath = null;
            if (options.code) {
              subItemPath = (options.path + "/code");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.level) {
              subItemPath = (options.path + "/level");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.displayStatus) {
              subItemPath = (options.path + "/displayStatus");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.message) {
              subItemPath = (options.path + "/message");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.time) {
              subItemPath = (options.path + "/time");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesExtensions0IVe1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesExtensions0IVe1 = catparametersCreateOrUpdateVirtualMachinesExtensions0IVe1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesExtensions0IVe1 = parametersCreateOrUpdateVirtualMachinesExtensions0IVe1.category("extensions").description($("Commands to configure extensions of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesExtensions0IVe1.command("set").description($("Set extensions in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"extensions\" : {\r\n             \"name\":\"\",\r\n             \"type\":\"\",\r\n             \"typeHandlerVersion\":\"\",\r\n             \"substatuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ],\r\n             \"statuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--type <type>", $("Set the type value.")).option("--type-handler-version <typeHandlerVersion>", $("Set the type-handler-version value.")).option("--substatuses <substatuses>", $("Set the substatuses value.")).option("--statuses <statuses>", $("Set the statuses value.")).execute(function __99(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__99", line: 8144 }; return __func(_, this, arguments, __99, 1, __frame, function __$__99() {












      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__99() { return (function __$__99(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__99() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/instanceView/extensions" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "type");
          if (options.type) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.type));
            cli.output.verbose("================================================");
            if ((options.parse && options.type)) {
              options.type = JSON.parse(options.type); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.type },]); } ;

          paramPath = ((options.path + "/") + "typeHandlerVersion");
          if (options.typeHandlerVersion) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.typeHandlerVersion));
            cli.output.verbose("================================================");
            if ((options.parse && options.typeHandlerVersion)) {
              options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.typeHandlerVersion },]); } ;

          paramPath = ((options.path + "/") + "substatuses");
          if (options.substatuses) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.substatuses));
            cli.output.verbose("================================================");
            if ((options.parse && options.substatuses)) {
              options.substatuses = JSON.parse(options.substatuses); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.substatuses },]); } ;

          paramPath = ((options.path + "/") + "statuses");
          if (options.statuses) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.statuses));
            cli.output.verbose("================================================");
            if ((options.parse && options.statuses)) {
              options.statuses = JSON.parse(options.statuses); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.statuses },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesExtensions1IVe1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesExtensions1IVe1 = catparametersCreateOrUpdateVirtualMachinesExtensions1IVe1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesExtensions1IVe1 = parametersCreateOrUpdateVirtualMachinesExtensions1IVe1.category("extensions").description($("Commands to configure extensions of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesExtensions1IVe1.command("delete").description($("Remove extensions in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"extensions\" : {\r\n             \"name\":\"\",\r\n             \"type\":\"\",\r\n             \"typeHandlerVersion\":\"\",\r\n             \"substatuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ],\r\n             \"statuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--name", $("Remove the name value.")).option("--type", $("Remove the type value.")).option("--type-handler-version", $("Remove the type-handler-version value.")).option("--substatuses", $("Remove the substatuses value.")).option("--statuses", $("Remove the statuses value.")).execute(function __100(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__100", line: 8249 }; return __func(_, this, arguments, __100, 1, __frame, function __$__100() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__100() { return (function __$__100(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__100() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/instanceView/extensions" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((((false || options.name) || options.type) || options.typeHandlerVersion) || options.substatuses) || options.statuses);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.type) {
              subItemPath = (options.path + "/type");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.typeHandlerVersion) {
              subItemPath = (options.path + "/typeHandlerVersion");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.substatuses) {
              subItemPath = (options.path + "/substatuses");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.statuses) {
              subItemPath = (options.path + "/statuses");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesSubstatuses0IVeIs4 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSubstatuses0IVeIs4 = catparametersCreateOrUpdateVirtualMachinesSubstatuses0IVeIs4.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesSubstatuses0IVeIs4 = parametersCreateOrUpdateVirtualMachinesSubstatuses0IVeIs4.category("substatuses").description($("Commands to configure substatuses of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesSubstatuses0IVeIs4.command("set").description($("Set substatuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"substatuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--extensions-index <extensions-index>", $("Indexer: extensions-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--code <code>", $("Set the code value.")).option("--level <level>", $("Set the level value.")).option("--display-status <displayStatus>", $("Set the display-status value.")).option("--message <message>", $("Set the message value.")).option("--time <time>", $("Set the time value.")).execute(function __101(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__101", line: 8321 }; return __func(_, this, arguments, __101, 1, __frame, function __$__101() {













      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__101() { return (function __$__101(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__101() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/instanceView/extensions/" + options.extensionsIndex) + "/substatuses") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "code");
          if (options.code) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.code));
            cli.output.verbose("================================================");
            if ((options.parse && options.code)) {
              options.code = JSON.parse(options.code); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.code },]); } ;

          paramPath = ((options.path + "/") + "level");
          if (options.level) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.level));
            cli.output.verbose("================================================");
            if ((options.parse && options.level)) {
              options.level = JSON.parse(options.level); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.level },]); } ;

          paramPath = ((options.path + "/") + "displayStatus");
          if (options.displayStatus) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.displayStatus));
            cli.output.verbose("================================================");
            if ((options.parse && options.displayStatus)) {
              options.displayStatus = JSON.parse(options.displayStatus); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.displayStatus },]); } ;

          paramPath = ((options.path + "/") + "message");
          if (options.message) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.message));
            cli.output.verbose("================================================");
            if ((options.parse && options.message)) {
              options.message = JSON.parse(options.message); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.message },]); } ;

          paramPath = ((options.path + "/") + "time");
          if (options.time) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.time));
            cli.output.verbose("================================================");
            if ((options.parse && options.time)) {
              options.time = JSON.parse(options.time); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.time },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesSubstatuses1IVeIs4 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSubstatuses1IVeIs4 = catparametersCreateOrUpdateVirtualMachinesSubstatuses1IVeIs4.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesSubstatuses1IVeIs4 = parametersCreateOrUpdateVirtualMachinesSubstatuses1IVeIs4.category("substatuses").description($("Commands to configure substatuses of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesSubstatuses1IVeIs4.command("delete").description($("Remove substatuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"substatuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--extensions-index <extensions-index>", $("Indexer: extensions-index.")).option("--code", $("Remove the code value.")).option("--level", $("Remove the level value.")).option("--display-status", $("Remove the display-status value.")).option("--message", $("Remove the message value.")).option("--time", $("Remove the time value.")).execute(function __102(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__102", line: 8427 }; return __func(_, this, arguments, __102, 1, __frame, function __$__102() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__102() { return (function __$__102(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__102() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/instanceView/extensions/" + options.extensionsIndex) + "/substatuses") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((((false || options.code) || options.level) || options.displayStatus) || options.message) || options.time);
          if (anySubItem) {
            subItemPath = null;
            if (options.code) {
              subItemPath = (options.path + "/code");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.level) {
              subItemPath = (options.path + "/level");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.displayStatus) {
              subItemPath = (options.path + "/displayStatus");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.message) {
              subItemPath = (options.path + "/message");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.time) {
              subItemPath = (options.path + "/time");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesStatuses0IVeIs5 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStatuses0IVeIs5 = catparametersCreateOrUpdateVirtualMachinesStatuses0IVeIs5.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesStatuses0IVeIs5 = parametersCreateOrUpdateVirtualMachinesStatuses0IVeIs5.category("extensions-statuses").description($("Commands to configure extensions-statuses of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesStatuses0IVeIs5.command("set").description($("Set extensions-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"statuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--extensions-index <extensions-index>", $("Indexer: extensions-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--code <code>", $("Set the code value.")).option("--level <level>", $("Set the level value.")).option("--display-status <displayStatus>", $("Set the display-status value.")).option("--message <message>", $("Set the message value.")).option("--time <time>", $("Set the time value.")).execute(function __103(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__103", line: 8499 }; return __func(_, this, arguments, __103, 1, __frame, function __$__103() {













      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__103() { return (function __$__103(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__103() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/instanceView/extensions/" + options.extensionsIndex) + "/statuses") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "code");
          if (options.code) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.code));
            cli.output.verbose("================================================");
            if ((options.parse && options.code)) {
              options.code = JSON.parse(options.code); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.code },]); } ;

          paramPath = ((options.path + "/") + "level");
          if (options.level) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.level));
            cli.output.verbose("================================================");
            if ((options.parse && options.level)) {
              options.level = JSON.parse(options.level); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.level },]); } ;

          paramPath = ((options.path + "/") + "displayStatus");
          if (options.displayStatus) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.displayStatus));
            cli.output.verbose("================================================");
            if ((options.parse && options.displayStatus)) {
              options.displayStatus = JSON.parse(options.displayStatus); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.displayStatus },]); } ;

          paramPath = ((options.path + "/") + "message");
          if (options.message) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.message));
            cli.output.verbose("================================================");
            if ((options.parse && options.message)) {
              options.message = JSON.parse(options.message); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.message },]); } ;

          paramPath = ((options.path + "/") + "time");
          if (options.time) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.time));
            cli.output.verbose("================================================");
            if ((options.parse && options.time)) {
              options.time = JSON.parse(options.time); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.time },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesStatuses1IVeIs5 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStatuses1IVeIs5 = catparametersCreateOrUpdateVirtualMachinesStatuses1IVeIs5.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVeIs5 = parametersCreateOrUpdateVirtualMachinesStatuses1IVeIs5.category("extensions-statuses").description($("Commands to configure extensions-statuses of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVeIs5.command("delete").description($("Remove extensions-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"statuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--extensions-index <extensions-index>", $("Indexer: extensions-index.")).option("--code", $("Remove the code value.")).option("--level", $("Remove the level value.")).option("--display-status", $("Remove the display-status value.")).option("--message", $("Remove the message value.")).option("--time", $("Remove the time value.")).execute(function __104(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__104", line: 8605 }; return __func(_, this, arguments, __104, 1, __frame, function __$__104() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__104() { return (function __$__104(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__104() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/instanceView/extensions/" + options.extensionsIndex) + "/statuses") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((((false || options.code) || options.level) || options.displayStatus) || options.message) || options.time);
          if (anySubItem) {
            subItemPath = null;
            if (options.code) {
              subItemPath = (options.path + "/code");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.level) {
              subItemPath = (options.path + "/level");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.displayStatus) {
              subItemPath = (options.path + "/displayStatus");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.message) {
              subItemPath = (options.path + "/message");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.time) {
              subItemPath = (options.path + "/time");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesBootDiagnostics0IVbD1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesBootDiagnostics0IVbD1 = catparametersCreateOrUpdateVirtualMachinesBootDiagnostics0IVbD1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesBootDiagnostics0IVbD1 = parametersCreateOrUpdateVirtualMachinesBootDiagnostics0IVbD1.category("instance-view-boot-diagnostics").description($("Commands to configure instance-view-boot-diagnostics of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesBootDiagnostics0IVbD1.command("set").description($("Set instance-view-boot-diagnostics in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"bootDiagnostics\" : {\r\n             \"consoleScreenshotBlobUri\":\"\",\r\n             \"serialConsoleLogBlobUri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--console-screenshot-blob-uri <consoleScreenshotBlobUri>", $("Set the console-screenshot-blob-uri value.")).option("--serial-console-log-blob-uri <serialConsoleLogBlobUri>", $("Set the serial-console-log-blob-uri value.")).execute(function __105(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__105", line: 8671 }; return __func(_, this, arguments, __105, 1, __frame, function __$__105() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__105() { return (function __$__105(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__105() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/instanceView/bootDiagnostics";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "consoleScreenshotBlobUri");
          if (options.consoleScreenshotBlobUri) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.consoleScreenshotBlobUri));
            cli.output.verbose("================================================");
            if ((options.parse && options.consoleScreenshotBlobUri)) {
              options.consoleScreenshotBlobUri = JSON.parse(options.consoleScreenshotBlobUri); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.consoleScreenshotBlobUri },]); } ;

          paramPath = ((options.path + "/") + "serialConsoleLogBlobUri");
          if (options.serialConsoleLogBlobUri) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.serialConsoleLogBlobUri));
            cli.output.verbose("================================================");
            if ((options.parse && options.serialConsoleLogBlobUri)) {
              options.serialConsoleLogBlobUri = JSON.parse(options.serialConsoleLogBlobUri); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.serialConsoleLogBlobUri },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesBootDiagnostics1IVbD1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesBootDiagnostics1IVbD1 = catparametersCreateOrUpdateVirtualMachinesBootDiagnostics1IVbD1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesBootDiagnostics1IVbD1 = parametersCreateOrUpdateVirtualMachinesBootDiagnostics1IVbD1.category("instance-view-boot-diagnostics").description($("Commands to configure instance-view-boot-diagnostics of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesBootDiagnostics1IVbD1.command("delete").description($("Remove instance-view-boot-diagnostics in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"bootDiagnostics\" : {\r\n             \"consoleScreenshotBlobUri\":\"\",\r\n             \"serialConsoleLogBlobUri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--console-screenshot-blob-uri", $("Remove the console-screenshot-blob-uri value.")).option("--serial-console-log-blob-uri", $("Remove the serial-console-log-blob-uri value.")).execute(function __106(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__106", line: 8735 }; return __func(_, this, arguments, __106, 1, __frame, function __$__106() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__106() { return (function __$__106(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__106() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/instanceView/bootDiagnostics";
          anySubItem = ((false || options.consoleScreenshotBlobUri) || options.serialConsoleLogBlobUri);
          if (anySubItem) {
            subItemPath = null;
            if (options.consoleScreenshotBlobUri) {
              subItemPath = (options.path + "/consoleScreenshotBlobUri");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.serialConsoleLogBlobUri) {
              subItemPath = (options.path + "/serialConsoleLogBlobUri");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesStatuses0IVs6 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStatuses0IVs6 = catparametersCreateOrUpdateVirtualMachinesStatuses0IVs6.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesStatuses0IVs6 = parametersCreateOrUpdateVirtualMachinesStatuses0IVs6.category("instance-view-statuses").description($("Commands to configure instance-view-statuses of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesStatuses0IVs6.command("set").description($("Set instance-view-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"statuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--code <code>", $("Set the code value.")).option("--level <level>", $("Set the level value.")).option("--display-status <displayStatus>", $("Set the display-status value.")).option("--message <message>", $("Set the message value.")).option("--time <time>", $("Set the time value.")).execute(function __107(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__107", line: 8794 }; return __func(_, this, arguments, __107, 1, __frame, function __$__107() {












      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__107() { return (function __$__107(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__107() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/instanceView/statuses" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "code");
          if (options.code) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.code));
            cli.output.verbose("================================================");
            if ((options.parse && options.code)) {
              options.code = JSON.parse(options.code); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.code },]); } ;

          paramPath = ((options.path + "/") + "level");
          if (options.level) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.level));
            cli.output.verbose("================================================");
            if ((options.parse && options.level)) {
              options.level = JSON.parse(options.level); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.level },]); } ;

          paramPath = ((options.path + "/") + "displayStatus");
          if (options.displayStatus) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.displayStatus));
            cli.output.verbose("================================================");
            if ((options.parse && options.displayStatus)) {
              options.displayStatus = JSON.parse(options.displayStatus); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.displayStatus },]); } ;

          paramPath = ((options.path + "/") + "message");
          if (options.message) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.message));
            cli.output.verbose("================================================");
            if ((options.parse && options.message)) {
              options.message = JSON.parse(options.message); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.message },]); } ;

          paramPath = ((options.path + "/") + "time");
          if (options.time) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.time));
            cli.output.verbose("================================================");
            if ((options.parse && options.time)) {
              options.time = JSON.parse(options.time); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.time },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesStatuses1IVs6 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStatuses1IVs6 = catparametersCreateOrUpdateVirtualMachinesStatuses1IVs6.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVs6 = parametersCreateOrUpdateVirtualMachinesStatuses1IVs6.category("instance-view-statuses").description($("Commands to configure instance-view-statuses of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesStatuses1IVs6.command("delete").description($("Remove instance-view-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"statuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--code", $("Remove the code value.")).option("--level", $("Remove the level value.")).option("--display-status", $("Remove the display-status value.")).option("--message", $("Remove the message value.")).option("--time", $("Remove the time value.")).execute(function __108(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__108", line: 8899 }; return __func(_, this, arguments, __108, 1, __frame, function __$__108() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__108() { return (function __$__108(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__108() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/instanceView/statuses" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((((false || options.code) || options.level) || options.displayStatus) || options.message) || options.time);
          if (anySubItem) {
            subItemPath = null;
            if (options.code) {
              subItemPath = (options.path + "/code");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.level) {
              subItemPath = (options.path + "/level");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.displayStatus) {
              subItemPath = (options.path + "/displayStatus");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.message) {
              subItemPath = (options.path + "/message");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.time) {
              subItemPath = (options.path + "/time");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesResources0R1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesResources0R1 = catparametersCreateOrUpdateVirtualMachinesResources0R1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesResources0R1 = parametersCreateOrUpdateVirtualMachinesResources0R1.category("resources").description($("Commands to configure resources of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesResources0R1.command("set").description($("Set resources in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"resources\" : {\r\n             \"forceUpdateTag\":\"\",\r\n             \"publisher\":\"\",\r\n             \"virtualMachineExtensionType\":\"\",\r\n             \"typeHandlerVersion\":\"\",\r\n             \"autoUpgradeMinorVersion\":null,\r\n             \"settings\":{\r\n             },\r\n             \"protectedSettings\":{\r\n             },\r\n             \"provisioningState\":\"\",\r\n             \"instanceView\":{\r\n               \"name\":\"\",\r\n               \"type\":\"\",\r\n               \"typeHandlerVersion\":\"\",\r\n               \"substatuses\":[\r\n                 {\r\n                   \"code\":\"\",\r\n                   \"level\":null,\r\n                   \"displayStatus\":\"\",\r\n                   \"message\":\"\",\r\n                   \"time\":null\r\n                 }\r\n               ],\r\n               \"statuses\":[\r\n                 {\r\n                   \"code\":\"\",\r\n                   \"level\":null,\r\n                   \"displayStatus\":\"\",\r\n                   \"message\":\"\",\r\n                   \"time\":null\r\n                 }\r\n               ]\r\n             },\r\n             \"id\":null,\r\n             \"name\":null,\r\n             \"type\":null,\r\n             \"location\":\"\",\r\n             \"tags\":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--force-update-tag <forceUpdateTag>", $("Set the force-update-tag value.")).option("--publisher <publisher>", $("Set the publisher value.")).option("--virtual-machine-extension-type <virtualMachineExtensionType>", $("Set the virtual-machine-extension-type value.")).option("--type-handler-version <typeHandlerVersion>", $("Set the type-handler-version value.")).option("--auto-upgrade-minor-version <autoUpgradeMinorVersion>", $("Set the auto-upgrade-minor-version value.")).option("--settings <settings>", $("Set the settings value.")).option("--protected-settings <protectedSettings>", $("Set the protected-settings value.")).option("--provisioning-state <provisioningState>", $("Set the provisioning-state value.")).option("--instance-view <instanceView>", $("Set the instance-view value.")).option("--id <id>", $("Set the id value.")).option("--name <name>", $("Set the name value.")).option("--type <type>", $("Set the type value.")).option("--location <location>", $("Set the location value.")).option("--tags <tags>", $("Set the tags value.")).execute(function __109(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__109", line: 8979 }; return __func(_, this, arguments, __109, 1, __frame, function __$__109() {





















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__109() { return (function __$__109(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__109() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/resources" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "forceUpdateTag");
          if (options.forceUpdateTag) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.forceUpdateTag));
            cli.output.verbose("================================================");
            if ((options.parse && options.forceUpdateTag)) {
              options.forceUpdateTag = JSON.parse(options.forceUpdateTag); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.forceUpdateTag },]); } ;

          paramPath = ((options.path + "/") + "publisher");
          if (options.publisher) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publisher));
            cli.output.verbose("================================================");
            if ((options.parse && options.publisher)) {
              options.publisher = JSON.parse(options.publisher); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publisher },]); } ;

          paramPath = ((options.path + "/") + "virtualMachineExtensionType");
          if (options.virtualMachineExtensionType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.virtualMachineExtensionType));
            cli.output.verbose("================================================");
            if ((options.parse && options.virtualMachineExtensionType)) {
              options.virtualMachineExtensionType = JSON.parse(options.virtualMachineExtensionType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.virtualMachineExtensionType },]); } ;

          paramPath = ((options.path + "/") + "typeHandlerVersion");
          if (options.typeHandlerVersion) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.typeHandlerVersion));
            cli.output.verbose("================================================");
            if ((options.parse && options.typeHandlerVersion)) {
              options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.typeHandlerVersion },]); } ;

          paramPath = ((options.path + "/") + "autoUpgradeMinorVersion");
          if (options.autoUpgradeMinorVersion) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.autoUpgradeMinorVersion));
            cli.output.verbose("================================================");
            if ((options.parse && options.autoUpgradeMinorVersion)) {
              options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion); } ;

            options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.autoUpgradeMinorVersion },]); } ;

          paramPath = ((options.path + "/") + "settings");
          if (options.settings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.settings));
            cli.output.verbose("================================================");
            if ((options.parse && options.settings)) {
              options.settings = JSON.parse(options.settings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.settings },]); } ;

          paramPath = ((options.path + "/") + "protectedSettings");
          if (options.protectedSettings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.protectedSettings));
            cli.output.verbose("================================================");
            if ((options.parse && options.protectedSettings)) {
              options.protectedSettings = JSON.parse(options.protectedSettings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.protectedSettings },]); } ;

          paramPath = ((options.path + "/") + "provisioningState");
          if (options.provisioningState) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.provisioningState));
            cli.output.verbose("================================================");
            if ((options.parse && options.provisioningState)) {
              options.provisioningState = JSON.parse(options.provisioningState); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.provisioningState },]); } ;

          paramPath = ((options.path + "/") + "instanceView");
          if (options.instanceView) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.instanceView));
            cli.output.verbose("================================================");
            if ((options.parse && options.instanceView)) {
              options.instanceView = JSON.parse(options.instanceView); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.instanceView },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "type");
          if (options.type) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.type));
            cli.output.verbose("================================================");
            if ((options.parse && options.type)) {
              options.type = JSON.parse(options.type); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.type },]); } ;

          paramPath = ((options.path + "/") + "location");
          if (options.location) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.location));
            cli.output.verbose("================================================");
            if ((options.parse && options.location)) {
              options.location = JSON.parse(options.location); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.location },]); } ;

          paramPath = ((options.path + "/") + "tags");
          if (options.tags) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tags));
            cli.output.verbose("================================================");
            if ((options.parse && options.tags)) {
              options.tags = JSON.parse(options.tags); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tags },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesResources1R1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesResources1R1 = catparametersCreateOrUpdateVirtualMachinesResources1R1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesResources1R1 = parametersCreateOrUpdateVirtualMachinesResources1R1.category("resources").description($("Commands to configure resources of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesResources1R1.command("delete").description($("Remove resources in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"resources\" : {\r\n             \"forceUpdateTag\":\"\",\r\n             \"publisher\":\"\",\r\n             \"virtualMachineExtensionType\":\"\",\r\n             \"typeHandlerVersion\":\"\",\r\n             \"autoUpgradeMinorVersion\":null,\r\n             \"settings\":{\r\n             },\r\n             \"protectedSettings\":{\r\n             },\r\n             \"provisioningState\":\"\",\r\n             \"instanceView\":{\r\n               \"name\":\"\",\r\n               \"type\":\"\",\r\n               \"typeHandlerVersion\":\"\",\r\n               \"substatuses\":[\r\n                 {\r\n                   \"code\":\"\",\r\n                   \"level\":null,\r\n                   \"displayStatus\":\"\",\r\n                   \"message\":\"\",\r\n                   \"time\":null\r\n                 }\r\n               ],\r\n               \"statuses\":[\r\n                 {\r\n                   \"code\":\"\",\r\n                   \"level\":null,\r\n                   \"displayStatus\":\"\",\r\n                   \"message\":\"\",\r\n                   \"time\":null\r\n                 }\r\n               ]\r\n             },\r\n             \"id\":null,\r\n             \"name\":null,\r\n             \"type\":null,\r\n             \"location\":\"\",\r\n             \"tags\":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--force-update-tag", $("Remove the force-update-tag value.")).option("--publisher", $("Remove the publisher value.")).option("--virtual-machine-extension-type", $("Remove the virtual-machine-extension-type value.")).option("--type-handler-version", $("Remove the type-handler-version value.")).option("--auto-upgrade-minor-version", $("Remove the auto-upgrade-minor-version value.")).option("--settings", $("Remove the settings value.")).option("--protected-settings", $("Remove the protected-settings value.")).option("--provisioning-state", $("Remove the provisioning-state value.")).option("--instance-view", $("Remove the instance-view value.")).option("--id", $("Remove the id value.")).option("--name", $("Remove the name value.")).option("--type", $("Remove the type value.")).option("--location", $("Remove the location value.")).option("--tags", $("Remove the tags value.")).execute(function __110(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__110", line: 9193 }; return __func(_, this, arguments, __110, 1, __frame, function __$__110() {



















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__110() { return (function __$__110(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__110() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/resources" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((((((((((((((false || options.forceUpdateTag) || options.publisher) || options.virtualMachineExtensionType) || options.typeHandlerVersion) || options.autoUpgradeMinorVersion) || options.settings) || options.protectedSettings) || options.provisioningState) || options.instanceView) || options.id) || options.name) || options.type) || options.location) || options.tags);
          if (anySubItem) {
            subItemPath = null;
            if (options.forceUpdateTag) {
              subItemPath = (options.path + "/forceUpdateTag");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.publisher) {
              subItemPath = (options.path + "/publisher");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.virtualMachineExtensionType) {
              subItemPath = (options.path + "/virtualMachineExtensionType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.typeHandlerVersion) {
              subItemPath = (options.path + "/typeHandlerVersion");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.autoUpgradeMinorVersion) {
              subItemPath = (options.path + "/autoUpgradeMinorVersion");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.settings) {
              subItemPath = (options.path + "/settings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.protectedSettings) {
              subItemPath = (options.path + "/protectedSettings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.provisioningState) {
              subItemPath = (options.path + "/provisioningState");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.instanceView) {
              subItemPath = (options.path + "/instanceView");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.type) {
              subItemPath = (options.path + "/type");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.location) {
              subItemPath = (options.path + "/location");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tags) {
              subItemPath = (options.path + "/tags");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesInstanceView0RIiV2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesInstanceView0RIiV2 = catparametersCreateOrUpdateVirtualMachinesInstanceView0RIiV2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesInstanceView0RIiV2 = parametersCreateOrUpdateVirtualMachinesInstanceView0RIiV2.category("resources-instance-view").description($("Commands to configure resources-instance-view of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesInstanceView0RIiV2.command("set").description($("Set resources-instance-view in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"instanceView\" : {\r\n             \"name\":\"\",\r\n             \"type\":\"\",\r\n             \"typeHandlerVersion\":\"\",\r\n             \"substatuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ],\r\n             \"statuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--resources-index <resources-index>", $("Indexer: resources-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--type <type>", $("Set the type value.")).option("--type-handler-version <typeHandlerVersion>", $("Set the type-handler-version value.")).option("--substatuses <substatuses>", $("Set the substatuses value.")).option("--statuses <statuses>", $("Set the statuses value.")).execute(function __111(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__111", line: 9299 }; return __func(_, this, arguments, __111, 1, __frame, function __$__111() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__111() { return (function __$__111(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__111() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/resources/" + options.resourcesIndex) + "/instanceView");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "type");
          if (options.type) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.type));
            cli.output.verbose("================================================");
            if ((options.parse && options.type)) {
              options.type = JSON.parse(options.type); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.type },]); } ;

          paramPath = ((options.path + "/") + "typeHandlerVersion");
          if (options.typeHandlerVersion) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.typeHandlerVersion));
            cli.output.verbose("================================================");
            if ((options.parse && options.typeHandlerVersion)) {
              options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.typeHandlerVersion },]); } ;

          paramPath = ((options.path + "/") + "substatuses");
          if (options.substatuses) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.substatuses));
            cli.output.verbose("================================================");
            if ((options.parse && options.substatuses)) {
              options.substatuses = JSON.parse(options.substatuses); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.substatuses },]); } ;

          paramPath = ((options.path + "/") + "statuses");
          if (options.statuses) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.statuses));
            cli.output.verbose("================================================");
            if ((options.parse && options.statuses)) {
              options.statuses = JSON.parse(options.statuses); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.statuses },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesInstanceView1RIiV2 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesInstanceView1RIiV2 = catparametersCreateOrUpdateVirtualMachinesInstanceView1RIiV2.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesInstanceView1RIiV2 = parametersCreateOrUpdateVirtualMachinesInstanceView1RIiV2.category("resources-instance-view").description($("Commands to configure resources-instance-view of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesInstanceView1RIiV2.command("delete").description($("Remove resources-instance-view in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"instanceView\" : {\r\n             \"name\":\"\",\r\n             \"type\":\"\",\r\n             \"typeHandlerVersion\":\"\",\r\n             \"substatuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ],\r\n             \"statuses\":[\r\n               {\r\n                 \"code\":\"\",\r\n                 \"level\":null,\r\n                 \"displayStatus\":\"\",\r\n                 \"message\":\"\",\r\n                 \"time\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--resources-index <resources-index>", $("Indexer: resources-index.")).option("--name", $("Remove the name value.")).option("--type", $("Remove the type value.")).option("--type-handler-version", $("Remove the type-handler-version value.")).option("--substatuses", $("Remove the substatuses value.")).option("--statuses", $("Remove the statuses value.")).execute(function __112(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__112", line: 9400 }; return __func(_, this, arguments, __112, 1, __frame, function __$__112() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__112() { return (function __$__112(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__112() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/resources/" + options.resourcesIndex) + "/instanceView");
          anySubItem = (((((false || options.name) || options.type) || options.typeHandlerVersion) || options.substatuses) || options.statuses);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.type) {
              subItemPath = (options.path + "/type");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.typeHandlerVersion) {
              subItemPath = (options.path + "/typeHandlerVersion");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.substatuses) {
              subItemPath = (options.path + "/substatuses");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.statuses) {
              subItemPath = (options.path + "/statuses");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesSubstatuses0RIiVs7 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSubstatuses0RIiVs7 = catparametersCreateOrUpdateVirtualMachinesSubstatuses0RIiVs7.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesSubstatuses0RIiVs7 = parametersCreateOrUpdateVirtualMachinesSubstatuses0RIiVs7.category("instance-view-substatuses").description($("Commands to configure instance-view-substatuses of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesSubstatuses0RIiVs7.command("set").description($("Set instance-view-substatuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"substatuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--resources-index <resources-index>", $("Indexer: resources-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--code <code>", $("Set the code value.")).option("--level <level>", $("Set the level value.")).option("--display-status <displayStatus>", $("Set the display-status value.")).option("--message <message>", $("Set the message value.")).option("--time <time>", $("Set the time value.")).execute(function __113(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__113", line: 9472 }; return __func(_, this, arguments, __113, 1, __frame, function __$__113() {













      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__113() { return (function __$__113(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__113() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/resources/" + options.resourcesIndex) + "/instanceView/substatuses") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "code");
          if (options.code) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.code));
            cli.output.verbose("================================================");
            if ((options.parse && options.code)) {
              options.code = JSON.parse(options.code); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.code },]); } ;

          paramPath = ((options.path + "/") + "level");
          if (options.level) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.level));
            cli.output.verbose("================================================");
            if ((options.parse && options.level)) {
              options.level = JSON.parse(options.level); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.level },]); } ;

          paramPath = ((options.path + "/") + "displayStatus");
          if (options.displayStatus) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.displayStatus));
            cli.output.verbose("================================================");
            if ((options.parse && options.displayStatus)) {
              options.displayStatus = JSON.parse(options.displayStatus); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.displayStatus },]); } ;

          paramPath = ((options.path + "/") + "message");
          if (options.message) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.message));
            cli.output.verbose("================================================");
            if ((options.parse && options.message)) {
              options.message = JSON.parse(options.message); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.message },]); } ;

          paramPath = ((options.path + "/") + "time");
          if (options.time) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.time));
            cli.output.verbose("================================================");
            if ((options.parse && options.time)) {
              options.time = JSON.parse(options.time); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.time },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesSubstatuses1RIiVs7 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesSubstatuses1RIiVs7 = catparametersCreateOrUpdateVirtualMachinesSubstatuses1RIiVs7.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesSubstatuses1RIiVs7 = parametersCreateOrUpdateVirtualMachinesSubstatuses1RIiVs7.category("instance-view-substatuses").description($("Commands to configure instance-view-substatuses of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesSubstatuses1RIiVs7.command("delete").description($("Remove instance-view-substatuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"substatuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--resources-index <resources-index>", $("Indexer: resources-index.")).option("--code", $("Remove the code value.")).option("--level", $("Remove the level value.")).option("--display-status", $("Remove the display-status value.")).option("--message", $("Remove the message value.")).option("--time", $("Remove the time value.")).execute(function __114(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__114", line: 9578 }; return __func(_, this, arguments, __114, 1, __frame, function __$__114() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__114() { return (function __$__114(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__114() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/resources/" + options.resourcesIndex) + "/instanceView/substatuses") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((((false || options.code) || options.level) || options.displayStatus) || options.message) || options.time);
          if (anySubItem) {
            subItemPath = null;
            if (options.code) {
              subItemPath = (options.path + "/code");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.level) {
              subItemPath = (options.path + "/level");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.displayStatus) {
              subItemPath = (options.path + "/displayStatus");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.message) {
              subItemPath = (options.path + "/message");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.time) {
              subItemPath = (options.path + "/time");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesStatuses0RIiVs8 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStatuses0RIiVs8 = catparametersCreateOrUpdateVirtualMachinesStatuses0RIiVs8.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesStatuses0RIiVs8 = parametersCreateOrUpdateVirtualMachinesStatuses0RIiVs8.category("instance-view-statuses").description($("Commands to configure instance-view-statuses of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesStatuses0RIiVs8.command("set").description($("Set instance-view-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"statuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--resources-index <resources-index>", $("Indexer: resources-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--code <code>", $("Set the code value.")).option("--level <level>", $("Set the level value.")).option("--display-status <displayStatus>", $("Set the display-status value.")).option("--message <message>", $("Set the message value.")).option("--time <time>", $("Set the time value.")).execute(function __115(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__115", line: 9650 }; return __func(_, this, arguments, __115, 1, __frame, function __$__115() {













      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__115() { return (function __$__115(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__115() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/resources/" + options.resourcesIndex) + "/instanceView/statuses") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "code");
          if (options.code) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.code));
            cli.output.verbose("================================================");
            if ((options.parse && options.code)) {
              options.code = JSON.parse(options.code); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.code },]); } ;

          paramPath = ((options.path + "/") + "level");
          if (options.level) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.level));
            cli.output.verbose("================================================");
            if ((options.parse && options.level)) {
              options.level = JSON.parse(options.level); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.level },]); } ;

          paramPath = ((options.path + "/") + "displayStatus");
          if (options.displayStatus) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.displayStatus));
            cli.output.verbose("================================================");
            if ((options.parse && options.displayStatus)) {
              options.displayStatus = JSON.parse(options.displayStatus); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.displayStatus },]); } ;

          paramPath = ((options.path + "/") + "message");
          if (options.message) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.message));
            cli.output.verbose("================================================");
            if ((options.parse && options.message)) {
              options.message = JSON.parse(options.message); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.message },]); } ;

          paramPath = ((options.path + "/") + "time");
          if (options.time) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.time));
            cli.output.verbose("================================================");
            if ((options.parse && options.time)) {
              options.time = JSON.parse(options.time); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.time },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesStatuses1RIiVs8 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesStatuses1RIiVs8 = catparametersCreateOrUpdateVirtualMachinesStatuses1RIiVs8.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesStatuses1RIiVs8 = parametersCreateOrUpdateVirtualMachinesStatuses1RIiVs8.category("instance-view-statuses").description($("Commands to configure instance-view-statuses of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesStatuses1RIiVs8.command("delete").description($("Remove instance-view-statuses in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"statuses\" : {\r\n             \"code\":\"\",\r\n             \"level\":null,\r\n             \"displayStatus\":\"\",\r\n             \"message\":\"\",\r\n             \"time\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--resources-index <resources-index>", $("Indexer: resources-index.")).option("--code", $("Remove the code value.")).option("--level", $("Remove the level value.")).option("--display-status", $("Remove the display-status value.")).option("--message", $("Remove the message value.")).option("--time", $("Remove the time value.")).execute(function __116(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__116", line: 9756 }; return __func(_, this, arguments, __116, 1, __frame, function __$__116() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__116() { return (function __$__116(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__116() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/resources/" + options.resourcesIndex) + "/instanceView/statuses") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((((false || options.code) || options.level) || options.displayStatus) || options.message) || options.time);
          if (anySubItem) {
            subItemPath = null;
            if (options.code) {
              subItemPath = (options.path + "/code");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.level) {
              subItemPath = (options.path + "/level");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.displayStatus) {
              subItemPath = (options.path + "/displayStatus");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.message) {
              subItemPath = (options.path + "/message");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.time) {
              subItemPath = (options.path + "/time");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesIdentity0I1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesIdentity0I1 = catparametersCreateOrUpdateVirtualMachinesIdentity0I1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesIdentity0I1 = parametersCreateOrUpdateVirtualMachinesIdentity0I1.category("identity").description($("Commands to configure identity of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesIdentity0I1.command("set").description($("Set identity in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"identity\" : {\r\n             \"principalId\":\"\",\r\n             \"tenantId\":\"\",\r\n             \"type\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--principal-id <principalId>", $("Set the principal-id value.")).option("--tenant-id <tenantId>", $("Set the tenant-id value.")).option("--type <type>", $("Set the type value.")).execute(function __117(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__117", line: 9823 }; return __func(_, this, arguments, __117, 1, __frame, function __$__117() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__117() { return (function __$__117(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__117() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/identity";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "principalId");
          if (options.principalId) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.principalId));
            cli.output.verbose("================================================");
            if ((options.parse && options.principalId)) {
              options.principalId = JSON.parse(options.principalId); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.principalId },]); } ;

          paramPath = ((options.path + "/") + "tenantId");
          if (options.tenantId) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tenantId));
            cli.output.verbose("================================================");
            if ((options.parse && options.tenantId)) {
              options.tenantId = JSON.parse(options.tenantId); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tenantId },]); } ;

          paramPath = ((options.path + "/") + "type");
          if (options.type) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.type));
            cli.output.verbose("================================================");
            if ((options.parse && options.type)) {
              options.type = JSON.parse(options.type); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.type },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesIdentity1I1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesIdentity1I1 = catparametersCreateOrUpdateVirtualMachinesIdentity1I1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesIdentity1I1 = parametersCreateOrUpdateVirtualMachinesIdentity1I1.category("identity").description($("Commands to configure identity of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesIdentity1I1.command("delete").description($("Remove identity in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"identity\" : {\r\n             \"principalId\":\"\",\r\n             \"tenantId\":\"\",\r\n             \"type\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--principal-id", $("Remove the principal-id value.")).option("--tenant-id", $("Remove the tenant-id value.")).option("--type", $("Remove the type value.")).execute(function __118(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__118", line: 9899 }; return __func(_, this, arguments, __118, 1, __frame, function __$__118() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__118() { return (function __$__118(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__118() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/identity";
          anySubItem = (((false || options.principalId) || options.tenantId) || options.type);
          if (anySubItem) {
            subItemPath = null;
            if (options.principalId) {
              subItemPath = (options.path + "/principalId");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tenantId) {
              subItemPath = (options.path + "/tenantId");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.type) {
              subItemPath = (options.path + "/type");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachinesZones0Z1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesZones0Z1 = catparametersCreateOrUpdateVirtualMachinesZones0Z1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachinesZones0Z1 = parametersCreateOrUpdateVirtualMachinesZones0Z1.category("zones").description($("Commands to configure zones of vm in config file."));

  setparametersCreateOrUpdateVirtualMachinesZones0Z1.command("set").description($("Set zones in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"zones\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).execute(function __119(options, _) { var fileContent, parametersObj, error, updatedContent; var __frame = { name: "__119", line: 9957 }; return __func(_, this, arguments, __119, 1, __frame, function __$__119() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__119() { return (function __$__119(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__119() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/zones" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachinesZones1Z1 = cli.category("vm");
  var parametersCreateOrUpdateVirtualMachinesZones1Z1 = catparametersCreateOrUpdateVirtualMachinesZones1Z1.category("config").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachinesZones1Z1 = parametersCreateOrUpdateVirtualMachinesZones1Z1.category("zones").description($("Commands to configure zones of vm in config file."));

  deleteparametersCreateOrUpdateVirtualMachinesZones1Z1.command("delete").description($("Remove zones in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"zones\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).execute(function __120(options, _) { var fileContent, parametersObj, updatedContent; var __frame = { name: "__120", line: 10002 }; return __func(_, this, arguments, __120, 1, __frame, function __$__120() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__120() { return (function __$__120(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__120() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/zones" + ((options.index ? (("/" + options.index)) : "")));
          jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]);

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });







  var virtualMachinesInstanceView = cli.category("vm").description($("Commands to manage your virtual machines.  "));

  virtualMachinesInstanceView.command("instance-view [resource-group] [vm-name]").description($("Retrieves information about the run-time state of a virtual machine.")).usage("[options] <resource-group> <vm-name>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --vm-name <vm-name>", $("vm-name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __121(resourceGroup, vMName, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__121", line: 10043 }; return __func(_, this, arguments, __121, 3, __frame, function __$__121() { return (function __$__121(__then) {






        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__121() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__121(__then) {
          if (!vMName) {
            return cli.interaction.promptIfNotGiven($("vm-name : "), vMName, __cb(_, __frame, 7, 31, function ___(__0, __2) { vMName = __2; __then(); }, true)); } else { __then(); } ; })(function __$__121() {


          cli.output.verbose(("vMName = " + vMName));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachines.instanceView(resourceGroup, vMName, __cb(_, __frame, 13, 57, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });







  var virtualMachinesPerformMaintenance = cli.category("vm").description($("Commands to manage your virtual machines.  "));

  virtualMachinesPerformMaintenance.command("perform-maintenance [resource-group] [vm-name]").description($("The operation to perform maintenance on a virtual machine.")).usage("[options] <resource-group> <vm-name>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --vm-name <vm-name>", $("vm-name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __122(resourceGroup, vMName, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__122", line: 10074 }; return __func(_, this, arguments, __122, 3, __frame, function __$__122() { return (function __$__122(__then) {






        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__122() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__122(__then) {
          if (!vMName) {
            return cli.interaction.promptIfNotGiven($("vm-name : "), vMName, __cb(_, __frame, 7, 31, function ___(__0, __2) { vMName = __2; __then(); }, true)); } else { __then(); } ; })(function __$__122() {


          cli.output.verbose(("vMName = " + vMName));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachines.performMaintenance(resourceGroup, vMName, __cb(_, __frame, 13, 57, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });







  var virtualMachinesRedeploy = cli.category("vm").description($("Commands to manage your virtual machines.  "));

  virtualMachinesRedeploy.command("redeploy [resource-group] [vm-name]").description($("The operation to redeploy a virtual machine.")).usage("[options] <resource-group> <vm-name>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --vm-name <vm-name>", $("vm-name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __123(resourceGroup, vMName, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__123", line: 10105 }; return __func(_, this, arguments, __123, 3, __frame, function __$__123() { return (function __$__123(__then) {






        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__123() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__123(__then) {
          if (!vMName) {
            return cli.interaction.promptIfNotGiven($("vm-name : "), vMName, __cb(_, __frame, 7, 31, function ___(__0, __2) { vMName = __2; __then(); }, true)); } else { __then(); } ; })(function __$__123() {


          cli.output.verbose(("vMName = " + vMName));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachines.redeploy(resourceGroup, vMName, __cb(_, __frame, 13, 57, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });





















  var virtualMachinesRunCommand = cli.category("vm").description($("Commands to manage your virtual machines.  "));

  virtualMachinesRunCommand.command("run-command [resource-group] [vm-name] [parameters]").description($("Run command on the VM.")).usage("[options] <resource-group> <vm-name> <parameters>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --vm-name <vm-name>", $("vm-name")).option("-p, --parameters <parameters>", $("A string of parameters in JSON format")).option("--parameter-file <parameter-file>", $("The text file that contains input parameter object in JSON format")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __124(resourceGroup, vMName, parameters, options, _) { var parametersObj, fileContent, subscription, computeManagementClient, result; var __frame = { name: "__124", line: 10152 }; return __func(_, this, arguments, __124, 4, __frame, function __$__124() { return (function __$__124(__then) {








        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__124() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__124(__then) {
          if (!vMName) {
            return cli.interaction.promptIfNotGiven($("vm-name : "), vMName, __cb(_, __frame, 7, 31, function ___(__0, __2) { vMName = __2; __then(); }, true)); } else { __then(); } ; })(function __$__124() {


          cli.output.verbose(("vMName = " + vMName));
          cli.output.verbose(("parameters = " + parameters));
          parametersObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            parametersObj = JSON.parse(fileContent); }

           else {
            parametersObj = JSON.parse(parameters); } ;

          cli.output.verbose(("parametersObj = " + JSON.stringify(parametersObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachines.runCommand(resourceGroup, vMName, parametersObj, __cb(_, __frame, 24, 57, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });


  var virtualMachinesRunCommandrunCommandParameters2 = virtualMachinesRunCommand.category("run-command-parameters").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  virtualMachinesRunCommandrunCommandParameters2.command("create").description($("Generate virtualMachinesRunCommand parameter string or files.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).execute(function __125(options, _) { var filePath; var __frame = { name: "__125", line: 10187 }; return __func(_, this, arguments, __125, 1, __frame, function __$__125() {




      return cli.output.verbose("{\"commandId\":\"\",\"script\":[\"\"],\"parameters\":[{\"name\":\"\",\"value\":\"\"}]}", __cb(_, __frame, 1, 15, function __$__125() {
        filePath = "virtualMachinesRunCommand_runCommand.json";
        if (options.parameterFile) {
          filePath = options.parameterFile; } ;

        fs.writeFileSync(filePath, beautify("{\r\n\"commandId\":\"\",\r\n\"script\":[\r\n\"\"\r\n],\r\n\"parameters\":[\r\n{\r\n\"name\":\"\",\r\n\"value\":\"\"\r\n}\r\n]\r\n}"));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file output to: " + filePath));
        cli.output.verbose("====================================="); _(); }, true)); }); });


  virtualMachinesRunCommandrunCommandParameters2.command("patch").description($("Command to patch virtualMachinesRunCommand parameter JSON file.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--operation <operation>", $("The JSON patch operation: add, remove, or replace.")).option("--path <path>", $("The JSON data path, e.g.: \"foo/1\".")).option("--value <value>", $("The JSON value.")).option("--parse", $("Parse the JSON value to object.")).execute(function __126(options, _) { var fileContent, parametersObj, updatedContent; var __frame = { name: "__126", line: 10207 }; return __func(_, this, arguments, __126, 1, __frame, function __$__126() {








      return cli.output.verbose(options.parameterFile, __cb(_, __frame, 1, 15, function __$__126() {
        cli.output.verbose(options.operation);
        cli.output.verbose(options.path);
        cli.output.verbose(options.value);
        cli.output.verbose(options.parse);
        if (options.parse) {
          options.value = JSON.parse(options.value); } ;

        cli.output.verbose(options.value);
        cli.output.verbose("=====================================");
        cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
        cli.output.verbose("=====================================");
        fileContent = fs.readFileSync(options.parameterFile, "utf8");
        parametersObj = JSON.parse(fileContent);
        cli.output.verbose("JSON object:");
        cli.output.verbose(JSON.stringify(parametersObj));
        if ((options.operation == "add")) {
          jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } else {

          if ((options.operation == "remove")) {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } else {

            if ((options.operation == "replace")) {
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ; } ; } ;

        updatedContent = JSON.stringify(parametersObj);
        cli.output.verbose("=====================================");
        cli.output.verbose("JSON object (updated):");
        cli.output.verbose(JSON.stringify(parametersObj));
        cli.output.verbose("=====================================");
        fs.writeFileSync(options.parameterFile, beautify(updatedContent));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
        cli.output.verbose("====================================="); _(); }, true)); }); });



  var catparametersRunCommandVirtualMachinesRunCommandInput01 = cli.category("vm");
  var parametersRunCommandVirtualMachinesRunCommandInput01 = catparametersRunCommandVirtualMachinesRunCommandInput01.category("run-command-parameters").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersRunCommandVirtualMachinesRunCommandInput01 = parametersRunCommandVirtualMachinesRunCommandInput01.category("run-command-input").description($("Commands to configure run-command-input of vm in run-command-parameters file."));

  setparametersRunCommandVirtualMachinesRunCommandInput01.command("set").description($("Set run-command-input in run-command-parameters string or files, e.g. \r\n{\r\n  \"commandId\":\"\",\r\n  \"script\":[\r\n    \"\"\r\n  ],\r\n  \"parameters\":[\r\n    {\r\n      \"name\":\"\",\r\n      \"value\":\"\"\r\n    }\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--command-id <commandId>", $("Set the command-id value.")).option("--script <script>", $("Set the script value.")).option("--parameters <parameters>", $("Set the parameters value.")).execute(function __127(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__127", line: 10258 }; return __func(_, this, arguments, __127, 1, __frame, function __$__127() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__127() { return (function __$__127(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__127() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "commandId");
          if (options.commandId) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.commandId));
            cli.output.verbose("================================================");
            if ((options.parse && options.commandId)) {
              options.commandId = JSON.parse(options.commandId); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.commandId },]); } ;

          paramPath = ((options.path + "/") + "script");
          if (options.script) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.script));
            cli.output.verbose("================================================");
            if ((options.parse && options.script)) {
              options.script = JSON.parse(options.script); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.script },]); } ;

          paramPath = ((options.path + "/") + "parameters");
          if (options.parameters) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.parameters));
            cli.output.verbose("================================================");
            if ((options.parse && options.parameters)) {
              options.parameters = JSON.parse(options.parameters); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.parameters },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersRunCommandVirtualMachinesRunCommandInput11 = cli.category("vm");
  var parametersRunCommandVirtualMachinesRunCommandInput11 = catparametersRunCommandVirtualMachinesRunCommandInput11.category("run-command-parameters").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersRunCommandVirtualMachinesRunCommandInput11 = parametersRunCommandVirtualMachinesRunCommandInput11.category("run-command-input").description($("Commands to configure run-command-input of vm in run-command-parameters file."));

  deleteparametersRunCommandVirtualMachinesRunCommandInput11.command("delete").description($("Remove run-command-input in run-command-parameters string or files, e.g. \r\n{\r\n  \"commandId\":\"\",\r\n  \"script\":[\r\n    \"\"\r\n  ],\r\n  \"parameters\":[\r\n    {\r\n      \"name\":\"\",\r\n      \"value\":\"\"\r\n    }\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--command-id", $("Remove the command-id value.")).option("--script", $("Remove the script value.")).option("--parameters", $("Remove the parameters value.")).execute(function __128(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__128", line: 10334 }; return __func(_, this, arguments, __128, 1, __frame, function __$__128() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__128() { return (function __$__128(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__128() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "";
          anySubItem = (((false || options.commandId) || options.script) || options.parameters);
          if (anySubItem) {
            subItemPath = null;
            if (options.commandId) {
              subItemPath = (options.path + "/commandId");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.script) {
              subItemPath = (options.path + "/script");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.parameters) {
              subItemPath = (options.path + "/parameters");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersRunCommandVirtualMachinesScript0S1 = cli.category("vm");
  var parametersRunCommandVirtualMachinesScript0S1 = catparametersRunCommandVirtualMachinesScript0S1.category("run-command-parameters").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersRunCommandVirtualMachinesScript0S1 = parametersRunCommandVirtualMachinesScript0S1.category("script").description($("Commands to configure script of vm in run-command-parameters file."));

  setparametersRunCommandVirtualMachinesScript0S1.command("set").description($("Set script in run-command-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"script\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).execute(function __129(options, _) { var fileContent, parametersObj, error, updatedContent; var __frame = { name: "__129", line: 10392 }; return __func(_, this, arguments, __129, 1, __frame, function __$__129() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__129() { return (function __$__129(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__129() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/script" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersRunCommandVirtualMachinesScript1S1 = cli.category("vm");
  var parametersRunCommandVirtualMachinesScript1S1 = catparametersRunCommandVirtualMachinesScript1S1.category("run-command-parameters").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersRunCommandVirtualMachinesScript1S1 = parametersRunCommandVirtualMachinesScript1S1.category("script").description($("Commands to configure script of vm in run-command-parameters file."));

  deleteparametersRunCommandVirtualMachinesScript1S1.command("delete").description($("Remove script in run-command-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"script\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).execute(function __130(options, _) { var fileContent, parametersObj, updatedContent; var __frame = { name: "__130", line: 10437 }; return __func(_, this, arguments, __130, 1, __frame, function __$__130() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__130() { return (function __$__130(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__130() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/script" + ((options.index ? (("/" + options.index)) : "")));
          jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]);

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersRunCommandVirtualMachinesParameters0P1 = cli.category("vm");
  var parametersRunCommandVirtualMachinesParameters0P1 = catparametersRunCommandVirtualMachinesParameters0P1.category("run-command-parameters").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var setparametersRunCommandVirtualMachinesParameters0P1 = parametersRunCommandVirtualMachinesParameters0P1.category("parameters").description($("Commands to configure parameters of vm in run-command-parameters file."));

  setparametersRunCommandVirtualMachinesParameters0P1.command("set").description($("Set parameters in run-command-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"parameters\" : {\r\n             \"name\":\"\",\r\n             \"value\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--value <value>", $("Set the value value.")).execute(function __131(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__131", line: 10479 }; return __func(_, this, arguments, __131, 1, __frame, function __$__131() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__131() { return (function __$__131(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__131() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/parameters" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "value");
          if (options.value) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.value));
            cli.output.verbose("================================================");
            if ((options.parse && options.value)) {
              options.value = JSON.parse(options.value); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.value },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersRunCommandVirtualMachinesParameters1P1 = cli.category("vm");
  var parametersRunCommandVirtualMachinesParameters1P1 = catparametersRunCommandVirtualMachinesParameters1P1.category("run-command-parameters").description($("Commands to manage configuration of virtual-machines in the parameter file."));

  var deleteparametersRunCommandVirtualMachinesParameters1P1 = parametersRunCommandVirtualMachinesParameters1P1.category("parameters").description($("Commands to configure parameters of vm in run-command-parameters file."));

  deleteparametersRunCommandVirtualMachinesParameters1P1.command("delete").description($("Remove parameters in run-command-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"parameters\" : {\r\n             \"name\":\"\",\r\n             \"value\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--name", $("Remove the name value.")).option("--value", $("Remove the value value.")).execute(function __132(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__132", line: 10548 }; return __func(_, this, arguments, __132, 1, __frame, function __$__132() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__132() { return (function __$__132(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__132() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/parameters" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.name) || options.value);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.value) {
              subItemPath = (options.path + "/value");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });};
