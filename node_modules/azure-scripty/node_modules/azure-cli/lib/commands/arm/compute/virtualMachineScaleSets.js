/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; var fs = require("fs");






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































var jsonpatch = require("fast-json-patch");

var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;
function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);};

function capitalize(str) {
  if ((str && (str.length >= 1))) {
    return (str.charAt(0).toUpperCase() + str.slice(1)); }

   else {
    return str; } ;};



function makeTuple(k, v, d) {
  return { key: k, value: v, depth: d };};


function displayImpl(o, key, depth, arr) {
  if (((!!o) && (((o.constructor === Object) || (o.constructor === Array))))) {
    arr.push(makeTuple(key, "", depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = ((o.constructor === Array) ? "#" : "");
      var w = displayImpl(v1, (p1 + k1), (depth + 1), arr);
      if ((w > len)) {
        len = w; } ; });


    return len; }

   else {
    arr.push(makeTuple(key, (o ? o.toString() : ""), depth));
    return ((depth * 2) + ((key ? key.toString().length : 0))); } ;};



function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, "", 0, arr);
  for (var t in arr) {
    var prebuf = new Array((arr[t].depth * 2)).join(" ");
    var key = (arr[t].key ? arr[t].key : "");
    var postLen = (width - ((prebuf.length + key.length)));
    var postbuf = new Array(((postLen > 0) ? postLen : 0)).join(" ");
    var str = ((prebuf + capitalize(key)) + postbuf);
    if (arr[t].value) {
      str += (" : " + arr[t].value); } ;

    cli.output.data(str); };};


exports.init = function(cli) {



























































































































































































































  var virtualMachineScaleSetsCreateOrUpdate = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsCreateOrUpdate.command("create [resource-group] [name] [parameters]").description($("Create or update a VM scale set.")).usage("[options] <resource-group> <name> <parameters>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("-p, --parameters <parameters>", $("A string of parameters in JSON format")).option("--parameter-file <parameter-file>", $("The text file that contains input parameter object in JSON format")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __1(resourceGroup, name, parameters, options, _) { var parametersObj, fileContent, subscription, computeManagementClient, result; var __frame = { name: "__1", line: 1672 }; return __func(_, this, arguments, __1, 4, __frame, function __$__1() { return (function __$__1(__then) {








        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__1() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__1(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__1() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("parameters = " + parameters));
          parametersObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            parametersObj = JSON.parse(fileContent); }

           else {
            parametersObj = JSON.parse(parameters); } ;

          cli.output.verbose(("parametersObj = " + JSON.stringify(parametersObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.createOrUpdate(resourceGroup, name, parametersObj, __cb(_, __frame, 24, 65, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });


  var virtualMachineScaleSetsCreateOrUpdatecreateOrUpdateParameters2 = virtualMachineScaleSetsCreateOrUpdate.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  virtualMachineScaleSetsCreateOrUpdatecreateOrUpdateParameters2.command("create").description($("Generate virtualMachineScaleSetsCreateOrUpdate parameter string or files.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).execute(function __2(options, _) { var filePath; var __frame = { name: "__2", line: 1707 }; return __func(_, this, arguments, __2, 1, __frame, function __$__2() {




      return cli.output.verbose("{\"sku\":{\"name\":\"\",\"tier\":\"\",\"capacity\":null},\"plan\":{\"name\":\"\",\"publisher\":\"\",\"product\":\"\",\"promotionCode\":\"\"},\"upgradePolicy\":{\"mode\":null,\"rollingUpgradePolicy\":{\"maxBatchInstancePercent\":null,\"maxUnhealthyInstancePercent\":null,\"maxUnhealthyUpgradedInstancePercent\":null,\"pauseTimeBetweenBatches\":\"\"},\"automaticOSUpgrade\":null},\"virtualMachineProfile\":{\"osProfile\":{\"computerNamePrefix\":\"\",\"adminUsername\":\"\",\"adminPassword\":\"\",\"customData\":\"\",\"windowsConfiguration\":{\"provisionVMAgent\":null,\"enableAutomaticUpdates\":null,\"timeZone\":\"\",\"additionalUnattendContent\":[{\"passName\":null,\"componentName\":null,\"settingName\":null,\"content\":\"\"}],\"winRM\":{\"listeners\":[{\"protocol\":null,\"certificateUrl\":\"\"}]}},\"linuxConfiguration\":{\"disablePasswordAuthentication\":null,\"ssh\":{\"publicKeys\":[{\"path\":\"\",\"keyData\":\"\"}]}},\"secrets\":[{\"sourceVault\":{\"id\":\"\"},\"vaultCertificates\":[{\"certificateUrl\":\"\",\"certificateStore\":\"\"}]}]},\"storageProfile\":{\"imageReference\":{\"publisher\":\"\",\"offer\":\"\",\"sku\":\"\",\"version\":\"\",\"id\":\"\"},\"osDisk\":{\"name\":\"\",\"caching\":null,\"createOption\":\"\",\"osType\":null,\"image\":{\"uri\":\"\"},\"vhdContainers\":[\"\"],\"managedDisk\":{\"storageAccountType\":null}},\"dataDisks\":[{\"name\":\"\",\"lun\":\"\",\"caching\":null,\"createOption\":\"\",\"diskSizeGB\":null,\"managedDisk\":{\"storageAccountType\":null}}]},\"networkProfile\":{\"healthProbe\":{\"id\":\"\"},\"networkInterfaceConfigurations\":[{\"name\":\"\",\"primary\":null,\"enableAcceleratedNetworking\":null,\"networkSecurityGroup\":{\"id\":\"\"},\"dnsSettings\":{\"dnsServers\":[\"\"]},\"ipConfigurations\":[{\"name\":\"\",\"subnet\":{\"id\":\"\"},\"primary\":null,\"publicIPAddressConfiguration\":{\"name\":\"\",\"idleTimeoutInMinutes\":null,\"dnsSettings\":{\"domainNameLabel\":\"\"}},\"privateIPAddressVersion\":\"\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"\"}],\"id\":\"\"}],\"id\":\"\"}]},\"diagnosticsProfile\":{\"bootDiagnostics\":{\"enabled\":null,\"storageUri\":\"\"}},\"extensionProfile\":{\"extensions\":[{\"name\":\"\",\"forceUpdateTag\":\"\",\"publisher\":\"\",\"type\":\"\",\"typeHandlerVersion\":\"\",\"autoUpgradeMinorVersion\":null,\"settings\":{},\"protectedSettings\":{},\"provisioningState\":\"\",\"id\":null}]},\"licenseType\":\"\"},\"provisioningState\":\"\",\"overprovision\":null,\"uniqueId\":\"\",\"singlePlacementGroup\":null,\"identity\":{\"principalId\":\"\",\"tenantId\":\"\",\"type\":null},\"zones\":[\"\"],\"id\":null,\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}", __cb(_, __frame, 1, 15, function __$__2() {
        filePath = "virtualMachineScaleSetsCreateOrUpdate_createOrUpdate.json";
        if (options.parameterFile) {
          filePath = options.parameterFile; } ;

        fs.writeFileSync(filePath, beautify("{\r\n\"sku\":{\r\n\"name\":\"\",\r\n\"tier\":\"\",\r\n\"capacity\":null\r\n},\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"product\":\"\",\r\n\"promotionCode\":\"\"\r\n},\r\n\"upgradePolicy\":{\r\n\"mode\":null,\r\n\"rollingUpgradePolicy\":{\r\n\"maxBatchInstancePercent\":null,\r\n\"maxUnhealthyInstancePercent\":null,\r\n\"maxUnhealthyUpgradedInstancePercent\":null,\r\n\"pauseTimeBetweenBatches\":\"\"\r\n},\r\n\"automaticOSUpgrade\":null\r\n},\r\n\"virtualMachineProfile\":{\r\n\"osProfile\":{\r\n\"computerNamePrefix\":\"\",\r\n\"adminUsername\":\"\",\r\n\"adminPassword\":\"\",\r\n\"customData\":\"\",\r\n\"windowsConfiguration\":{\r\n\"provisionVMAgent\":null,\r\n\"enableAutomaticUpdates\":null,\r\n\"timeZone\":\"\",\r\n\"additionalUnattendContent\":[\r\n{\r\n\"passName\":null,\r\n\"componentName\":null,\r\n\"settingName\":null,\r\n\"content\":\"\"\r\n}\r\n],\r\n\"winRM\":{\r\n\"listeners\":[\r\n{\r\n\"protocol\":null,\r\n\"certificateUrl\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"linuxConfiguration\":{\r\n\"disablePasswordAuthentication\":null,\r\n\"ssh\":{\r\n\"publicKeys\":[\r\n{\r\n\"path\":\"\",\r\n\"keyData\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"secrets\":[\r\n{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"vaultCertificates\":[\r\n{\r\n\"certificateUrl\":\"\",\r\n\"certificateStore\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"storageProfile\":{\r\n\"imageReference\":{\r\n\"publisher\":\"\",\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\",\r\n\"id\":\"\"\r\n},\r\n\"osDisk\":{\r\n\"name\":\"\",\r\n\"caching\":null,\r\n\"createOption\":\"\",\r\n\"osType\":null,\r\n\"image\":{\r\n\"uri\":\"\"\r\n},\r\n\"vhdContainers\":[\r\n\"\"\r\n],\r\n\"managedDisk\":{\r\n\"storageAccountType\":null\r\n}\r\n},\r\n\"dataDisks\":[\r\n{\r\n\"name\":\"\",\r\n\"lun\":\"\",\r\n\"caching\":null,\r\n\"createOption\":\"\",\r\n\"diskSizeGB\":null,\r\n\"managedDisk\":{\r\n\"storageAccountType\":null\r\n}\r\n}\r\n]\r\n},\r\n\"networkProfile\":{\r\n\"healthProbe\":{\r\n\"id\":\"\"\r\n},\r\n\"networkInterfaceConfigurations\":[\r\n{\r\n\"name\":\"\",\r\n\"primary\":null,\r\n\"enableAcceleratedNetworking\":null,\r\n\"networkSecurityGroup\":{\r\n\"id\":\"\"\r\n},\r\n\"dnsSettings\":{\r\n\"dnsServers\":[\r\n\"\"\r\n]\r\n},\r\n\"ipConfigurations\":[\r\n{\r\n\"name\":\"\",\r\n\"subnet\":{\r\n\"id\":\"\"\r\n},\r\n\"primary\":null,\r\n\"publicIPAddressConfiguration\":{\r\n\"name\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"dnsSettings\":{\r\n\"domainNameLabel\":\"\"\r\n}\r\n},\r\n\"privateIPAddressVersion\":\"\",\r\n\"applicationGatewayBackendAddressPools\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"loadBalancerBackendAddressPools\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"loadBalancerInboundNatPools\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"id\":\"\"\r\n}\r\n],\r\n\"id\":\"\"\r\n}\r\n]\r\n},\r\n\"diagnosticsProfile\":{\r\n\"bootDiagnostics\":{\r\n\"enabled\":null,\r\n\"storageUri\":\"\"\r\n}\r\n},\r\n\"extensionProfile\":{\r\n\"extensions\":[\r\n{\r\n\"name\":\"\",\r\n\"forceUpdateTag\":\"\",\r\n\"publisher\":\"\",\r\n\"type\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"autoUpgradeMinorVersion\":null,\r\n\"settings\":{\r\n},\r\n\"protectedSettings\":{\r\n},\r\n\"provisioningState\":\"\",\r\n\"id\":null\r\n}\r\n]\r\n},\r\n\"licenseType\":\"\"\r\n},\r\n\"provisioningState\":\"\",\r\n\"overprovision\":null,\r\n\"uniqueId\":\"\",\r\n\"singlePlacementGroup\":null,\r\n\"identity\":{\r\n\"principalId\":\"\",\r\n\"tenantId\":\"\",\r\n\"type\":null\r\n},\r\n\"zones\":[\r\n\"\"\r\n],\r\n\"id\":null,\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}"));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file output to: " + filePath));
        cli.output.verbose("====================================="); _(); }, true)); }); });


  virtualMachineScaleSetsCreateOrUpdatecreateOrUpdateParameters2.command("patch").description($("Command to patch virtualMachineScaleSetsCreateOrUpdate parameter JSON file.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--operation <operation>", $("The JSON patch operation: add, remove, or replace.")).option("--path <path>", $("The JSON data path, e.g.: \"foo/1\".")).option("--value <value>", $("The JSON value.")).option("--parse", $("Parse the JSON value to object.")).execute(function __3(options, _) { var fileContent, parametersObj, updatedContent; var __frame = { name: "__3", line: 1727 }; return __func(_, this, arguments, __3, 1, __frame, function __$__3() {








      return cli.output.verbose(options.parameterFile, __cb(_, __frame, 1, 15, function __$__3() {
        cli.output.verbose(options.operation);
        cli.output.verbose(options.path);
        cli.output.verbose(options.value);
        cli.output.verbose(options.parse);
        if (options.parse) {
          options.value = JSON.parse(options.value); } ;

        cli.output.verbose(options.value);
        cli.output.verbose("=====================================");
        cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
        cli.output.verbose("=====================================");
        fileContent = fs.readFileSync(options.parameterFile, "utf8");
        parametersObj = JSON.parse(fileContent);
        cli.output.verbose("JSON object:");
        cli.output.verbose(JSON.stringify(parametersObj));
        if ((options.operation == "add")) {
          jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } else {

          if ((options.operation == "remove")) {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } else {

            if ((options.operation == "replace")) {
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ; } ; } ;

        updatedContent = JSON.stringify(parametersObj);
        cli.output.verbose("=====================================");
        cli.output.verbose("JSON object (updated):");
        cli.output.verbose(JSON.stringify(parametersObj));
        cli.output.verbose("=====================================");
        fs.writeFileSync(options.parameterFile, beautify(updatedContent));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
        cli.output.verbose("====================================="); _(); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet01 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet01 = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet01.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet01 = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet01.category("virtual-machine-scale-set").description($("Commands to configure virtual-machine-scale-set of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet01.command("set").description($("Set virtual-machine-scale-set in config string or files, e.g. \r\n{\r\n  \"sku\":{\r\n    \"name\":\"\",\r\n    \"tier\":\"\",\r\n    \"capacity\":null\r\n  },\r\n  \"plan\":{\r\n    \"name\":\"\",\r\n    \"publisher\":\"\",\r\n    \"product\":\"\",\r\n    \"promotionCode\":\"\"\r\n  },\r\n  \"upgradePolicy\":{\r\n    \"mode\":null,\r\n    \"rollingUpgradePolicy\":{\r\n      \"maxBatchInstancePercent\":null,\r\n      \"maxUnhealthyInstancePercent\":null,\r\n      \"maxUnhealthyUpgradedInstancePercent\":null,\r\n      \"pauseTimeBetweenBatches\":\"\"\r\n    },\r\n    \"automaticOSUpgrade\":null\r\n  },\r\n  \"virtualMachineProfile\":{\r\n    \"osProfile\":{\r\n      \"computerNamePrefix\":\"\",\r\n      \"adminUsername\":\"\",\r\n      \"adminPassword\":\"\",\r\n      \"customData\":\"\",\r\n      \"windowsConfiguration\":{\r\n        \"provisionVMAgent\":null,\r\n        \"enableAutomaticUpdates\":null,\r\n        \"timeZone\":\"\",\r\n        \"additionalUnattendContent\":[\r\n          {\r\n            \"passName\":null,\r\n            \"componentName\":null,\r\n            \"settingName\":null,\r\n            \"content\":\"\"\r\n          }\r\n        ],\r\n        \"winRM\":{\r\n          \"listeners\":[\r\n            {\r\n              \"protocol\":null,\r\n              \"certificateUrl\":\"\"\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      \"linuxConfiguration\":{\r\n        \"disablePasswordAuthentication\":null,\r\n        \"ssh\":{\r\n          \"publicKeys\":[\r\n            {\r\n              \"path\":\"\",\r\n              \"keyData\":\"\"\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      \"secrets\":[\r\n        {\r\n          \"sourceVault\":{\r\n            \"id\":\"\"\r\n          },\r\n          \"vaultCertificates\":[\r\n            {\r\n              \"certificateUrl\":\"\",\r\n              \"certificateStore\":\"\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"storageProfile\":{\r\n      \"imageReference\":{\r\n        \"publisher\":\"\",\r\n        \"offer\":\"\",\r\n        \"sku\":\"\",\r\n        \"version\":\"\",\r\n        \"id\":\"\"\r\n      },\r\n      \"osDisk\":{\r\n        \"name\":\"\",\r\n        \"caching\":null,\r\n        \"createOption\":\"\",\r\n        \"osType\":null,\r\n        \"image\":{\r\n          \"uri\":\"\"\r\n        },\r\n        \"vhdContainers\":[\r\n          \"\"\r\n        ],\r\n        \"managedDisk\":{\r\n          \"storageAccountType\":null\r\n        }\r\n      },\r\n      \"dataDisks\":[\r\n        {\r\n          \"name\":\"\",\r\n          \"lun\":\"\",\r\n          \"caching\":null,\r\n          \"createOption\":\"\",\r\n          \"diskSizeGB\":null,\r\n          \"managedDisk\":{\r\n            \"storageAccountType\":null\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"networkProfile\":{\r\n      \"healthProbe\":{\r\n        \"id\":\"\"\r\n      },\r\n      \"networkInterfaceConfigurations\":[\r\n        {\r\n          \"name\":\"\",\r\n          \"primary\":null,\r\n          \"enableAcceleratedNetworking\":null,\r\n          \"networkSecurityGroup\":{\r\n            \"id\":\"\"\r\n          },\r\n          \"dnsSettings\":{\r\n            \"dnsServers\":[\r\n              \"\"\r\n            ]\r\n          },\r\n          \"ipConfigurations\":[\r\n            {\r\n              \"name\":\"\",\r\n              \"subnet\":{\r\n                \"id\":\"\"\r\n              },\r\n              \"primary\":null,\r\n              \"publicIPAddressConfiguration\":{\r\n                \"name\":\"\",\r\n                \"idleTimeoutInMinutes\":null,\r\n                \"dnsSettings\":{\r\n                  \"domainNameLabel\":\"\"\r\n                }\r\n              },\r\n              \"privateIPAddressVersion\":\"\",\r\n              \"applicationGatewayBackendAddressPools\":[\r\n                {\r\n                  \"id\":\"\"\r\n                }\r\n              ],\r\n              \"loadBalancerBackendAddressPools\":[\r\n                {\r\n                  \"id\":\"\"\r\n                }\r\n              ],\r\n              \"loadBalancerInboundNatPools\":[\r\n                {\r\n                  \"id\":\"\"\r\n                }\r\n              ],\r\n              \"id\":\"\"\r\n            }\r\n          ],\r\n          \"id\":\"\"\r\n        }\r\n      ]\r\n    },\r\n    \"diagnosticsProfile\":{\r\n      \"bootDiagnostics\":{\r\n        \"enabled\":null,\r\n        \"storageUri\":\"\"\r\n      }\r\n    },\r\n    \"extensionProfile\":{\r\n      \"extensions\":[\r\n        {\r\n          \"name\":\"\",\r\n          \"forceUpdateTag\":\"\",\r\n          \"publisher\":\"\",\r\n          \"type\":\"\",\r\n          \"typeHandlerVersion\":\"\",\r\n          \"autoUpgradeMinorVersion\":null,\r\n          \"settings\":{\r\n          },\r\n          \"protectedSettings\":{\r\n          },\r\n          \"provisioningState\":\"\",\r\n          \"id\":null\r\n        }\r\n      ]\r\n    },\r\n    \"licenseType\":\"\"\r\n  },\r\n  \"provisioningState\":\"\",\r\n  \"overprovision\":null,\r\n  \"uniqueId\":\"\",\r\n  \"singlePlacementGroup\":null,\r\n  \"identity\":{\r\n    \"principalId\":\"\",\r\n    \"tenantId\":\"\",\r\n    \"type\":null\r\n  },\r\n  \"zones\":[\r\n    \"\"\r\n  ],\r\n  \"id\":null,\r\n  \"name\":null,\r\n  \"type\":null,\r\n  \"location\":\"\",\r\n  \"tags\":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--sku <sku>", $("Set the sku value.")).option("--plan <plan>", $("Set the plan value.")).option("--upgrade-policy <upgradePolicy>", $("Set the upgrade-policy value.")).option("--virtual-machine-profile <virtualMachineProfile>", $("Set the virtual-machine-profile value.")).option("--provisioning-state <provisioningState>", $("Set the provisioning-state value.")).option("--overprovision <overprovision>", $("Set the overprovision value.")).option("--unique-id <uniqueId>", $("Set the unique-id value.")).option("--single-placement-group <singlePlacementGroup>", $("Set the single-placement-group value.")).option("--identity <identity>", $("Set the identity value.")).option("--zones <zones>", $("Set the zones value.")).option("--id <id>", $("Set the id value.")).option("--name <name>", $("Set the name value.")).option("--type <type>", $("Set the type value.")).option("--location <location>", $("Set the location value.")).option("--tags <tags>", $("Set the tags value.")).execute(function __4(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__4", line: 1790 }; return __func(_, this, arguments, __4, 1, __frame, function __$__4() {




















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__4() { return (function __$__4(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__4() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "sku");
          if (options.sku) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sku));
            cli.output.verbose("================================================");
            if ((options.parse && options.sku)) {
              options.sku = JSON.parse(options.sku); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sku },]); } ;

          paramPath = ((options.path + "/") + "plan");
          if (options.plan) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.plan));
            cli.output.verbose("================================================");
            if ((options.parse && options.plan)) {
              options.plan = JSON.parse(options.plan); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.plan },]); } ;

          paramPath = ((options.path + "/") + "upgradePolicy");
          if (options.upgradePolicy) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.upgradePolicy));
            cli.output.verbose("================================================");
            if ((options.parse && options.upgradePolicy)) {
              options.upgradePolicy = JSON.parse(options.upgradePolicy); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.upgradePolicy },]); } ;

          paramPath = ((options.path + "/") + "virtualMachineProfile");
          if (options.virtualMachineProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.virtualMachineProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.virtualMachineProfile)) {
              options.virtualMachineProfile = JSON.parse(options.virtualMachineProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.virtualMachineProfile },]); } ;

          paramPath = ((options.path + "/") + "provisioningState");
          if (options.provisioningState) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.provisioningState));
            cli.output.verbose("================================================");
            if ((options.parse && options.provisioningState)) {
              options.provisioningState = JSON.parse(options.provisioningState); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.provisioningState },]); } ;

          paramPath = ((options.path + "/") + "overprovision");
          if (options.overprovision) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.overprovision));
            cli.output.verbose("================================================");
            if ((options.parse && options.overprovision)) {
              options.overprovision = JSON.parse(options.overprovision); } ;

            options.overprovision = JSON.parse(options.overprovision);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.overprovision },]); } ;

          paramPath = ((options.path + "/") + "uniqueId");
          if (options.uniqueId) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.uniqueId));
            cli.output.verbose("================================================");
            if ((options.parse && options.uniqueId)) {
              options.uniqueId = JSON.parse(options.uniqueId); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.uniqueId },]); } ;

          paramPath = ((options.path + "/") + "singlePlacementGroup");
          if (options.singlePlacementGroup) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.singlePlacementGroup));
            cli.output.verbose("================================================");
            if ((options.parse && options.singlePlacementGroup)) {
              options.singlePlacementGroup = JSON.parse(options.singlePlacementGroup); } ;

            options.singlePlacementGroup = JSON.parse(options.singlePlacementGroup);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.singlePlacementGroup },]); } ;

          paramPath = ((options.path + "/") + "identity");
          if (options.identity) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.identity));
            cli.output.verbose("================================================");
            if ((options.parse && options.identity)) {
              options.identity = JSON.parse(options.identity); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.identity },]); } ;

          paramPath = ((options.path + "/") + "zones");
          if (options.zones) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.zones));
            cli.output.verbose("================================================");
            if ((options.parse && options.zones)) {
              options.zones = JSON.parse(options.zones); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.zones },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "type");
          if (options.type) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.type));
            cli.output.verbose("================================================");
            if ((options.parse && options.type)) {
              options.type = JSON.parse(options.type); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.type },]); } ;

          paramPath = ((options.path + "/") + "location");
          if (options.location) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.location));
            cli.output.verbose("================================================");
            if ((options.parse && options.location)) {
              options.location = JSON.parse(options.location); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.location },]); } ;

          paramPath = ((options.path + "/") + "tags");
          if (options.tags) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tags));
            cli.output.verbose("================================================");
            if ((options.parse && options.tags)) {
              options.tags = JSON.parse(options.tags); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tags },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet11 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet11 = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet11.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet11 = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet11.category("virtual-machine-scale-set").description($("Commands to configure virtual-machine-scale-set of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet11.command("delete").description($("Remove virtual-machine-scale-set in config string or files, e.g. \r\n{\r\n  \"sku\":{\r\n    \"name\":\"\",\r\n    \"tier\":\"\",\r\n    \"capacity\":null\r\n  },\r\n  \"plan\":{\r\n    \"name\":\"\",\r\n    \"publisher\":\"\",\r\n    \"product\":\"\",\r\n    \"promotionCode\":\"\"\r\n  },\r\n  \"upgradePolicy\":{\r\n    \"mode\":null,\r\n    \"rollingUpgradePolicy\":{\r\n      \"maxBatchInstancePercent\":null,\r\n      \"maxUnhealthyInstancePercent\":null,\r\n      \"maxUnhealthyUpgradedInstancePercent\":null,\r\n      \"pauseTimeBetweenBatches\":\"\"\r\n    },\r\n    \"automaticOSUpgrade\":null\r\n  },\r\n  \"virtualMachineProfile\":{\r\n    \"osProfile\":{\r\n      \"computerNamePrefix\":\"\",\r\n      \"adminUsername\":\"\",\r\n      \"adminPassword\":\"\",\r\n      \"customData\":\"\",\r\n      \"windowsConfiguration\":{\r\n        \"provisionVMAgent\":null,\r\n        \"enableAutomaticUpdates\":null,\r\n        \"timeZone\":\"\",\r\n        \"additionalUnattendContent\":[\r\n          {\r\n            \"passName\":null,\r\n            \"componentName\":null,\r\n            \"settingName\":null,\r\n            \"content\":\"\"\r\n          }\r\n        ],\r\n        \"winRM\":{\r\n          \"listeners\":[\r\n            {\r\n              \"protocol\":null,\r\n              \"certificateUrl\":\"\"\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      \"linuxConfiguration\":{\r\n        \"disablePasswordAuthentication\":null,\r\n        \"ssh\":{\r\n          \"publicKeys\":[\r\n            {\r\n              \"path\":\"\",\r\n              \"keyData\":\"\"\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      \"secrets\":[\r\n        {\r\n          \"sourceVault\":{\r\n            \"id\":\"\"\r\n          },\r\n          \"vaultCertificates\":[\r\n            {\r\n              \"certificateUrl\":\"\",\r\n              \"certificateStore\":\"\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"storageProfile\":{\r\n      \"imageReference\":{\r\n        \"publisher\":\"\",\r\n        \"offer\":\"\",\r\n        \"sku\":\"\",\r\n        \"version\":\"\",\r\n        \"id\":\"\"\r\n      },\r\n      \"osDisk\":{\r\n        \"name\":\"\",\r\n        \"caching\":null,\r\n        \"createOption\":\"\",\r\n        \"osType\":null,\r\n        \"image\":{\r\n          \"uri\":\"\"\r\n        },\r\n        \"vhdContainers\":[\r\n          \"\"\r\n        ],\r\n        \"managedDisk\":{\r\n          \"storageAccountType\":null\r\n        }\r\n      },\r\n      \"dataDisks\":[\r\n        {\r\n          \"name\":\"\",\r\n          \"lun\":\"\",\r\n          \"caching\":null,\r\n          \"createOption\":\"\",\r\n          \"diskSizeGB\":null,\r\n          \"managedDisk\":{\r\n            \"storageAccountType\":null\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"networkProfile\":{\r\n      \"healthProbe\":{\r\n        \"id\":\"\"\r\n      },\r\n      \"networkInterfaceConfigurations\":[\r\n        {\r\n          \"name\":\"\",\r\n          \"primary\":null,\r\n          \"enableAcceleratedNetworking\":null,\r\n          \"networkSecurityGroup\":{\r\n            \"id\":\"\"\r\n          },\r\n          \"dnsSettings\":{\r\n            \"dnsServers\":[\r\n              \"\"\r\n            ]\r\n          },\r\n          \"ipConfigurations\":[\r\n            {\r\n              \"name\":\"\",\r\n              \"subnet\":{\r\n                \"id\":\"\"\r\n              },\r\n              \"primary\":null,\r\n              \"publicIPAddressConfiguration\":{\r\n                \"name\":\"\",\r\n                \"idleTimeoutInMinutes\":null,\r\n                \"dnsSettings\":{\r\n                  \"domainNameLabel\":\"\"\r\n                }\r\n              },\r\n              \"privateIPAddressVersion\":\"\",\r\n              \"applicationGatewayBackendAddressPools\":[\r\n                {\r\n                  \"id\":\"\"\r\n                }\r\n              ],\r\n              \"loadBalancerBackendAddressPools\":[\r\n                {\r\n                  \"id\":\"\"\r\n                }\r\n              ],\r\n              \"loadBalancerInboundNatPools\":[\r\n                {\r\n                  \"id\":\"\"\r\n                }\r\n              ],\r\n              \"id\":\"\"\r\n            }\r\n          ],\r\n          \"id\":\"\"\r\n        }\r\n      ]\r\n    },\r\n    \"diagnosticsProfile\":{\r\n      \"bootDiagnostics\":{\r\n        \"enabled\":null,\r\n        \"storageUri\":\"\"\r\n      }\r\n    },\r\n    \"extensionProfile\":{\r\n      \"extensions\":[\r\n        {\r\n          \"name\":\"\",\r\n          \"forceUpdateTag\":\"\",\r\n          \"publisher\":\"\",\r\n          \"type\":\"\",\r\n          \"typeHandlerVersion\":\"\",\r\n          \"autoUpgradeMinorVersion\":null,\r\n          \"settings\":{\r\n          },\r\n          \"protectedSettings\":{\r\n          },\r\n          \"provisioningState\":\"\",\r\n          \"id\":null\r\n        }\r\n      ]\r\n    },\r\n    \"licenseType\":\"\"\r\n  },\r\n  \"provisioningState\":\"\",\r\n  \"overprovision\":null,\r\n  \"uniqueId\":\"\",\r\n  \"singlePlacementGroup\":null,\r\n  \"identity\":{\r\n    \"principalId\":\"\",\r\n    \"tenantId\":\"\",\r\n    \"type\":null\r\n  },\r\n  \"zones\":[\r\n    \"\"\r\n  ],\r\n  \"id\":null,\r\n  \"name\":null,\r\n  \"type\":null,\r\n  \"location\":\"\",\r\n  \"tags\":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--sku", $("Remove the sku value.")).option("--plan", $("Remove the plan value.")).option("--upgrade-policy", $("Remove the upgrade-policy value.")).option("--virtual-machine-profile", $("Remove the virtual-machine-profile value.")).option("--provisioning-state", $("Remove the provisioning-state value.")).option("--overprovision", $("Remove the overprovision value.")).option("--unique-id", $("Remove the unique-id value.")).option("--single-placement-group", $("Remove the single-placement-group value.")).option("--identity", $("Remove the identity value.")).option("--zones", $("Remove the zones value.")).option("--id", $("Remove the id value.")).option("--name", $("Remove the name value.")).option("--type", $("Remove the type value.")).option("--location", $("Remove the location value.")).option("--tags", $("Remove the tags value.")).execute(function __5(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__5", line: 2012 }; return __func(_, this, arguments, __5, 1, __frame, function __$__5() {



















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__5() { return (function __$__5(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__5() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "";
          anySubItem = (((((((((((((((false || options.sku) || options.plan) || options.upgradePolicy) || options.virtualMachineProfile) || options.provisioningState) || options.overprovision) || options.uniqueId) || options.singlePlacementGroup) || options.identity) || options.zones) || options.id) || options.name) || options.type) || options.location) || options.tags);
          if (anySubItem) {
            subItemPath = null;
            if (options.sku) {
              subItemPath = (options.path + "/sku");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.plan) {
              subItemPath = (options.path + "/plan");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.upgradePolicy) {
              subItemPath = (options.path + "/upgradePolicy");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.virtualMachineProfile) {
              subItemPath = (options.path + "/virtualMachineProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.provisioningState) {
              subItemPath = (options.path + "/provisioningState");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.overprovision) {
              subItemPath = (options.path + "/overprovision");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.uniqueId) {
              subItemPath = (options.path + "/uniqueId");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.singlePlacementGroup) {
              subItemPath = (options.path + "/singlePlacementGroup");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.identity) {
              subItemPath = (options.path + "/identity");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.zones) {
              subItemPath = (options.path + "/zones");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.type) {
              subItemPath = (options.path + "/type");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.location) {
              subItemPath = (options.path + "/location");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tags) {
              subItemPath = (options.path + "/tags");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsSku0S1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsSku0S1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSku0S1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsSku0S1 = parametersCreateOrUpdateVirtualMachineScaleSetsSku0S1.category("sku").description($("Commands to configure sku of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsSku0S1.command("set").description($("Set sku in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sku\" : {\r\n             \"name\":\"\",\r\n             \"tier\":\"\",\r\n             \"capacity\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--tier <tier>", $("Set the tier value.")).option("--capacity <capacity>", $("Set the capacity value.")).execute(function __6(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__6", line: 2119 }; return __func(_, this, arguments, __6, 1, __frame, function __$__6() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__6() { return (function __$__6(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__6() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/sku";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "tier");
          if (options.tier) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tier));
            cli.output.verbose("================================================");
            if ((options.parse && options.tier)) {
              options.tier = JSON.parse(options.tier); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tier },]); } ;

          paramPath = ((options.path + "/") + "capacity");
          if (options.capacity) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.capacity));
            cli.output.verbose("================================================");
            if ((options.parse && options.capacity)) {
              options.capacity = JSON.parse(options.capacity); } ;

            options.capacity = JSON.parse(options.capacity);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.capacity },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsSku1S1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsSku1S1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSku1S1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsSku1S1 = parametersCreateOrUpdateVirtualMachineScaleSetsSku1S1.category("sku").description($("Commands to configure sku of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsSku1S1.command("delete").description($("Remove sku in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sku\" : {\r\n             \"name\":\"\",\r\n             \"tier\":\"\",\r\n             \"capacity\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--name", $("Remove the name value.")).option("--tier", $("Remove the tier value.")).option("--capacity", $("Remove the capacity value.")).execute(function __7(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__7", line: 2196 }; return __func(_, this, arguments, __7, 1, __frame, function __$__7() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__7() { return (function __$__7(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__7() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/sku";
          anySubItem = (((false || options.name) || options.tier) || options.capacity);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tier) {
              subItemPath = (options.path + "/tier");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.capacity) {
              subItemPath = (options.path + "/capacity");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsPlan0P1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsPlan0P1 = catparametersCreateOrUpdateVirtualMachineScaleSetsPlan0P1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsPlan0P1 = parametersCreateOrUpdateVirtualMachineScaleSetsPlan0P1.category("plan").description($("Commands to configure plan of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsPlan0P1.command("set").description($("Set plan in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"plan\" : {\r\n             \"name\":\"\",\r\n             \"publisher\":\"\",\r\n             \"product\":\"\",\r\n             \"promotionCode\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--publisher <publisher>", $("Set the publisher value.")).option("--product <product>", $("Set the product value.")).option("--promotion-code <promotionCode>", $("Set the promotion-code value.")).execute(function __8(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__8", line: 2256 }; return __func(_, this, arguments, __8, 1, __frame, function __$__8() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__8() { return (function __$__8(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__8() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/plan";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "publisher");
          if (options.publisher) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publisher));
            cli.output.verbose("================================================");
            if ((options.parse && options.publisher)) {
              options.publisher = JSON.parse(options.publisher); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publisher },]); } ;

          paramPath = ((options.path + "/") + "product");
          if (options.product) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.product));
            cli.output.verbose("================================================");
            if ((options.parse && options.product)) {
              options.product = JSON.parse(options.product); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.product },]); } ;

          paramPath = ((options.path + "/") + "promotionCode");
          if (options.promotionCode) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.promotionCode));
            cli.output.verbose("================================================");
            if ((options.parse && options.promotionCode)) {
              options.promotionCode = JSON.parse(options.promotionCode); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.promotionCode },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsPlan1P1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsPlan1P1 = catparametersCreateOrUpdateVirtualMachineScaleSetsPlan1P1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsPlan1P1 = parametersCreateOrUpdateVirtualMachineScaleSetsPlan1P1.category("plan").description($("Commands to configure plan of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsPlan1P1.command("delete").description($("Remove plan in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"plan\" : {\r\n             \"name\":\"\",\r\n             \"publisher\":\"\",\r\n             \"product\":\"\",\r\n             \"promotionCode\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--name", $("Remove the name value.")).option("--publisher", $("Remove the publisher value.")).option("--product", $("Remove the product value.")).option("--promotion-code", $("Remove the promotion-code value.")).execute(function __9(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__9", line: 2344 }; return __func(_, this, arguments, __9, 1, __frame, function __$__9() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__9() { return (function __$__9(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__9() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/plan";
          anySubItem = ((((false || options.name) || options.publisher) || options.product) || options.promotionCode);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.publisher) {
              subItemPath = (options.path + "/publisher");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.product) {
              subItemPath = (options.path + "/product");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.promotionCode) {
              subItemPath = (options.path + "/promotionCode");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0UP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0UP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0UP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0UP1 = parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0UP1.category("upgrade-policy").description($("Commands to configure upgrade-policy of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0UP1.command("set").description($("Set upgrade-policy in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"upgradePolicy\" : {\r\n             \"mode\":null,\r\n             \"rollingUpgradePolicy\":{\r\n               \"maxBatchInstancePercent\":null,\r\n               \"maxUnhealthyInstancePercent\":null,\r\n               \"maxUnhealthyUpgradedInstancePercent\":null,\r\n               \"pauseTimeBetweenBatches\":\"\"\r\n             },\r\n             \"automaticOSUpgrade\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--mode <mode>", $("Set the mode value.")).option("--rolling-upgrade-policy <rollingUpgradePolicy>", $("Set the rolling-upgrade-policy value.")).option("--automatic-os-upgrade <automaticOSUpgrade>", $("Set the automatic-os-upgrade value.")).execute(function __10(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__10", line: 2407 }; return __func(_, this, arguments, __10, 1, __frame, function __$__10() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__10() { return (function __$__10(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__10() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/upgradePolicy";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "mode");
          if (options.mode) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.mode));
            cli.output.verbose("================================================");
            if ((options.parse && options.mode)) {
              options.mode = JSON.parse(options.mode); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.mode },]); } ;

          paramPath = ((options.path + "/") + "rollingUpgradePolicy");
          if (options.rollingUpgradePolicy) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.rollingUpgradePolicy));
            cli.output.verbose("================================================");
            if ((options.parse && options.rollingUpgradePolicy)) {
              options.rollingUpgradePolicy = JSON.parse(options.rollingUpgradePolicy); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.rollingUpgradePolicy },]); } ;

          paramPath = ((options.path + "/") + "automaticOSUpgrade");
          if (options.automaticOSUpgrade) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.automaticOSUpgrade));
            cli.output.verbose("================================================");
            if ((options.parse && options.automaticOSUpgrade)) {
              options.automaticOSUpgrade = JSON.parse(options.automaticOSUpgrade); } ;

            options.automaticOSUpgrade = JSON.parse(options.automaticOSUpgrade);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.automaticOSUpgrade },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1UP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1UP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1UP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1UP1 = parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1UP1.category("upgrade-policy").description($("Commands to configure upgrade-policy of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1UP1.command("delete").description($("Remove upgrade-policy in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"upgradePolicy\" : {\r\n             \"mode\":null,\r\n             \"rollingUpgradePolicy\":{\r\n               \"maxBatchInstancePercent\":null,\r\n               \"maxUnhealthyInstancePercent\":null,\r\n               \"maxUnhealthyUpgradedInstancePercent\":null,\r\n               \"pauseTimeBetweenBatches\":\"\"\r\n             },\r\n             \"automaticOSUpgrade\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--mode", $("Remove the mode value.")).option("--rolling-upgrade-policy", $("Remove the rolling-upgrade-policy value.")).option("--automatic-os-upgrade", $("Remove the automatic-os-upgrade value.")).execute(function __11(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__11", line: 2484 }; return __func(_, this, arguments, __11, 1, __frame, function __$__11() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__11() { return (function __$__11(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__11() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/upgradePolicy";
          anySubItem = (((false || options.mode) || options.rollingUpgradePolicy) || options.automaticOSUpgrade);
          if (anySubItem) {
            subItemPath = null;
            if (options.mode) {
              subItemPath = (options.path + "/mode");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.rollingUpgradePolicy) {
              subItemPath = (options.path + "/rollingUpgradePolicy");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.automaticOSUpgrade) {
              subItemPath = (options.path + "/automaticOSUpgrade");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsRollingUpgradePolicy0UPrUP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsRollingUpgradePolicy0UPrUP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsRollingUpgradePolicy0UPrUP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsRollingUpgradePolicy0UPrUP1 = parametersCreateOrUpdateVirtualMachineScaleSetsRollingUpgradePolicy0UPrUP1.category("rolling-upgrade-policy").description($("Commands to configure rolling-upgrade-policy of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsRollingUpgradePolicy0UPrUP1.command("set").description($("Set rolling-upgrade-policy in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"rollingUpgradePolicy\" : {\r\n             \"maxBatchInstancePercent\":null,\r\n             \"maxUnhealthyInstancePercent\":null,\r\n             \"maxUnhealthyUpgradedInstancePercent\":null,\r\n             \"pauseTimeBetweenBatches\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--max-batch-instance-percent <maxBatchInstancePercent>", $("Set the max-batch-instance-percent value.")).option("--max-unhealthy-instance-percent <maxUnhealthyInstancePercent>", $("Set the max-unhealthy-instance-percent value.")).option("--max-unhealthy-upgraded-instance-percent <maxUnhealthyUpgradedInstancePercent>", $("Set the max-unhealthy-upgraded-instance-percent value.")).option("--pause-time-between-batches <pauseTimeBetweenBatches>", $("Set the pause-time-between-batches value.")).execute(function __12(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__12", line: 2544 }; return __func(_, this, arguments, __12, 1, __frame, function __$__12() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__12() { return (function __$__12(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__12() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/upgradePolicy/rollingUpgradePolicy";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "maxBatchInstancePercent");
          if (options.maxBatchInstancePercent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.maxBatchInstancePercent));
            cli.output.verbose("================================================");
            if ((options.parse && options.maxBatchInstancePercent)) {
              options.maxBatchInstancePercent = JSON.parse(options.maxBatchInstancePercent); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.maxBatchInstancePercent },]); } ;

          paramPath = ((options.path + "/") + "maxUnhealthyInstancePercent");
          if (options.maxUnhealthyInstancePercent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.maxUnhealthyInstancePercent));
            cli.output.verbose("================================================");
            if ((options.parse && options.maxUnhealthyInstancePercent)) {
              options.maxUnhealthyInstancePercent = JSON.parse(options.maxUnhealthyInstancePercent); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.maxUnhealthyInstancePercent },]); } ;

          paramPath = ((options.path + "/") + "maxUnhealthyUpgradedInstancePercent");
          if (options.maxUnhealthyUpgradedInstancePercent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.maxUnhealthyUpgradedInstancePercent));
            cli.output.verbose("================================================");
            if ((options.parse && options.maxUnhealthyUpgradedInstancePercent)) {
              options.maxUnhealthyUpgradedInstancePercent = JSON.parse(options.maxUnhealthyUpgradedInstancePercent); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.maxUnhealthyUpgradedInstancePercent },]); } ;

          paramPath = ((options.path + "/") + "pauseTimeBetweenBatches");
          if (options.pauseTimeBetweenBatches) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.pauseTimeBetweenBatches));
            cli.output.verbose("================================================");
            if ((options.parse && options.pauseTimeBetweenBatches)) {
              options.pauseTimeBetweenBatches = JSON.parse(options.pauseTimeBetweenBatches); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.pauseTimeBetweenBatches },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsRollingUpgradePolicy1UPrUP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsRollingUpgradePolicy1UPrUP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsRollingUpgradePolicy1UPrUP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsRollingUpgradePolicy1UPrUP1 = parametersCreateOrUpdateVirtualMachineScaleSetsRollingUpgradePolicy1UPrUP1.category("rolling-upgrade-policy").description($("Commands to configure rolling-upgrade-policy of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsRollingUpgradePolicy1UPrUP1.command("delete").description($("Remove rolling-upgrade-policy in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"rollingUpgradePolicy\" : {\r\n             \"maxBatchInstancePercent\":null,\r\n             \"maxUnhealthyInstancePercent\":null,\r\n             \"maxUnhealthyUpgradedInstancePercent\":null,\r\n             \"pauseTimeBetweenBatches\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--max-batch-instance-percent", $("Remove the max-batch-instance-percent value.")).option("--max-unhealthy-instance-percent", $("Remove the max-unhealthy-instance-percent value.")).option("--max-unhealthy-upgraded-instance-percent", $("Remove the max-unhealthy-upgraded-instance-percent value.")).option("--pause-time-between-batches", $("Remove the pause-time-between-batches value.")).execute(function __13(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__13", line: 2632 }; return __func(_, this, arguments, __13, 1, __frame, function __$__13() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__13() { return (function __$__13(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__13() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/upgradePolicy/rollingUpgradePolicy";
          anySubItem = ((((false || options.maxBatchInstancePercent) || options.maxUnhealthyInstancePercent) || options.maxUnhealthyUpgradedInstancePercent) || options.pauseTimeBetweenBatches);
          if (anySubItem) {
            subItemPath = null;
            if (options.maxBatchInstancePercent) {
              subItemPath = (options.path + "/maxBatchInstancePercent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.maxUnhealthyInstancePercent) {
              subItemPath = (options.path + "/maxUnhealthyInstancePercent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.maxUnhealthyUpgradedInstancePercent) {
              subItemPath = (options.path + "/maxUnhealthyUpgradedInstancePercent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.pauseTimeBetweenBatches) {
              subItemPath = (options.path + "/pauseTimeBetweenBatches");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP1 = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP1.category("virtual-machine-profile").description($("Commands to configure virtual-machine-profile of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP1.command("set").description($("Set virtual-machine-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"virtualMachineProfile\" : {\r\n             \"osProfile\":{\r\n               \"computerNamePrefix\":\"\",\r\n               \"adminUsername\":\"\",\r\n               \"adminPassword\":\"\",\r\n               \"customData\":\"\",\r\n               \"windowsConfiguration\":{\r\n                 \"provisionVMAgent\":null,\r\n                 \"enableAutomaticUpdates\":null,\r\n                 \"timeZone\":\"\",\r\n                 \"additionalUnattendContent\":[\r\n                   {\r\n                     \"passName\":null,\r\n                     \"componentName\":null,\r\n                     \"settingName\":null,\r\n                     \"content\":\"\"\r\n                   }\r\n                 ],\r\n                 \"winRM\":{\r\n                   \"listeners\":[\r\n                     {\r\n                       \"protocol\":null,\r\n                       \"certificateUrl\":\"\"\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               \"linuxConfiguration\":{\r\n                 \"disablePasswordAuthentication\":null,\r\n                 \"ssh\":{\r\n                   \"publicKeys\":[\r\n                     {\r\n                       \"path\":\"\",\r\n                       \"keyData\":\"\"\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               \"secrets\":[\r\n                 {\r\n                   \"sourceVault\":{\r\n                     \"id\":\"\"\r\n                   },\r\n                   \"vaultCertificates\":[\r\n                     {\r\n                       \"certificateUrl\":\"\",\r\n                       \"certificateStore\":\"\"\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             \"storageProfile\":{\r\n               \"imageReference\":{\r\n                 \"publisher\":\"\",\r\n                 \"offer\":\"\",\r\n                 \"sku\":\"\",\r\n                 \"version\":\"\",\r\n                 \"id\":\"\"\r\n               },\r\n               \"osDisk\":{\r\n                 \"name\":\"\",\r\n                 \"caching\":null,\r\n                 \"createOption\":\"\",\r\n                 \"osType\":null,\r\n                 \"image\":{\r\n                   \"uri\":\"\"\r\n                 },\r\n                 \"vhdContainers\":[\r\n                   \"\"\r\n                 ],\r\n                 \"managedDisk\":{\r\n                   \"storageAccountType\":null\r\n                 }\r\n               },\r\n               \"dataDisks\":[\r\n                 {\r\n                   \"name\":\"\",\r\n                   \"lun\":\"\",\r\n                   \"caching\":null,\r\n                   \"createOption\":\"\",\r\n                   \"diskSizeGB\":null,\r\n                   \"managedDisk\":{\r\n                     \"storageAccountType\":null\r\n                   }\r\n                 }\r\n               ]\r\n             },\r\n             \"networkProfile\":{\r\n               \"healthProbe\":{\r\n                 \"id\":\"\"\r\n               },\r\n               \"networkInterfaceConfigurations\":[\r\n                 {\r\n                   \"name\":\"\",\r\n                   \"primary\":null,\r\n                   \"enableAcceleratedNetworking\":null,\r\n                   \"networkSecurityGroup\":{\r\n                     \"id\":\"\"\r\n                   },\r\n                   \"dnsSettings\":{\r\n                     \"dnsServers\":[\r\n                       \"\"\r\n                     ]\r\n                   },\r\n                   \"ipConfigurations\":[\r\n                     {\r\n                       \"name\":\"\",\r\n                       \"subnet\":{\r\n                         \"id\":\"\"\r\n                       },\r\n                       \"primary\":null,\r\n                       \"publicIPAddressConfiguration\":{\r\n                         \"name\":\"\",\r\n                         \"idleTimeoutInMinutes\":null,\r\n                         \"dnsSettings\":{\r\n                           \"domainNameLabel\":\"\"\r\n                         }\r\n                       },\r\n                       \"privateIPAddressVersion\":\"\",\r\n                       \"applicationGatewayBackendAddressPools\":[\r\n                         {\r\n                           \"id\":\"\"\r\n                         }\r\n                       ],\r\n                       \"loadBalancerBackendAddressPools\":[\r\n                         {\r\n                           \"id\":\"\"\r\n                         }\r\n                       ],\r\n                       \"loadBalancerInboundNatPools\":[\r\n                         {\r\n                           \"id\":\"\"\r\n                         }\r\n                       ],\r\n                       \"id\":\"\"\r\n                     }\r\n                   ],\r\n                   \"id\":\"\"\r\n                 }\r\n               ]\r\n             },\r\n             \"diagnosticsProfile\":{\r\n               \"bootDiagnostics\":{\r\n                 \"enabled\":null,\r\n                 \"storageUri\":\"\"\r\n               }\r\n             },\r\n             \"extensionProfile\":{\r\n               \"extensions\":[\r\n                 {\r\n                   \"name\":\"\",\r\n                   \"forceUpdateTag\":\"\",\r\n                   \"publisher\":\"\",\r\n                   \"type\":\"\",\r\n                   \"typeHandlerVersion\":\"\",\r\n                   \"autoUpgradeMinorVersion\":null,\r\n                   \"settings\":{\r\n                   },\r\n                   \"protectedSettings\":{\r\n                   },\r\n                   \"provisioningState\":\"\",\r\n                   \"id\":null\r\n                 }\r\n               ]\r\n             },\r\n             \"licenseType\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--os-profile <osProfile>", $("Set the os-profile value.")).option("--storage-profile <storageProfile>", $("Set the storage-profile value.")).option("--network-profile <networkProfile>", $("Set the network-profile value.")).option("--diagnostics-profile <diagnosticsProfile>", $("Set the diagnostics-profile value.")).option("--extension-profile <extensionProfile>", $("Set the extension-profile value.")).option("--license-type <licenseType>", $("Set the license-type value.")).execute(function __14(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__14", line: 2698 }; return __func(_, this, arguments, __14, 1, __frame, function __$__14() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__14() { return (function __$__14(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__14() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "osProfile");
          if (options.osProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.osProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.osProfile)) {
              options.osProfile = JSON.parse(options.osProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.osProfile },]); } ;

          paramPath = ((options.path + "/") + "storageProfile");
          if (options.storageProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageProfile)) {
              options.storageProfile = JSON.parse(options.storageProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageProfile },]); } ;

          paramPath = ((options.path + "/") + "networkProfile");
          if (options.networkProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.networkProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.networkProfile)) {
              options.networkProfile = JSON.parse(options.networkProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.networkProfile },]); } ;

          paramPath = ((options.path + "/") + "diagnosticsProfile");
          if (options.diagnosticsProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diagnosticsProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.diagnosticsProfile)) {
              options.diagnosticsProfile = JSON.parse(options.diagnosticsProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diagnosticsProfile },]); } ;

          paramPath = ((options.path + "/") + "extensionProfile");
          if (options.extensionProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.extensionProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.extensionProfile)) {
              options.extensionProfile = JSON.parse(options.extensionProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.extensionProfile },]); } ;

          paramPath = ((options.path + "/") + "licenseType");
          if (options.licenseType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.licenseType));
            cli.output.verbose("================================================");
            if ((options.parse && options.licenseType)) {
              options.licenseType = JSON.parse(options.licenseType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.licenseType },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP1 = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP1.category("virtual-machine-profile").description($("Commands to configure virtual-machine-profile of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP1.command("delete").description($("Remove virtual-machine-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"virtualMachineProfile\" : {\r\n             \"osProfile\":{\r\n               \"computerNamePrefix\":\"\",\r\n               \"adminUsername\":\"\",\r\n               \"adminPassword\":\"\",\r\n               \"customData\":\"\",\r\n               \"windowsConfiguration\":{\r\n                 \"provisionVMAgent\":null,\r\n                 \"enableAutomaticUpdates\":null,\r\n                 \"timeZone\":\"\",\r\n                 \"additionalUnattendContent\":[\r\n                   {\r\n                     \"passName\":null,\r\n                     \"componentName\":null,\r\n                     \"settingName\":null,\r\n                     \"content\":\"\"\r\n                   }\r\n                 ],\r\n                 \"winRM\":{\r\n                   \"listeners\":[\r\n                     {\r\n                       \"protocol\":null,\r\n                       \"certificateUrl\":\"\"\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               \"linuxConfiguration\":{\r\n                 \"disablePasswordAuthentication\":null,\r\n                 \"ssh\":{\r\n                   \"publicKeys\":[\r\n                     {\r\n                       \"path\":\"\",\r\n                       \"keyData\":\"\"\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               \"secrets\":[\r\n                 {\r\n                   \"sourceVault\":{\r\n                     \"id\":\"\"\r\n                   },\r\n                   \"vaultCertificates\":[\r\n                     {\r\n                       \"certificateUrl\":\"\",\r\n                       \"certificateStore\":\"\"\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             \"storageProfile\":{\r\n               \"imageReference\":{\r\n                 \"publisher\":\"\",\r\n                 \"offer\":\"\",\r\n                 \"sku\":\"\",\r\n                 \"version\":\"\",\r\n                 \"id\":\"\"\r\n               },\r\n               \"osDisk\":{\r\n                 \"name\":\"\",\r\n                 \"caching\":null,\r\n                 \"createOption\":\"\",\r\n                 \"osType\":null,\r\n                 \"image\":{\r\n                   \"uri\":\"\"\r\n                 },\r\n                 \"vhdContainers\":[\r\n                   \"\"\r\n                 ],\r\n                 \"managedDisk\":{\r\n                   \"storageAccountType\":null\r\n                 }\r\n               },\r\n               \"dataDisks\":[\r\n                 {\r\n                   \"name\":\"\",\r\n                   \"lun\":\"\",\r\n                   \"caching\":null,\r\n                   \"createOption\":\"\",\r\n                   \"diskSizeGB\":null,\r\n                   \"managedDisk\":{\r\n                     \"storageAccountType\":null\r\n                   }\r\n                 }\r\n               ]\r\n             },\r\n             \"networkProfile\":{\r\n               \"healthProbe\":{\r\n                 \"id\":\"\"\r\n               },\r\n               \"networkInterfaceConfigurations\":[\r\n                 {\r\n                   \"name\":\"\",\r\n                   \"primary\":null,\r\n                   \"enableAcceleratedNetworking\":null,\r\n                   \"networkSecurityGroup\":{\r\n                     \"id\":\"\"\r\n                   },\r\n                   \"dnsSettings\":{\r\n                     \"dnsServers\":[\r\n                       \"\"\r\n                     ]\r\n                   },\r\n                   \"ipConfigurations\":[\r\n                     {\r\n                       \"name\":\"\",\r\n                       \"subnet\":{\r\n                         \"id\":\"\"\r\n                       },\r\n                       \"primary\":null,\r\n                       \"publicIPAddressConfiguration\":{\r\n                         \"name\":\"\",\r\n                         \"idleTimeoutInMinutes\":null,\r\n                         \"dnsSettings\":{\r\n                           \"domainNameLabel\":\"\"\r\n                         }\r\n                       },\r\n                       \"privateIPAddressVersion\":\"\",\r\n                       \"applicationGatewayBackendAddressPools\":[\r\n                         {\r\n                           \"id\":\"\"\r\n                         }\r\n                       ],\r\n                       \"loadBalancerBackendAddressPools\":[\r\n                         {\r\n                           \"id\":\"\"\r\n                         }\r\n                       ],\r\n                       \"loadBalancerInboundNatPools\":[\r\n                         {\r\n                           \"id\":\"\"\r\n                         }\r\n                       ],\r\n                       \"id\":\"\"\r\n                     }\r\n                   ],\r\n                   \"id\":\"\"\r\n                 }\r\n               ]\r\n             },\r\n             \"diagnosticsProfile\":{\r\n               \"bootDiagnostics\":{\r\n                 \"enabled\":null,\r\n                 \"storageUri\":\"\"\r\n               }\r\n             },\r\n             \"extensionProfile\":{\r\n               \"extensions\":[\r\n                 {\r\n                   \"name\":\"\",\r\n                   \"forceUpdateTag\":\"\",\r\n                   \"publisher\":\"\",\r\n                   \"type\":\"\",\r\n                   \"typeHandlerVersion\":\"\",\r\n                   \"autoUpgradeMinorVersion\":null,\r\n                   \"settings\":{\r\n                   },\r\n                   \"protectedSettings\":{\r\n                   },\r\n                   \"provisioningState\":\"\",\r\n                   \"id\":null\r\n                 }\r\n               ]\r\n             },\r\n             \"licenseType\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--os-profile", $("Remove the os-profile value.")).option("--storage-profile", $("Remove the storage-profile value.")).option("--network-profile", $("Remove the network-profile value.")).option("--diagnostics-profile", $("Remove the diagnostics-profile value.")).option("--extension-profile", $("Remove the extension-profile value.")).option("--license-type", $("Remove the license-type value.")).execute(function __15(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__15", line: 2810 }; return __func(_, this, arguments, __15, 1, __frame, function __$__15() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__15() { return (function __$__15(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__15() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile";
          anySubItem = ((((((false || options.osProfile) || options.storageProfile) || options.networkProfile) || options.diagnosticsProfile) || options.extensionProfile) || options.licenseType);
          if (anySubItem) {
            subItemPath = null;
            if (options.osProfile) {
              subItemPath = (options.path + "/osProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.storageProfile) {
              subItemPath = (options.path + "/storageProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.networkProfile) {
              subItemPath = (options.path + "/networkProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.diagnosticsProfile) {
              subItemPath = (options.path + "/diagnosticsProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.extensionProfile) {
              subItemPath = (options.path + "/extensionProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.licenseType) {
              subItemPath = (options.path + "/licenseType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0VMPoP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0VMPoP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0VMPoP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0VMPoP1 = parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0VMPoP1.category("os-profile").description($("Commands to configure os-profile of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0VMPoP1.command("set").description($("Set os-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"osProfile\" : {\r\n             \"computerNamePrefix\":\"\",\r\n             \"adminUsername\":\"\",\r\n             \"adminPassword\":\"\",\r\n             \"customData\":\"\",\r\n             \"windowsConfiguration\":{\r\n               \"provisionVMAgent\":null,\r\n               \"enableAutomaticUpdates\":null,\r\n               \"timeZone\":\"\",\r\n               \"additionalUnattendContent\":[\r\n                 {\r\n                   \"passName\":null,\r\n                   \"componentName\":null,\r\n                   \"settingName\":null,\r\n                   \"content\":\"\"\r\n                 }\r\n               ],\r\n               \"winRM\":{\r\n                 \"listeners\":[\r\n                   {\r\n                     \"protocol\":null,\r\n                     \"certificateUrl\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             \"linuxConfiguration\":{\r\n               \"disablePasswordAuthentication\":null,\r\n               \"ssh\":{\r\n                 \"publicKeys\":[\r\n                   {\r\n                     \"path\":\"\",\r\n                     \"keyData\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             \"secrets\":[\r\n               {\r\n                 \"sourceVault\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"vaultCertificates\":[\r\n                   {\r\n                     \"certificateUrl\":\"\",\r\n                     \"certificateStore\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--computer-name-prefix <computerNamePrefix>", $("Set the computer-name-prefix value.")).option("--admin-username <adminUsername>", $("Set the admin-username value.")).option("--admin-password <adminPassword>", $("Set the admin-password value.")).option("--custom-data <customData>", $("Set the custom-data value.")).option("--windows-configuration <windowsConfiguration>", $("Set the windows-configuration value.")).option("--linux-configuration <linuxConfiguration>", $("Set the linux-configuration value.")).option("--secrets <secrets>", $("Set the secrets value.")).execute(function __16(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__16", line: 2885 }; return __func(_, this, arguments, __16, 1, __frame, function __$__16() {












      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__16() { return (function __$__16(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__16() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/osProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "computerNamePrefix");
          if (options.computerNamePrefix) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.computerNamePrefix));
            cli.output.verbose("================================================");
            if ((options.parse && options.computerNamePrefix)) {
              options.computerNamePrefix = JSON.parse(options.computerNamePrefix); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.computerNamePrefix },]); } ;

          paramPath = ((options.path + "/") + "adminUsername");
          if (options.adminUsername) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.adminUsername));
            cli.output.verbose("================================================");
            if ((options.parse && options.adminUsername)) {
              options.adminUsername = JSON.parse(options.adminUsername); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.adminUsername },]); } ;

          paramPath = ((options.path + "/") + "adminPassword");
          if (options.adminPassword) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.adminPassword));
            cli.output.verbose("================================================");
            if ((options.parse && options.adminPassword)) {
              options.adminPassword = JSON.parse(options.adminPassword); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.adminPassword },]); } ;

          paramPath = ((options.path + "/") + "customData");
          if (options.customData) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.customData));
            cli.output.verbose("================================================");
            if ((options.parse && options.customData)) {
              options.customData = JSON.parse(options.customData); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.customData },]); } ;

          paramPath = ((options.path + "/") + "windowsConfiguration");
          if (options.windowsConfiguration) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.windowsConfiguration));
            cli.output.verbose("================================================");
            if ((options.parse && options.windowsConfiguration)) {
              options.windowsConfiguration = JSON.parse(options.windowsConfiguration); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.windowsConfiguration },]); } ;

          paramPath = ((options.path + "/") + "linuxConfiguration");
          if (options.linuxConfiguration) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.linuxConfiguration));
            cli.output.verbose("================================================");
            if ((options.parse && options.linuxConfiguration)) {
              options.linuxConfiguration = JSON.parse(options.linuxConfiguration); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.linuxConfiguration },]); } ;

          paramPath = ((options.path + "/") + "secrets");
          if (options.secrets) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.secrets));
            cli.output.verbose("================================================");
            if ((options.parse && options.secrets)) {
              options.secrets = JSON.parse(options.secrets); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.secrets },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1VMPoP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1VMPoP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1VMPoP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1VMPoP1 = parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1VMPoP1.category("os-profile").description($("Commands to configure os-profile of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1VMPoP1.command("delete").description($("Remove os-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"osProfile\" : {\r\n             \"computerNamePrefix\":\"\",\r\n             \"adminUsername\":\"\",\r\n             \"adminPassword\":\"\",\r\n             \"customData\":\"\",\r\n             \"windowsConfiguration\":{\r\n               \"provisionVMAgent\":null,\r\n               \"enableAutomaticUpdates\":null,\r\n               \"timeZone\":\"\",\r\n               \"additionalUnattendContent\":[\r\n                 {\r\n                   \"passName\":null,\r\n                   \"componentName\":null,\r\n                   \"settingName\":null,\r\n                   \"content\":\"\"\r\n                 }\r\n               ],\r\n               \"winRM\":{\r\n                 \"listeners\":[\r\n                   {\r\n                     \"protocol\":null,\r\n                     \"certificateUrl\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             \"linuxConfiguration\":{\r\n               \"disablePasswordAuthentication\":null,\r\n               \"ssh\":{\r\n                 \"publicKeys\":[\r\n                   {\r\n                     \"path\":\"\",\r\n                     \"keyData\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             \"secrets\":[\r\n               {\r\n                 \"sourceVault\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"vaultCertificates\":[\r\n                   {\r\n                     \"certificateUrl\":\"\",\r\n                     \"certificateStore\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--computer-name-prefix", $("Remove the computer-name-prefix value.")).option("--admin-username", $("Remove the admin-username value.")).option("--admin-password", $("Remove the admin-password value.")).option("--custom-data", $("Remove the custom-data value.")).option("--windows-configuration", $("Remove the windows-configuration value.")).option("--linux-configuration", $("Remove the linux-configuration value.")).option("--secrets", $("Remove the secrets value.")).execute(function __17(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__17", line: 3009 }; return __func(_, this, arguments, __17, 1, __frame, function __$__17() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__17() { return (function __$__17(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__17() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/osProfile";
          anySubItem = (((((((false || options.computerNamePrefix) || options.adminUsername) || options.adminPassword) || options.customData) || options.windowsConfiguration) || options.linuxConfiguration) || options.secrets);
          if (anySubItem) {
            subItemPath = null;
            if (options.computerNamePrefix) {
              subItemPath = (options.path + "/computerNamePrefix");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.adminUsername) {
              subItemPath = (options.path + "/adminUsername");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.adminPassword) {
              subItemPath = (options.path + "/adminPassword");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.customData) {
              subItemPath = (options.path + "/customData");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.windowsConfiguration) {
              subItemPath = (options.path + "/windowsConfiguration");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.linuxConfiguration) {
              subItemPath = (options.path + "/linuxConfiguration");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.secrets) {
              subItemPath = (options.path + "/secrets");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC1 = parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC1.category("windows-configuration").description($("Commands to configure windows-configuration of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC1.command("set").description($("Set windows-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"windowsConfiguration\" : {\r\n             \"provisionVMAgent\":null,\r\n             \"enableAutomaticUpdates\":null,\r\n             \"timeZone\":\"\",\r\n             \"additionalUnattendContent\":[\r\n               {\r\n                 \"passName\":null,\r\n                 \"componentName\":null,\r\n                 \"settingName\":null,\r\n                 \"content\":\"\"\r\n               }\r\n             ],\r\n             \"winRM\":{\r\n               \"listeners\":[\r\n                 {\r\n                   \"protocol\":null,\r\n                   \"certificateUrl\":\"\"\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--provision-vm-agent <provisionVMAgent>", $("Set the provision-vm-agent value.")).option("--enable-automatic-updates <enableAutomaticUpdates>", $("Set the enable-automatic-updates value.")).option("--time-zone <timeZone>", $("Set the time-zone value.")).option("--additional-unattend-content <additionalUnattendContent>", $("Set the additional-unattend-content value.")).option("--win-rm <winRM>", $("Set the win-rm value.")).execute(function __18(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__18", line: 3086 }; return __func(_, this, arguments, __18, 1, __frame, function __$__18() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__18() { return (function __$__18(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__18() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/osProfile/windowsConfiguration";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "provisionVMAgent");
          if (options.provisionVMAgent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.provisionVMAgent));
            cli.output.verbose("================================================");
            if ((options.parse && options.provisionVMAgent)) {
              options.provisionVMAgent = JSON.parse(options.provisionVMAgent); } ;

            options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.provisionVMAgent },]); } ;

          paramPath = ((options.path + "/") + "enableAutomaticUpdates");
          if (options.enableAutomaticUpdates) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.enableAutomaticUpdates));
            cli.output.verbose("================================================");
            if ((options.parse && options.enableAutomaticUpdates)) {
              options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates); } ;

            options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.enableAutomaticUpdates },]); } ;

          paramPath = ((options.path + "/") + "timeZone");
          if (options.timeZone) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.timeZone));
            cli.output.verbose("================================================");
            if ((options.parse && options.timeZone)) {
              options.timeZone = JSON.parse(options.timeZone); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.timeZone },]); } ;

          paramPath = ((options.path + "/") + "additionalUnattendContent");
          if (options.additionalUnattendContent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.additionalUnattendContent));
            cli.output.verbose("================================================");
            if ((options.parse && options.additionalUnattendContent)) {
              options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.additionalUnattendContent },]); } ;

          paramPath = ((options.path + "/") + "winRM");
          if (options.winRM) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.winRM));
            cli.output.verbose("================================================");
            if ((options.parse && options.winRM)) {
              options.winRM = JSON.parse(options.winRM); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.winRM },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC1 = parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC1.category("windows-configuration").description($("Commands to configure windows-configuration of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC1.command("delete").description($("Remove windows-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"windowsConfiguration\" : {\r\n             \"provisionVMAgent\":null,\r\n             \"enableAutomaticUpdates\":null,\r\n             \"timeZone\":\"\",\r\n             \"additionalUnattendContent\":[\r\n               {\r\n                 \"passName\":null,\r\n                 \"componentName\":null,\r\n                 \"settingName\":null,\r\n                 \"content\":\"\"\r\n               }\r\n             ],\r\n             \"winRM\":{\r\n               \"listeners\":[\r\n                 {\r\n                   \"protocol\":null,\r\n                   \"certificateUrl\":\"\"\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--provision-vm-agent", $("Remove the provision-vm-agent value.")).option("--enable-automatic-updates", $("Remove the enable-automatic-updates value.")).option("--time-zone", $("Remove the time-zone value.")).option("--additional-unattend-content", $("Remove the additional-unattend-content value.")).option("--win-rm", $("Remove the win-rm value.")).execute(function __19(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__19", line: 3188 }; return __func(_, this, arguments, __19, 1, __frame, function __$__19() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__19() { return (function __$__19(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__19() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/osProfile/windowsConfiguration";
          anySubItem = (((((false || options.provisionVMAgent) || options.enableAutomaticUpdates) || options.timeZone) || options.additionalUnattendContent) || options.winRM);
          if (anySubItem) {
            subItemPath = null;
            if (options.provisionVMAgent) {
              subItemPath = (options.path + "/provisionVMAgent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.enableAutomaticUpdates) {
              subItemPath = (options.path + "/enableAutomaticUpdates");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.timeZone) {
              subItemPath = (options.path + "/timeZone");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.additionalUnattendContent) {
              subItemPath = (options.path + "/additionalUnattendContent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.winRM) {
              subItemPath = (options.path + "/winRM");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC1 = parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC1.category("additional-unattend-content").description($("Commands to configure additional-unattend-content of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC1.command("set").description($("Set additional-unattend-content in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"additionalUnattendContent\" : {\r\n             \"passName\":null,\r\n             \"componentName\":null,\r\n             \"settingName\":null,\r\n             \"content\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--pass-name <passName>", $("Set the pass-name value.")).option("--component-name <componentName>", $("Set the component-name value.")).option("--setting-name <settingName>", $("Set the setting-name value.")).option("--content <content>", $("Set the content value.")).execute(function __20(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__20", line: 3258 }; return __func(_, this, arguments, __20, 1, __frame, function __$__20() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__20() { return (function __$__20(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__20() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "passName");
          if (options.passName) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.passName));
            cli.output.verbose("================================================");
            if ((options.parse && options.passName)) {
              options.passName = JSON.parse(options.passName); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.passName },]); } ;

          paramPath = ((options.path + "/") + "componentName");
          if (options.componentName) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.componentName));
            cli.output.verbose("================================================");
            if ((options.parse && options.componentName)) {
              options.componentName = JSON.parse(options.componentName); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.componentName },]); } ;

          paramPath = ((options.path + "/") + "settingName");
          if (options.settingName) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.settingName));
            cli.output.verbose("================================================");
            if ((options.parse && options.settingName)) {
              options.settingName = JSON.parse(options.settingName); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.settingName },]); } ;

          paramPath = ((options.path + "/") + "content");
          if (options.content) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.content));
            cli.output.verbose("================================================");
            if ((options.parse && options.content)) {
              options.content = JSON.parse(options.content); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.content },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC1 = parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC1.category("additional-unattend-content").description($("Commands to configure additional-unattend-content of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC1.command("delete").description($("Remove additional-unattend-content in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"additionalUnattendContent\" : {\r\n             \"passName\":null,\r\n             \"componentName\":null,\r\n             \"settingName\":null,\r\n             \"content\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--pass-name", $("Remove the pass-name value.")).option("--component-name", $("Remove the component-name value.")).option("--setting-name", $("Remove the setting-name value.")).option("--content", $("Remove the content value.")).execute(function __21(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__21", line: 3351 }; return __func(_, this, arguments, __21, 1, __frame, function __$__21() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__21() { return (function __$__21(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__21() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((((false || options.passName) || options.componentName) || options.settingName) || options.content);
          if (anySubItem) {
            subItemPath = null;
            if (options.passName) {
              subItemPath = (options.path + "/passName");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.componentName) {
              subItemPath = (options.path + "/componentName");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.settingName) {
              subItemPath = (options.path + "/settingName");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.content) {
              subItemPath = (options.path + "/content");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM1 = catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM1 = parametersCreateOrUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM1.category("win-rm").description($("Commands to configure win-rm of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM1.command("set").description($("Set win-rm in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"winRM\" : {\r\n             \"listeners\":[\r\n               {\r\n                 \"protocol\":null,\r\n                 \"certificateUrl\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--listeners <listeners>", $("Set the listeners value.")).execute(function __22(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__22", line: 3412 }; return __func(_, this, arguments, __22, 1, __frame, function __$__22() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__22() { return (function __$__22(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__22() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/osProfile/windowsConfiguration/winRM";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "listeners");
          if (options.listeners) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.listeners));
            cli.output.verbose("================================================");
            if ((options.parse && options.listeners)) {
              options.listeners = JSON.parse(options.listeners); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.listeners },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM1 = catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM1 = parametersCreateOrUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM1.category("win-rm").description($("Commands to configure win-rm of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM1.command("delete").description($("Remove win-rm in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"winRM\" : {\r\n             \"listeners\":[\r\n               {\r\n                 \"protocol\":null,\r\n                 \"certificateUrl\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--listeners", $("Remove the listeners value.")).execute(function __23(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__23", line: 3464 }; return __func(_, this, arguments, __23, 1, __frame, function __$__23() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__23() { return (function __$__23(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__23() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/osProfile/windowsConfiguration/winRM";
          anySubItem = (false || options.listeners);
          if (anySubItem) {
            subItemPath = null;
            if (options.listeners) {
              subItemPath = (options.path + "/listeners");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl1 = catparametersCreateOrUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl1 = parametersCreateOrUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl1.category("listeners").description($("Commands to configure listeners of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl1.command("set").description($("Set listeners in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"listeners\" : {\r\n             \"protocol\":null,\r\n             \"certificateUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--protocol <protocol>", $("Set the protocol value.")).option("--certificate-url <certificateUrl>", $("Set the certificate-url value.")).execute(function __24(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__24", line: 3516 }; return __func(_, this, arguments, __24, 1, __frame, function __$__24() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__24() { return (function __$__24(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__24() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/osProfile/windowsConfiguration/winRM/listeners" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "protocol");
          if (options.protocol) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.protocol));
            cli.output.verbose("================================================");
            if ((options.parse && options.protocol)) {
              options.protocol = JSON.parse(options.protocol); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.protocol },]); } ;

          paramPath = ((options.path + "/") + "certificateUrl");
          if (options.certificateUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.certificateUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.certificateUrl)) {
              options.certificateUrl = JSON.parse(options.certificateUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.certificateUrl },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl1 = catparametersCreateOrUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl1 = parametersCreateOrUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl1.category("listeners").description($("Commands to configure listeners of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl1.command("delete").description($("Remove listeners in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"listeners\" : {\r\n             \"protocol\":null,\r\n             \"certificateUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--protocol", $("Remove the protocol value.")).option("--certificate-url", $("Remove the certificate-url value.")).execute(function __25(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__25", line: 3585 }; return __func(_, this, arguments, __25, 1, __frame, function __$__25() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__25() { return (function __$__25(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__25() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/osProfile/windowsConfiguration/winRM/listeners" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.protocol) || options.certificateUrl);
          if (anySubItem) {
            subItemPath = null;
            if (options.protocol) {
              subItemPath = (options.path + "/protocol");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.certificateUrl) {
              subItemPath = (options.path + "/certificateUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC1 = parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC1.category("linux-configuration").description($("Commands to configure linux-configuration of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC1.command("set").description($("Set linux-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"linuxConfiguration\" : {\r\n             \"disablePasswordAuthentication\":null,\r\n             \"ssh\":{\r\n               \"publicKeys\":[\r\n                 {\r\n                   \"path\":\"\",\r\n                   \"keyData\":\"\"\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--disable-password-authentication <disablePasswordAuthentication>", $("Set the disable-password-authentication value.")).option("--ssh <ssh>", $("Set the ssh value.")).execute(function __26(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__26", line: 3639 }; return __func(_, this, arguments, __26, 1, __frame, function __$__26() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__26() { return (function __$__26(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__26() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/osProfile/linuxConfiguration";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "disablePasswordAuthentication");
          if (options.disablePasswordAuthentication) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.disablePasswordAuthentication));
            cli.output.verbose("================================================");
            if ((options.parse && options.disablePasswordAuthentication)) {
              options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication); } ;

            options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.disablePasswordAuthentication },]); } ;

          paramPath = ((options.path + "/") + "ssh");
          if (options.ssh) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.ssh));
            cli.output.verbose("================================================");
            if ((options.parse && options.ssh)) {
              options.ssh = JSON.parse(options.ssh); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.ssh },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC1 = parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC1.category("linux-configuration").description($("Commands to configure linux-configuration of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC1.command("delete").description($("Remove linux-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"linuxConfiguration\" : {\r\n             \"disablePasswordAuthentication\":null,\r\n             \"ssh\":{\r\n               \"publicKeys\":[\r\n                 {\r\n                   \"path\":\"\",\r\n                   \"keyData\":\"\"\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--disable-password-authentication", $("Remove the disable-password-authentication value.")).option("--ssh", $("Remove the ssh value.")).execute(function __27(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__27", line: 3704 }; return __func(_, this, arguments, __27, 1, __frame, function __$__27() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__27() { return (function __$__27(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__27() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/osProfile/linuxConfiguration";
          anySubItem = ((false || options.disablePasswordAuthentication) || options.ssh);
          if (anySubItem) {
            subItemPath = null;
            if (options.disablePasswordAuthentication) {
              subItemPath = (options.path + "/disablePasswordAuthentication");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.ssh) {
              subItemPath = (options.path + "/ssh");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsSsh0VMPoPlCs1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsSsh0VMPoPlCs1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSsh0VMPoPlCs1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsSsh0VMPoPlCs1 = parametersCreateOrUpdateVirtualMachineScaleSetsSsh0VMPoPlCs1.category("ssh").description($("Commands to configure ssh of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsSsh0VMPoPlCs1.command("set").description($("Set ssh in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"ssh\" : {\r\n             \"publicKeys\":[\r\n               {\r\n                 \"path\":\"\",\r\n                 \"keyData\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--public-keys <publicKeys>", $("Set the public-keys value.")).execute(function __28(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__28", line: 3757 }; return __func(_, this, arguments, __28, 1, __frame, function __$__28() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__28() { return (function __$__28(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__28() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/osProfile/linuxConfiguration/ssh";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "publicKeys");
          if (options.publicKeys) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publicKeys));
            cli.output.verbose("================================================");
            if ((options.parse && options.publicKeys)) {
              options.publicKeys = JSON.parse(options.publicKeys); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publicKeys },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsSsh1VMPoPlCs1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsSsh1VMPoPlCs1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSsh1VMPoPlCs1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsSsh1VMPoPlCs1 = parametersCreateOrUpdateVirtualMachineScaleSetsSsh1VMPoPlCs1.category("ssh").description($("Commands to configure ssh of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsSsh1VMPoPlCs1.command("delete").description($("Remove ssh in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"ssh\" : {\r\n             \"publicKeys\":[\r\n               {\r\n                 \"path\":\"\",\r\n                 \"keyData\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--public-keys", $("Remove the public-keys value.")).execute(function __29(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__29", line: 3809 }; return __func(_, this, arguments, __29, 1, __frame, function __$__29() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__29() { return (function __$__29(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__29() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/osProfile/linuxConfiguration/ssh";
          anySubItem = (false || options.publicKeys);
          if (anySubItem) {
            subItemPath = null;
            if (options.publicKeys) {
              subItemPath = (options.path + "/publicKeys");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK1 = catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK1 = parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK1.category("public-keys").description($("Commands to configure public-keys of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK1.command("set").description($("Set public-keys in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"publicKeys\" : {\r\n             \"path\":\"\",\r\n             \"keyData\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--path <path>", $("Set the path value.")).option("--key-data <keyData>", $("Set the key-data value.")).execute(function __30(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__30", line: 3861 }; return __func(_, this, arguments, __30, 1, __frame, function __$__30() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__30() { return (function __$__30(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__30() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/osProfile/linuxConfiguration/ssh/publicKeys" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "path");
          if (options.path) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.path));
            cli.output.verbose("================================================");
            if ((options.parse && options.path)) {
              options.path = JSON.parse(options.path); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.path },]); } ;

          paramPath = ((options.path + "/") + "keyData");
          if (options.keyData) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.keyData));
            cli.output.verbose("================================================");
            if ((options.parse && options.keyData)) {
              options.keyData = JSON.parse(options.keyData); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.keyData },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK1 = catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK1 = parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK1.category("public-keys").description($("Commands to configure public-keys of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK1.command("delete").description($("Remove public-keys in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"publicKeys\" : {\r\n             \"path\":\"\",\r\n             \"keyData\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--path", $("Remove the path value.")).option("--key-data", $("Remove the key-data value.")).execute(function __31(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__31", line: 3930 }; return __func(_, this, arguments, __31, 1, __frame, function __$__31() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__31() { return (function __$__31(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__31() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/osProfile/linuxConfiguration/ssh/publicKeys" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.path) || options.keyData);
          if (anySubItem) {
            subItemPath = null;
            if (options.path) {
              subItemPath = (options.path + "/path");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.keyData) {
              subItemPath = (options.path + "/keyData");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets0VMPoPs1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsSecrets0VMPoPs1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets0VMPoPs1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsSecrets0VMPoPs1 = parametersCreateOrUpdateVirtualMachineScaleSetsSecrets0VMPoPs1.category("secrets").description($("Commands to configure secrets of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsSecrets0VMPoPs1.command("set").description($("Set secrets in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"secrets\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"vaultCertificates\":[\r\n               {\r\n                 \"certificateUrl\":\"\",\r\n                 \"certificateStore\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--source-vault <sourceVault>", $("Set the source-vault value.")).option("--vault-certificates <vaultCertificates>", $("Set the vault-certificates value.")).execute(function __32(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__32", line: 3986 }; return __func(_, this, arguments, __32, 1, __frame, function __$__32() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__32() { return (function __$__32(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__32() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/osProfile/secrets" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "sourceVault");
          if (options.sourceVault) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceVault));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceVault)) {
              options.sourceVault = JSON.parse(options.sourceVault); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceVault },]); } ;

          paramPath = ((options.path + "/") + "vaultCertificates");
          if (options.vaultCertificates) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.vaultCertificates));
            cli.output.verbose("================================================");
            if ((options.parse && options.vaultCertificates)) {
              options.vaultCertificates = JSON.parse(options.vaultCertificates); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.vaultCertificates },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets1VMPoPs1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsSecrets1VMPoPs1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets1VMPoPs1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsSecrets1VMPoPs1 = parametersCreateOrUpdateVirtualMachineScaleSetsSecrets1VMPoPs1.category("secrets").description($("Commands to configure secrets of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsSecrets1VMPoPs1.command("delete").description($("Remove secrets in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"secrets\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"vaultCertificates\":[\r\n               {\r\n                 \"certificateUrl\":\"\",\r\n                 \"certificateStore\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--source-vault", $("Remove the source-vault value.")).option("--vault-certificates", $("Remove the vault-certificates value.")).execute(function __33(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__33", line: 4055 }; return __func(_, this, arguments, __33, 1, __frame, function __$__33() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__33() { return (function __$__33(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__33() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/osProfile/secrets" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.sourceVault) || options.vaultCertificates);
          if (anySubItem) {
            subItemPath = null;
            if (options.sourceVault) {
              subItemPath = (options.path + "/sourceVault");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.vaultCertificates) {
              subItemPath = (options.path + "/vaultCertificates");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV1 = parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV1.category("source-vault").description($("Commands to configure source-vault of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV1.command("set").description($("Set source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--secrets-index <secrets-index>", $("Indexer: secrets-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __34(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__34", line: 4109 }; return __func(_, this, arguments, __34, 1, __frame, function __$__34() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__34() { return (function __$__34(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__34() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/virtualMachineProfile/osProfile/secrets/" + options.secretsIndex) + "/sourceVault");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV1 = parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV1.category("source-vault").description($("Commands to configure source-vault of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV1.command("delete").description($("Remove source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--secrets-index <secrets-index>", $("Indexer: secrets-index.")).option("--id", $("Remove the id value.")).execute(function __35(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__35", line: 4162 }; return __func(_, this, arguments, __35, 1, __frame, function __$__35() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__35() { return (function __$__35(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__35() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/virtualMachineProfile/osProfile/secrets/" + options.secretsIndex) + "/sourceVault");
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC1 = parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC1.category("vault-certificates").description($("Commands to configure vault-certificates of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC1.command("set").description($("Set vault-certificates in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"vaultCertificates\" : {\r\n             \"certificateUrl\":\"\",\r\n             \"certificateStore\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--secrets-index <secrets-index>", $("Indexer: secrets-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--certificate-url <certificateUrl>", $("Set the certificate-url value.")).option("--certificate-store <certificateStore>", $("Set the certificate-store value.")).execute(function __36(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__36", line: 4215 }; return __func(_, this, arguments, __36, 1, __frame, function __$__36() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__36() { return (function __$__36(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__36() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/virtualMachineProfile/osProfile/secrets/" + options.secretsIndex) + "/vaultCertificates") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "certificateUrl");
          if (options.certificateUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.certificateUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.certificateUrl)) {
              options.certificateUrl = JSON.parse(options.certificateUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.certificateUrl },]); } ;

          paramPath = ((options.path + "/") + "certificateStore");
          if (options.certificateStore) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.certificateStore));
            cli.output.verbose("================================================");
            if ((options.parse && options.certificateStore)) {
              options.certificateStore = JSON.parse(options.certificateStore); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.certificateStore },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC1 = parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC1.category("vault-certificates").description($("Commands to configure vault-certificates of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC1.command("delete").description($("Remove vault-certificates in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"vaultCertificates\" : {\r\n             \"certificateUrl\":\"\",\r\n             \"certificateStore\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--secrets-index <secrets-index>", $("Indexer: secrets-index.")).option("--certificate-url", $("Remove the certificate-url value.")).option("--certificate-store", $("Remove the certificate-store value.")).execute(function __37(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__37", line: 4285 }; return __func(_, this, arguments, __37, 1, __frame, function __$__37() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__37() { return (function __$__37(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__37() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/virtualMachineProfile/osProfile/secrets/" + options.secretsIndex) + "/vaultCertificates") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.certificateUrl) || options.certificateStore);
          if (anySubItem) {
            subItemPath = null;
            if (options.certificateUrl) {
              subItemPath = (options.path + "/certificateUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.certificateStore) {
              subItemPath = (options.path + "/certificateStore");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0VMPsP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0VMPsP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0VMPsP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0VMPsP1 = parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0VMPsP1.category("storage-profile").description($("Commands to configure storage-profile of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0VMPsP1.command("set").description($("Set storage-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"storageProfile\" : {\r\n             \"imageReference\":{\r\n               \"publisher\":\"\",\r\n               \"offer\":\"\",\r\n               \"sku\":\"\",\r\n               \"version\":\"\",\r\n               \"id\":\"\"\r\n             },\r\n             \"osDisk\":{\r\n               \"name\":\"\",\r\n               \"caching\":null,\r\n               \"createOption\":\"\",\r\n               \"osType\":null,\r\n               \"image\":{\r\n                 \"uri\":\"\"\r\n               },\r\n               \"vhdContainers\":[\r\n                 \"\"\r\n               ],\r\n               \"managedDisk\":{\r\n                 \"storageAccountType\":null\r\n               }\r\n             },\r\n             \"dataDisks\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"lun\":\"\",\r\n                 \"caching\":null,\r\n                 \"createOption\":\"\",\r\n                 \"diskSizeGB\":null,\r\n                 \"managedDisk\":{\r\n                   \"storageAccountType\":null\r\n                 }\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--image-reference <imageReference>", $("Set the image-reference value.")).option("--os-disk <osDisk>", $("Set the os-disk value.")).option("--data-disks <dataDisks>", $("Set the data-disks value.")).execute(function __38(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__38", line: 4340 }; return __func(_, this, arguments, __38, 1, __frame, function __$__38() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__38() { return (function __$__38(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__38() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/storageProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "imageReference");
          if (options.imageReference) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.imageReference));
            cli.output.verbose("================================================");
            if ((options.parse && options.imageReference)) {
              options.imageReference = JSON.parse(options.imageReference); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.imageReference },]); } ;

          paramPath = ((options.path + "/") + "osDisk");
          if (options.osDisk) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.osDisk));
            cli.output.verbose("================================================");
            if ((options.parse && options.osDisk)) {
              options.osDisk = JSON.parse(options.osDisk); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.osDisk },]); } ;

          paramPath = ((options.path + "/") + "dataDisks");
          if (options.dataDisks) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.dataDisks));
            cli.output.verbose("================================================");
            if ((options.parse && options.dataDisks)) {
              options.dataDisks = JSON.parse(options.dataDisks); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.dataDisks },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1VMPsP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1VMPsP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1VMPsP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1VMPsP1 = parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1VMPsP1.category("storage-profile").description($("Commands to configure storage-profile of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1VMPsP1.command("delete").description($("Remove storage-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"storageProfile\" : {\r\n             \"imageReference\":{\r\n               \"publisher\":\"\",\r\n               \"offer\":\"\",\r\n               \"sku\":\"\",\r\n               \"version\":\"\",\r\n               \"id\":\"\"\r\n             },\r\n             \"osDisk\":{\r\n               \"name\":\"\",\r\n               \"caching\":null,\r\n               \"createOption\":\"\",\r\n               \"osType\":null,\r\n               \"image\":{\r\n                 \"uri\":\"\"\r\n               },\r\n               \"vhdContainers\":[\r\n                 \"\"\r\n               ],\r\n               \"managedDisk\":{\r\n                 \"storageAccountType\":null\r\n               }\r\n             },\r\n             \"dataDisks\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"lun\":\"\",\r\n                 \"caching\":null,\r\n                 \"createOption\":\"\",\r\n                 \"diskSizeGB\":null,\r\n                 \"managedDisk\":{\r\n                   \"storageAccountType\":null\r\n                 }\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--image-reference", $("Remove the image-reference value.")).option("--os-disk", $("Remove the os-disk value.")).option("--data-disks", $("Remove the data-disks value.")).execute(function __39(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__39", line: 4416 }; return __func(_, this, arguments, __39, 1, __frame, function __$__39() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__39() { return (function __$__39(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__39() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/storageProfile";
          anySubItem = (((false || options.imageReference) || options.osDisk) || options.dataDisks);
          if (anySubItem) {
            subItemPath = null;
            if (options.imageReference) {
              subItemPath = (options.path + "/imageReference");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.osDisk) {
              subItemPath = (options.path + "/osDisk");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.dataDisks) {
              subItemPath = (options.path + "/dataDisks");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference0VMPsPiR1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsImageReference0VMPsPiR1 = catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference0VMPsPiR1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsImageReference0VMPsPiR1 = parametersCreateOrUpdateVirtualMachineScaleSetsImageReference0VMPsPiR1.category("image-reference").description($("Commands to configure image-reference of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsImageReference0VMPsPiR1.command("set").description($("Set image-reference in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"imageReference\" : {\r\n             \"publisher\":\"\",\r\n             \"offer\":\"\",\r\n             \"sku\":\"\",\r\n             \"version\":\"\",\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--publisher <publisher>", $("Set the publisher value.")).option("--offer <offer>", $("Set the offer value.")).option("--sku <sku>", $("Set the sku value.")).option("--version <version>", $("Set the version value.")).option("--id <id>", $("Set the id value.")).execute(function __40(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__40", line: 4477 }; return __func(_, this, arguments, __40, 1, __frame, function __$__40() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__40() { return (function __$__40(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__40() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/storageProfile/imageReference";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "publisher");
          if (options.publisher) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publisher));
            cli.output.verbose("================================================");
            if ((options.parse && options.publisher)) {
              options.publisher = JSON.parse(options.publisher); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publisher },]); } ;

          paramPath = ((options.path + "/") + "offer");
          if (options.offer) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.offer));
            cli.output.verbose("================================================");
            if ((options.parse && options.offer)) {
              options.offer = JSON.parse(options.offer); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.offer },]); } ;

          paramPath = ((options.path + "/") + "sku");
          if (options.sku) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sku));
            cli.output.verbose("================================================");
            if ((options.parse && options.sku)) {
              options.sku = JSON.parse(options.sku); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sku },]); } ;

          paramPath = ((options.path + "/") + "version");
          if (options.version) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.version));
            cli.output.verbose("================================================");
            if ((options.parse && options.version)) {
              options.version = JSON.parse(options.version); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.version },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference1VMPsPiR1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsImageReference1VMPsPiR1 = catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference1VMPsPiR1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsImageReference1VMPsPiR1 = parametersCreateOrUpdateVirtualMachineScaleSetsImageReference1VMPsPiR1.category("image-reference").description($("Commands to configure image-reference of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsImageReference1VMPsPiR1.command("delete").description($("Remove image-reference in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"imageReference\" : {\r\n             \"publisher\":\"\",\r\n             \"offer\":\"\",\r\n             \"sku\":\"\",\r\n             \"version\":\"\",\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--publisher", $("Remove the publisher value.")).option("--offer", $("Remove the offer value.")).option("--sku", $("Remove the sku value.")).option("--version", $("Remove the version value.")).option("--id", $("Remove the id value.")).execute(function __41(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__41", line: 4577 }; return __func(_, this, arguments, __41, 1, __frame, function __$__41() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__41() { return (function __$__41(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__41() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/storageProfile/imageReference";
          anySubItem = (((((false || options.publisher) || options.offer) || options.sku) || options.version) || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.publisher) {
              subItemPath = (options.path + "/publisher");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.offer) {
              subItemPath = (options.path + "/offer");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.sku) {
              subItemPath = (options.path + "/sku");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.version) {
              subItemPath = (options.path + "/version");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD1 = catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD1 = parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD1.category("os-disk").description($("Commands to configure os-disk of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD1.command("set").description($("Set os-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"osDisk\" : {\r\n             \"name\":\"\",\r\n             \"caching\":null,\r\n             \"createOption\":\"\",\r\n             \"osType\":null,\r\n             \"image\":{\r\n               \"uri\":\"\"\r\n             },\r\n             \"vhdContainers\":[\r\n               \"\"\r\n             ],\r\n             \"managedDisk\":{\r\n               \"storageAccountType\":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--caching <caching>", $("Set the caching value.")).option("--create-option <createOption>", $("Set the create-option value.")).option("--os-type <osType>", $("Set the os-type value.")).option("--image <image>", $("Set the image value.")).option("--vhd-containers <vhdContainers>", $("Set the vhd-containers value.")).option("--managed-disk <managedDisk>", $("Set the managed-disk value.")).execute(function __42(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__42", line: 4648 }; return __func(_, this, arguments, __42, 1, __frame, function __$__42() {












      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__42() { return (function __$__42(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__42() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/storageProfile/osDisk";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "caching");
          if (options.caching) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.caching));
            cli.output.verbose("================================================");
            if ((options.parse && options.caching)) {
              options.caching = JSON.parse(options.caching); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.caching },]); } ;

          paramPath = ((options.path + "/") + "createOption");
          if (options.createOption) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.createOption));
            cli.output.verbose("================================================");
            if ((options.parse && options.createOption)) {
              options.createOption = JSON.parse(options.createOption); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.createOption },]); } ;

          paramPath = ((options.path + "/") + "osType");
          if (options.osType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.osType));
            cli.output.verbose("================================================");
            if ((options.parse && options.osType)) {
              options.osType = JSON.parse(options.osType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.osType },]); } ;

          paramPath = ((options.path + "/") + "image");
          if (options.image) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.image));
            cli.output.verbose("================================================");
            if ((options.parse && options.image)) {
              options.image = JSON.parse(options.image); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.image },]); } ;

          paramPath = ((options.path + "/") + "vhdContainers");
          if (options.vhdContainers) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.vhdContainers));
            cli.output.verbose("================================================");
            if ((options.parse && options.vhdContainers)) {
              options.vhdContainers = JSON.parse(options.vhdContainers); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.vhdContainers },]); } ;

          paramPath = ((options.path + "/") + "managedDisk");
          if (options.managedDisk) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.managedDisk));
            cli.output.verbose("================================================");
            if ((options.parse && options.managedDisk)) {
              options.managedDisk = JSON.parse(options.managedDisk); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.managedDisk },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD1 = catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD1 = parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD1.category("os-disk").description($("Commands to configure os-disk of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD1.command("delete").description($("Remove os-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"osDisk\" : {\r\n             \"name\":\"\",\r\n             \"caching\":null,\r\n             \"createOption\":\"\",\r\n             \"osType\":null,\r\n             \"image\":{\r\n               \"uri\":\"\"\r\n             },\r\n             \"vhdContainers\":[\r\n               \"\"\r\n             ],\r\n             \"managedDisk\":{\r\n               \"storageAccountType\":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--name", $("Remove the name value.")).option("--caching", $("Remove the caching value.")).option("--create-option", $("Remove the create-option value.")).option("--os-type", $("Remove the os-type value.")).option("--image", $("Remove the image value.")).option("--vhd-containers", $("Remove the vhd-containers value.")).option("--managed-disk", $("Remove the managed-disk value.")).execute(function __43(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__43", line: 4772 }; return __func(_, this, arguments, __43, 1, __frame, function __$__43() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__43() { return (function __$__43(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__43() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/storageProfile/osDisk";
          anySubItem = (((((((false || options.name) || options.caching) || options.createOption) || options.osType) || options.image) || options.vhdContainers) || options.managedDisk);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.caching) {
              subItemPath = (options.path + "/caching");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.createOption) {
              subItemPath = (options.path + "/createOption");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.osType) {
              subItemPath = (options.path + "/osType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.image) {
              subItemPath = (options.path + "/image");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.vhdContainers) {
              subItemPath = (options.path + "/vhdContainers");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.managedDisk) {
              subItemPath = (options.path + "/managedDisk");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsImage0VMPsPoDi1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsImage0VMPsPoDi1 = catparametersCreateOrUpdateVirtualMachineScaleSetsImage0VMPsPoDi1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsImage0VMPsPoDi1 = parametersCreateOrUpdateVirtualMachineScaleSetsImage0VMPsPoDi1.category("image").description($("Commands to configure image of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsImage0VMPsPoDi1.command("set").description($("Set image in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"image\" : {\r\n             \"uri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--uri <uri>", $("Set the uri value.")).execute(function __44(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__44", line: 4845 }; return __func(_, this, arguments, __44, 1, __frame, function __$__44() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__44() { return (function __$__44(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__44() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/storageProfile/osDisk/image";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "uri");
          if (options.uri) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.uri));
            cli.output.verbose("================================================");
            if ((options.parse && options.uri)) {
              options.uri = JSON.parse(options.uri); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.uri },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsImage1VMPsPoDi1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsImage1VMPsPoDi1 = catparametersCreateOrUpdateVirtualMachineScaleSetsImage1VMPsPoDi1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsImage1VMPsPoDi1 = parametersCreateOrUpdateVirtualMachineScaleSetsImage1VMPsPoDi1.category("image").description($("Commands to configure image of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsImage1VMPsPoDi1.command("delete").description($("Remove image in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"image\" : {\r\n             \"uri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--uri", $("Remove the uri value.")).execute(function __45(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__45", line: 4897 }; return __func(_, this, arguments, __45, 1, __frame, function __$__45() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__45() { return (function __$__45(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__45() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/storageProfile/osDisk/image";
          anySubItem = (false || options.uri);
          if (anySubItem) {
            subItemPath = null;
            if (options.uri) {
              subItemPath = (options.path + "/uri");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC1 = parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC1.category("vhd-containers").description($("Commands to configure vhd-containers of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC1.command("set").description($("Set vhd-containers in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"vhdContainers\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).execute(function __46(options, _) { var fileContent, parametersObj, error, updatedContent; var __frame = { name: "__46", line: 4947 }; return __func(_, this, arguments, __46, 1, __frame, function __$__46() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__46() { return (function __$__46(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__46() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/storageProfile/osDisk/vhdContainers" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC1 = parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC1.category("vhd-containers").description($("Commands to configure vhd-containers of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC1.command("delete").description($("Remove vhd-containers in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"vhdContainers\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).execute(function __47(options, _) { var fileContent, parametersObj, updatedContent; var __frame = { name: "__47", line: 4992 }; return __func(_, this, arguments, __47, 1, __frame, function __$__47() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__47() { return (function __$__47(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__47() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/storageProfile/osDisk/vhdContainers" + ((options.index ? (("/" + options.index)) : "")));
          jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]);

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD1 = catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD1 = parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD1.category("managed-disk").description($("Commands to configure managed-disk of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD1.command("set").description($("Set managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"managedDisk\" : {\r\n             \"storageAccountType\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--storage-account-type <storageAccountType>", $("Set the storage-account-type value.")).execute(function __48(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__48", line: 5031 }; return __func(_, this, arguments, __48, 1, __frame, function __$__48() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__48() { return (function __$__48(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__48() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/storageProfile/osDisk/managedDisk";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "storageAccountType");
          if (options.storageAccountType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageAccountType));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageAccountType)) {
              options.storageAccountType = JSON.parse(options.storageAccountType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageAccountType },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD1 = catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD1 = parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD1.category("managed-disk").description($("Commands to configure managed-disk of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD1.command("delete").description($("Remove managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"managedDisk\" : {\r\n             \"storageAccountType\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--storage-account-type", $("Remove the storage-account-type value.")).execute(function __49(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__49", line: 5083 }; return __func(_, this, arguments, __49, 1, __frame, function __$__49() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__49() { return (function __$__49(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__49() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/storageProfile/osDisk/managedDisk";
          anySubItem = (false || options.storageAccountType);
          if (anySubItem) {
            subItemPath = null;
            if (options.storageAccountType) {
              subItemPath = (options.path + "/storageAccountType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD1 = catparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD1 = parametersCreateOrUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD1.category("data-disks").description($("Commands to configure data-disks of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD1.command("set").description($("Set data-disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"dataDisks\" : {\r\n             \"name\":\"\",\r\n             \"lun\":\"\",\r\n             \"caching\":null,\r\n             \"createOption\":\"\",\r\n             \"diskSizeGB\":null,\r\n             \"managedDisk\":{\r\n               \"storageAccountType\":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--lun <lun>", $("Set the lun value.")).option("--caching <caching>", $("Set the caching value.")).option("--create-option <createOption>", $("Set the create-option value.")).option("--disk-size-g-b <diskSizeGB>", $("Set the disk-size-g-b value.")).option("--managed-disk <managedDisk>", $("Set the managed-disk value.")).execute(function __50(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__50", line: 5139 }; return __func(_, this, arguments, __50, 1, __frame, function __$__50() {













      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__50() { return (function __$__50(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__50() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/storageProfile/dataDisks" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "lun");
          if (options.lun) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.lun));
            cli.output.verbose("================================================");
            if ((options.parse && options.lun)) {
              options.lun = JSON.parse(options.lun); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.lun },]); } ;

          paramPath = ((options.path + "/") + "caching");
          if (options.caching) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.caching));
            cli.output.verbose("================================================");
            if ((options.parse && options.caching)) {
              options.caching = JSON.parse(options.caching); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.caching },]); } ;

          paramPath = ((options.path + "/") + "createOption");
          if (options.createOption) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.createOption));
            cli.output.verbose("================================================");
            if ((options.parse && options.createOption)) {
              options.createOption = JSON.parse(options.createOption); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.createOption },]); } ;

          paramPath = ((options.path + "/") + "diskSizeGB");
          if (options.diskSizeGB) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diskSizeGB));
            cli.output.verbose("================================================");
            if ((options.parse && options.diskSizeGB)) {
              options.diskSizeGB = JSON.parse(options.diskSizeGB); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diskSizeGB },]); } ;

          paramPath = ((options.path + "/") + "managedDisk");
          if (options.managedDisk) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.managedDisk));
            cli.output.verbose("================================================");
            if ((options.parse && options.managedDisk)) {
              options.managedDisk = JSON.parse(options.managedDisk); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.managedDisk },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD1 = catparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD1 = parametersCreateOrUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD1.category("data-disks").description($("Commands to configure data-disks of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD1.command("delete").description($("Remove data-disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"dataDisks\" : {\r\n             \"name\":\"\",\r\n             \"lun\":\"\",\r\n             \"caching\":null,\r\n             \"createOption\":\"\",\r\n             \"diskSizeGB\":null,\r\n             \"managedDisk\":{\r\n               \"storageAccountType\":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--name", $("Remove the name value.")).option("--lun", $("Remove the lun value.")).option("--caching", $("Remove the caching value.")).option("--create-option", $("Remove the create-option value.")).option("--disk-size-g-b", $("Remove the disk-size-g-b value.")).option("--managed-disk", $("Remove the managed-disk value.")).execute(function __51(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__51", line: 5256 }; return __func(_, this, arguments, __51, 1, __frame, function __$__51() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__51() { return (function __$__51(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__51() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/storageProfile/dataDisks" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((((((false || options.name) || options.lun) || options.caching) || options.createOption) || options.diskSizeGB) || options.managedDisk);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.lun) {
              subItemPath = (options.path + "/lun");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.caching) {
              subItemPath = (options.path + "/caching");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.createOption) {
              subItemPath = (options.path + "/createOption");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.diskSizeGB) {
              subItemPath = (options.path + "/diskSizeGB");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.managedDisk) {
              subItemPath = (options.path + "/managedDisk");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPdDDImD2 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPdDDImD2 = catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPdDDImD2.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPdDDImD2 = parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPdDDImD2.category("data-disks-managed-disk").description($("Commands to configure data-disks-managed-disk of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPdDDImD2.command("set").description($("Set data-disks-managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"managedDisk\" : {\r\n             \"storageAccountType\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--data-disks-index <data-disks-index>", $("Indexer: data-disks-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--storage-account-type <storageAccountType>", $("Set the storage-account-type value.")).execute(function __52(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__52", line: 5326 }; return __func(_, this, arguments, __52, 1, __frame, function __$__52() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__52() { return (function __$__52(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__52() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/virtualMachineProfile/storageProfile/dataDisks/" + options.dataDisksIndex) + "/managedDisk");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "storageAccountType");
          if (options.storageAccountType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageAccountType));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageAccountType)) {
              options.storageAccountType = JSON.parse(options.storageAccountType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageAccountType },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD2 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD2 = catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD2.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD2 = parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD2.category("data-disks-managed-disk").description($("Commands to configure data-disks-managed-disk of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD2.command("delete").description($("Remove data-disks-managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"managedDisk\" : {\r\n             \"storageAccountType\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--data-disks-index <data-disks-index>", $("Indexer: data-disks-index.")).option("--storage-account-type", $("Remove the storage-account-type value.")).execute(function __53(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__53", line: 5379 }; return __func(_, this, arguments, __53, 1, __frame, function __$__53() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__53() { return (function __$__53(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__53() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/virtualMachineProfile/storageProfile/dataDisks/" + options.dataDisksIndex) + "/managedDisk");
          anySubItem = (false || options.storageAccountType);
          if (anySubItem) {
            subItemPath = null;
            if (options.storageAccountType) {
              subItemPath = (options.path + "/storageAccountType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP1 = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP1.category("network-profile").description($("Commands to configure network-profile of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP1.command("set").description($("Set network-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkProfile\" : {\r\n             \"healthProbe\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"networkInterfaceConfigurations\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"primary\":null,\r\n                 \"enableAcceleratedNetworking\":null,\r\n                 \"networkSecurityGroup\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"dnsSettings\":{\r\n                   \"dnsServers\":[\r\n                     \"\"\r\n                   ]\r\n                 },\r\n                 \"ipConfigurations\":[\r\n                   {\r\n                     \"name\":\"\",\r\n                     \"subnet\":{\r\n                       \"id\":\"\"\r\n                     },\r\n                     \"primary\":null,\r\n                     \"publicIPAddressConfiguration\":{\r\n                       \"name\":\"\",\r\n                       \"idleTimeoutInMinutes\":null,\r\n                       \"dnsSettings\":{\r\n                         \"domainNameLabel\":\"\"\r\n                       }\r\n                     },\r\n                     \"privateIPAddressVersion\":\"\",\r\n                     \"applicationGatewayBackendAddressPools\":[\r\n                       {\r\n                         \"id\":\"\"\r\n                       }\r\n                     ],\r\n                     \"loadBalancerBackendAddressPools\":[\r\n                       {\r\n                         \"id\":\"\"\r\n                       }\r\n                     ],\r\n                     \"loadBalancerInboundNatPools\":[\r\n                       {\r\n                         \"id\":\"\"\r\n                       }\r\n                     ],\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"id\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--health-probe <healthProbe>", $("Set the health-probe value.")).option("--network-interface-configurations <networkInterfaceConfigurations>", $("Set the network-interface-configurations value.")).execute(function __54(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__54", line: 5429 }; return __func(_, this, arguments, __54, 1, __frame, function __$__54() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__54() { return (function __$__54(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__54() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/networkProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "healthProbe");
          if (options.healthProbe) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.healthProbe));
            cli.output.verbose("================================================");
            if ((options.parse && options.healthProbe)) {
              options.healthProbe = JSON.parse(options.healthProbe); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.healthProbe },]); } ;

          paramPath = ((options.path + "/") + "networkInterfaceConfigurations");
          if (options.networkInterfaceConfigurations) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.networkInterfaceConfigurations));
            cli.output.verbose("================================================");
            if ((options.parse && options.networkInterfaceConfigurations)) {
              options.networkInterfaceConfigurations = JSON.parse(options.networkInterfaceConfigurations); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.networkInterfaceConfigurations },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP1 = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP1.category("network-profile").description($("Commands to configure network-profile of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP1.command("delete").description($("Remove network-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkProfile\" : {\r\n             \"healthProbe\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"networkInterfaceConfigurations\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"primary\":null,\r\n                 \"enableAcceleratedNetworking\":null,\r\n                 \"networkSecurityGroup\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"dnsSettings\":{\r\n                   \"dnsServers\":[\r\n                     \"\"\r\n                   ]\r\n                 },\r\n                 \"ipConfigurations\":[\r\n                   {\r\n                     \"name\":\"\",\r\n                     \"subnet\":{\r\n                       \"id\":\"\"\r\n                     },\r\n                     \"primary\":null,\r\n                     \"publicIPAddressConfiguration\":{\r\n                       \"name\":\"\",\r\n                       \"idleTimeoutInMinutes\":null,\r\n                       \"dnsSettings\":{\r\n                         \"domainNameLabel\":\"\"\r\n                       }\r\n                     },\r\n                     \"privateIPAddressVersion\":\"\",\r\n                     \"applicationGatewayBackendAddressPools\":[\r\n                       {\r\n                         \"id\":\"\"\r\n                       }\r\n                     ],\r\n                     \"loadBalancerBackendAddressPools\":[\r\n                       {\r\n                         \"id\":\"\"\r\n                       }\r\n                     ],\r\n                     \"loadBalancerInboundNatPools\":[\r\n                       {\r\n                         \"id\":\"\"\r\n                       }\r\n                     ],\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"id\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--health-probe", $("Remove the health-probe value.")).option("--network-interface-configurations", $("Remove the network-interface-configurations value.")).execute(function __55(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__55", line: 5493 }; return __func(_, this, arguments, __55, 1, __frame, function __$__55() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__55() { return (function __$__55(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__55() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/networkProfile";
          anySubItem = ((false || options.healthProbe) || options.networkInterfaceConfigurations);
          if (anySubItem) {
            subItemPath = null;
            if (options.healthProbe) {
              subItemPath = (options.path + "/healthProbe");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.networkInterfaceConfigurations) {
              subItemPath = (options.path + "/networkInterfaceConfigurations");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsHealthProbe0VMPnPhP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsHealthProbe0VMPnPhP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsHealthProbe0VMPnPhP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsHealthProbe0VMPnPhP1 = parametersCreateOrUpdateVirtualMachineScaleSetsHealthProbe0VMPnPhP1.category("health-probe").description($("Commands to configure health-probe of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsHealthProbe0VMPnPhP1.command("set").description($("Set health-probe in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"healthProbe\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __56(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__56", line: 5546 }; return __func(_, this, arguments, __56, 1, __frame, function __$__56() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__56() { return (function __$__56(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__56() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/networkProfile/healthProbe";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsHealthProbe1VMPnPhP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsHealthProbe1VMPnPhP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsHealthProbe1VMPnPhP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsHealthProbe1VMPnPhP1 = parametersCreateOrUpdateVirtualMachineScaleSetsHealthProbe1VMPnPhP1.category("health-probe").description($("Commands to configure health-probe of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsHealthProbe1VMPnPhP1.command("delete").description($("Remove health-probe in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"healthProbe\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--id", $("Remove the id value.")).execute(function __57(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__57", line: 5598 }; return __func(_, this, arguments, __57, 1, __frame, function __$__57() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__57() { return (function __$__57(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__57() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/networkProfile/healthProbe";
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC1 = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC1.category("network-interface-configurations").description($("Commands to configure network-interface-configurations of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC1.command("set").description($("Set network-interface-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkInterfaceConfigurations\" : {\r\n             \"name\":\"\",\r\n             \"primary\":null,\r\n             \"enableAcceleratedNetworking\":null,\r\n             \"networkSecurityGroup\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"dnsSettings\":{\r\n               \"dnsServers\":[\r\n                 \"\"\r\n               ]\r\n             },\r\n             \"ipConfigurations\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"subnet\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"primary\":null,\r\n                 \"publicIPAddressConfiguration\":{\r\n                   \"name\":\"\",\r\n                   \"idleTimeoutInMinutes\":null,\r\n                   \"dnsSettings\":{\r\n                     \"domainNameLabel\":\"\"\r\n                   }\r\n                 },\r\n                 \"privateIPAddressVersion\":\"\",\r\n                 \"applicationGatewayBackendAddressPools\":[\r\n                   {\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"loadBalancerBackendAddressPools\":[\r\n                   {\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"loadBalancerInboundNatPools\":[\r\n                   {\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--primary <primary>", $("Set the primary value.")).option("--enable-accelerated-networking <enableAcceleratedNetworking>", $("Set the enable-accelerated-networking value.")).option("--network-security-group <networkSecurityGroup>", $("Set the network-security-group value.")).option("--dns-settings <dnsSettings>", $("Set the dns-settings value.")).option("--ip-configurations <ipConfigurations>", $("Set the ip-configurations value.")).option("--id <id>", $("Set the id value.")).execute(function __58(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__58", line: 5655 }; return __func(_, this, arguments, __58, 1, __frame, function __$__58() {














      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__58() { return (function __$__58(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__58() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "primary");
          if (options.primary) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.primary));
            cli.output.verbose("================================================");
            if ((options.parse && options.primary)) {
              options.primary = JSON.parse(options.primary); } ;

            options.primary = JSON.parse(options.primary);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.primary },]); } ;

          paramPath = ((options.path + "/") + "enableAcceleratedNetworking");
          if (options.enableAcceleratedNetworking) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.enableAcceleratedNetworking));
            cli.output.verbose("================================================");
            if ((options.parse && options.enableAcceleratedNetworking)) {
              options.enableAcceleratedNetworking = JSON.parse(options.enableAcceleratedNetworking); } ;

            options.enableAcceleratedNetworking = JSON.parse(options.enableAcceleratedNetworking);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.enableAcceleratedNetworking },]); } ;

          paramPath = ((options.path + "/") + "networkSecurityGroup");
          if (options.networkSecurityGroup) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.networkSecurityGroup));
            cli.output.verbose("================================================");
            if ((options.parse && options.networkSecurityGroup)) {
              options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.networkSecurityGroup },]); } ;

          paramPath = ((options.path + "/") + "dnsSettings");
          if (options.dnsSettings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.dnsSettings));
            cli.output.verbose("================================================");
            if ((options.parse && options.dnsSettings)) {
              options.dnsSettings = JSON.parse(options.dnsSettings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.dnsSettings },]); } ;

          paramPath = ((options.path + "/") + "ipConfigurations");
          if (options.ipConfigurations) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.ipConfigurations));
            cli.output.verbose("================================================");
            if ((options.parse && options.ipConfigurations)) {
              options.ipConfigurations = JSON.parse(options.ipConfigurations); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.ipConfigurations },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC1 = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC1.category("network-interface-configurations").description($("Commands to configure network-interface-configurations of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC1.command("delete").description($("Remove network-interface-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkInterfaceConfigurations\" : {\r\n             \"name\":\"\",\r\n             \"primary\":null,\r\n             \"enableAcceleratedNetworking\":null,\r\n             \"networkSecurityGroup\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"dnsSettings\":{\r\n               \"dnsServers\":[\r\n                 \"\"\r\n               ]\r\n             },\r\n             \"ipConfigurations\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"subnet\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"primary\":null,\r\n                 \"publicIPAddressConfiguration\":{\r\n                   \"name\":\"\",\r\n                   \"idleTimeoutInMinutes\":null,\r\n                   \"dnsSettings\":{\r\n                     \"domainNameLabel\":\"\"\r\n                   }\r\n                 },\r\n                 \"privateIPAddressVersion\":\"\",\r\n                 \"applicationGatewayBackendAddressPools\":[\r\n                   {\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"loadBalancerBackendAddressPools\":[\r\n                   {\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"loadBalancerInboundNatPools\":[\r\n                   {\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--name", $("Remove the name value.")).option("--primary", $("Remove the primary value.")).option("--enable-accelerated-networking", $("Remove the enable-accelerated-networking value.")).option("--network-security-group", $("Remove the network-security-group value.")).option("--dns-settings", $("Remove the dns-settings value.")).option("--ip-configurations", $("Remove the ip-configurations value.")).option("--id", $("Remove the id value.")).execute(function __59(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__59", line: 5786 }; return __func(_, this, arguments, __59, 1, __frame, function __$__59() {












      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__59() { return (function __$__59(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__59() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((((((false || options.name) || options.primary) || options.enableAcceleratedNetworking) || options.networkSecurityGroup) || options.dnsSettings) || options.ipConfigurations) || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.primary) {
              subItemPath = (options.path + "/primary");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.enableAcceleratedNetworking) {
              subItemPath = (options.path + "/enableAcceleratedNetworking");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.networkSecurityGroup) {
              subItemPath = (options.path + "/networkSecurityGroup");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.dnsSettings) {
              subItemPath = (options.path + "/dnsSettings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.ipConfigurations) {
              subItemPath = (options.path + "/ipConfigurations");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkSecurityGroup0VMPnPnICICInSG1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkSecurityGroup0VMPnPnICICInSG1 = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkSecurityGroup0VMPnPnICICInSG1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkSecurityGroup0VMPnPnICICInSG1 = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkSecurityGroup0VMPnPnICICInSG1.category("network-security-group").description($("Commands to configure network-security-group of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkSecurityGroup0VMPnPnICICInSG1.command("set").description($("Set network-security-group in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkSecurityGroup\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __60(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__60", line: 5860 }; return __func(_, this, arguments, __60, 1, __frame, function __$__60() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__60() { return (function __$__60(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__60() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/networkSecurityGroup");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkSecurityGroup1VMPnPnICICInSG1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkSecurityGroup1VMPnPnICICInSG1 = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkSecurityGroup1VMPnPnICICInSG1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsNetworkSecurityGroup1VMPnPnICICInSG1 = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkSecurityGroup1VMPnPnICICInSG1.category("network-security-group").description($("Commands to configure network-security-group of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsNetworkSecurityGroup1VMPnPnICICInSG1.command("delete").description($("Remove network-security-group in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkSecurityGroup\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--id", $("Remove the id value.")).execute(function __61(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__61", line: 5913 }; return __func(_, this, arguments, __61, 1, __frame, function __$__61() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__61() { return (function __$__61(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__61() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/networkSecurityGroup");
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIdS1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIdS1 = catparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIdS1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIdS1 = parametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIdS1.category("dns-settings").description($("Commands to configure dns-settings of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIdS1.command("set").description($("Set dns-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"dnsSettings\" : {\r\n             \"dnsServers\":[\r\n               \"\"\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--dns-servers <dnsServers>", $("Set the dns-servers value.")).execute(function __62(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__62", line: 5963 }; return __func(_, this, arguments, __62, 1, __frame, function __$__62() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__62() { return (function __$__62(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__62() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/dnsSettings");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "dnsServers");
          if (options.dnsServers) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.dnsServers));
            cli.output.verbose("================================================");
            if ((options.parse && options.dnsServers)) {
              options.dnsServers = JSON.parse(options.dnsServers); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.dnsServers },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIdS1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIdS1 = catparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIdS1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIdS1 = parametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIdS1.category("dns-settings").description($("Commands to configure dns-settings of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIdS1.command("delete").description($("Remove dns-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"dnsSettings\" : {\r\n             \"dnsServers\":[\r\n               \"\"\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--dns-servers", $("Remove the dns-servers value.")).execute(function __63(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__63", line: 6016 }; return __func(_, this, arguments, __63, 1, __frame, function __$__63() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__63() { return (function __$__63(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__63() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/dnsSettings");
          anySubItem = (false || options.dnsServers);
          if (anySubItem) {
            subItemPath = null;
            if (options.dnsServers) {
              subItemPath = (options.path + "/dnsServers");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsDnsServers0VMPnPnICICIdSdS1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsDnsServers0VMPnPnICICIdSdS1 = catparametersCreateOrUpdateVirtualMachineScaleSetsDnsServers0VMPnPnICICIdSdS1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsDnsServers0VMPnPnICICIdSdS1 = parametersCreateOrUpdateVirtualMachineScaleSetsDnsServers0VMPnPnICICIdSdS1.category("dns-servers").description($("Commands to configure dns-servers of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsDnsServers0VMPnPnICICIdSdS1.command("set").description($("Set dns-servers in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"dnsServers\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).execute(function __64(options, _) { var fileContent, parametersObj, error, updatedContent; var __frame = { name: "__64", line: 6067 }; return __func(_, this, arguments, __64, 1, __frame, function __$__64() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__64() { return (function __$__64(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__64() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/dnsSettings/dnsServers") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsDnsServers1VMPnPnICICIdSdS1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsDnsServers1VMPnPnICICIdSdS1 = catparametersCreateOrUpdateVirtualMachineScaleSetsDnsServers1VMPnPnICICIdSdS1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsDnsServers1VMPnPnICICIdSdS1 = parametersCreateOrUpdateVirtualMachineScaleSetsDnsServers1VMPnPnICICIdSdS1.category("dns-servers").description($("Commands to configure dns-servers of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsDnsServers1VMPnPnICICIdSdS1.command("delete").description($("Remove dns-servers in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"dnsServers\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).execute(function __65(options, _) { var fileContent, parametersObj, updatedContent; var __frame = { name: "__65", line: 6113 }; return __func(_, this, arguments, __65, 1, __frame, function __$__65() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__65() { return (function __$__65(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__65() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/dnsSettings/dnsServers") + ((options.index ? (("/" + options.index)) : "")));
          jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]);

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC1 = parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC1.category("ip-configurations").description($("Commands to configure ip-configurations of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC1.command("set").description($("Set ip-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"ipConfigurations\" : {\r\n             \"name\":\"\",\r\n             \"subnet\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"primary\":null,\r\n             \"publicIPAddressConfiguration\":{\r\n               \"name\":\"\",\r\n               \"idleTimeoutInMinutes\":null,\r\n               \"dnsSettings\":{\r\n                 \"domainNameLabel\":\"\"\r\n               }\r\n             },\r\n             \"privateIPAddressVersion\":\"\",\r\n             \"applicationGatewayBackendAddressPools\":[\r\n               {\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"loadBalancerBackendAddressPools\":[\r\n               {\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"loadBalancerInboundNatPools\":[\r\n               {\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--subnet <subnet>", $("Set the subnet value.")).option("--primary <primary>", $("Set the primary value.")).option("--public-ip-address-configuration <publicIPAddressConfiguration>", $("Set the public-ip-address-configuration value.")).option("--private-ip-address-version <privateIPAddressVersion>", $("Set the private-ip-address-version value.")).option("--application-gateway-backend-address-pools <applicationGatewayBackendAddressPools>", $("Set the application-gateway-backend-address-pools value.")).option("--load-balancer-backend-address-pools <loadBalancerBackendAddressPools>", $("Set the load-balancer-backend-address-pools value.")).option("--load-balancer-inbound-nat-pools <loadBalancerInboundNatPools>", $("Set the load-balancer-inbound-nat-pools value.")).option("--id <id>", $("Set the id value.")).execute(function __66(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__66", line: 6163 }; return __func(_, this, arguments, __66, 1, __frame, function __$__66() {

















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__66() { return (function __$__66(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__66() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "subnet");
          if (options.subnet) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.subnet));
            cli.output.verbose("================================================");
            if ((options.parse && options.subnet)) {
              options.subnet = JSON.parse(options.subnet); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.subnet },]); } ;

          paramPath = ((options.path + "/") + "primary");
          if (options.primary) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.primary));
            cli.output.verbose("================================================");
            if ((options.parse && options.primary)) {
              options.primary = JSON.parse(options.primary); } ;

            options.primary = JSON.parse(options.primary);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.primary },]); } ;

          paramPath = ((options.path + "/") + "publicIPAddressConfiguration");
          if (options.publicIPAddressConfiguration) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publicIPAddressConfiguration));
            cli.output.verbose("================================================");
            if ((options.parse && options.publicIPAddressConfiguration)) {
              options.publicIPAddressConfiguration = JSON.parse(options.publicIPAddressConfiguration); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publicIPAddressConfiguration },]); } ;

          paramPath = ((options.path + "/") + "privateIPAddressVersion");
          if (options.privateIPAddressVersion) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.privateIPAddressVersion));
            cli.output.verbose("================================================");
            if ((options.parse && options.privateIPAddressVersion)) {
              options.privateIPAddressVersion = JSON.parse(options.privateIPAddressVersion); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.privateIPAddressVersion },]); } ;

          paramPath = ((options.path + "/") + "applicationGatewayBackendAddressPools");
          if (options.applicationGatewayBackendAddressPools) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.applicationGatewayBackendAddressPools));
            cli.output.verbose("================================================");
            if ((options.parse && options.applicationGatewayBackendAddressPools)) {
              options.applicationGatewayBackendAddressPools = JSON.parse(options.applicationGatewayBackendAddressPools); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.applicationGatewayBackendAddressPools },]); } ;

          paramPath = ((options.path + "/") + "loadBalancerBackendAddressPools");
          if (options.loadBalancerBackendAddressPools) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.loadBalancerBackendAddressPools));
            cli.output.verbose("================================================");
            if ((options.parse && options.loadBalancerBackendAddressPools)) {
              options.loadBalancerBackendAddressPools = JSON.parse(options.loadBalancerBackendAddressPools); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.loadBalancerBackendAddressPools },]); } ;

          paramPath = ((options.path + "/") + "loadBalancerInboundNatPools");
          if (options.loadBalancerInboundNatPools) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.loadBalancerInboundNatPools));
            cli.output.verbose("================================================");
            if ((options.parse && options.loadBalancerInboundNatPools)) {
              options.loadBalancerInboundNatPools = JSON.parse(options.loadBalancerInboundNatPools); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.loadBalancerInboundNatPools },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC1 = parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC1.category("ip-configurations").description($("Commands to configure ip-configurations of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC1.command("delete").description($("Remove ip-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"ipConfigurations\" : {\r\n             \"name\":\"\",\r\n             \"subnet\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"primary\":null,\r\n             \"publicIPAddressConfiguration\":{\r\n               \"name\":\"\",\r\n               \"idleTimeoutInMinutes\":null,\r\n               \"dnsSettings\":{\r\n                 \"domainNameLabel\":\"\"\r\n               }\r\n             },\r\n             \"privateIPAddressVersion\":\"\",\r\n             \"applicationGatewayBackendAddressPools\":[\r\n               {\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"loadBalancerBackendAddressPools\":[\r\n               {\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"loadBalancerInboundNatPools\":[\r\n               {\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--name", $("Remove the name value.")).option("--subnet", $("Remove the subnet value.")).option("--primary", $("Remove the primary value.")).option("--public-ip-address-configuration", $("Remove the public-ip-address-configuration value.")).option("--private-ip-address-version", $("Remove the private-ip-address-version value.")).option("--application-gateway-backend-address-pools", $("Remove the application-gateway-backend-address-pools value.")).option("--load-balancer-backend-address-pools", $("Remove the load-balancer-backend-address-pools value.")).option("--load-balancer-inbound-nat-pools", $("Remove the load-balancer-inbound-nat-pools value.")).option("--id", $("Remove the id value.")).execute(function __67(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__67", line: 6318 }; return __func(_, this, arguments, __67, 1, __frame, function __$__67() {















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__67() { return (function __$__67(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__67() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((((((((false || options.name) || options.subnet) || options.primary) || options.publicIPAddressConfiguration) || options.privateIPAddressVersion) || options.applicationGatewayBackendAddressPools) || options.loadBalancerBackendAddressPools) || options.loadBalancerInboundNatPools) || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.subnet) {
              subItemPath = (options.path + "/subnet");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.primary) {
              subItemPath = (options.path + "/primary");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.publicIPAddressConfiguration) {
              subItemPath = (options.path + "/publicIPAddressConfiguration");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.privateIPAddressVersion) {
              subItemPath = (options.path + "/privateIPAddressVersion");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.applicationGatewayBackendAddressPools) {
              subItemPath = (options.path + "/applicationGatewayBackendAddressPools");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.loadBalancerBackendAddressPools) {
              subItemPath = (options.path + "/loadBalancerBackendAddressPools");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.loadBalancerInboundNatPools) {
              subItemPath = (options.path + "/loadBalancerInboundNatPools");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs2 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs2 = catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs2.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs2 = parametersCreateOrUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs2.category("subnet").description($("Commands to configure subnet of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs2.command("set").description($("Set subnet in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"subnet\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __68(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__68", line: 6401 }; return __func(_, this, arguments, __68, 1, __frame, function __$__68() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__68() { return (function __$__68(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__68() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/subnet");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs2 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs2 = catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs2.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs2 = parametersCreateOrUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs2.category("subnet").description($("Commands to configure subnet of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs2.command("delete").description($("Remove subnet in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"subnet\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--id", $("Remove the id value.")).execute(function __69(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__69", line: 6455 }; return __func(_, this, arguments, __69, 1, __frame, function __$__69() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__69() { return (function __$__69(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__69() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/subnet");
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration0VMPnPnICICIiCCIpIPAC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration0VMPnPnICICIiCCIpIPAC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration0VMPnPnICICIiCCIpIPAC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration0VMPnPnICICIiCCIpIPAC1 = parametersCreateOrUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration0VMPnPnICICIiCCIpIPAC1.category("public-ip-address-configuration").description($("Commands to configure public-ip-address-configuration of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration0VMPnPnICICIiCCIpIPAC1.command("set").description($("Set public-ip-address-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"publicIPAddressConfiguration\" : {\r\n             \"name\":\"\",\r\n             \"idleTimeoutInMinutes\":null,\r\n             \"dnsSettings\":{\r\n               \"domainNameLabel\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--idle-timeout-in-minutes <idleTimeoutInMinutes>", $("Set the idle-timeout-in-minutes value.")).option("--dns-settings <dnsSettings>", $("Set the dns-settings value.")).execute(function __70(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__70", line: 6508 }; return __func(_, this, arguments, __70, 1, __frame, function __$__70() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__70() { return (function __$__70(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__70() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/publicIPAddressConfiguration");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "idleTimeoutInMinutes");
          if (options.idleTimeoutInMinutes) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.idleTimeoutInMinutes));
            cli.output.verbose("================================================");
            if ((options.parse && options.idleTimeoutInMinutes)) {
              options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes },]); } ;

          paramPath = ((options.path + "/") + "dnsSettings");
          if (options.dnsSettings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.dnsSettings));
            cli.output.verbose("================================================");
            if ((options.parse && options.dnsSettings)) {
              options.dnsSettings = JSON.parse(options.dnsSettings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.dnsSettings },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration1VMPnPnICICIiCCIpIPAC1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration1VMPnPnICICIiCCIpIPAC1 = catparametersCreateOrUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration1VMPnPnICICIiCCIpIPAC1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration1VMPnPnICICIiCCIpIPAC1 = parametersCreateOrUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration1VMPnPnICICIiCCIpIPAC1.category("public-ip-address-configuration").description($("Commands to configure public-ip-address-configuration of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration1VMPnPnICICIiCCIpIPAC1.command("delete").description($("Remove public-ip-address-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"publicIPAddressConfiguration\" : {\r\n             \"name\":\"\",\r\n             \"idleTimeoutInMinutes\":null,\r\n             \"dnsSettings\":{\r\n               \"domainNameLabel\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--name", $("Remove the name value.")).option("--idle-timeout-in-minutes", $("Remove the idle-timeout-in-minutes value.")).option("--dns-settings", $("Remove the dns-settings value.")).execute(function __71(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__71", line: 6586 }; return __func(_, this, arguments, __71, 1, __frame, function __$__71() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__71() { return (function __$__71(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__71() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/publicIPAddressConfiguration");
          anySubItem = (((false || options.name) || options.idleTimeoutInMinutes) || options.dnsSettings);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.idleTimeoutInMinutes) {
              subItemPath = (options.path + "/idleTimeoutInMinutes");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.dnsSettings) {
              subItemPath = (options.path + "/dnsSettings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIiCCIpIPACdS1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIiCCIpIPACdS1 = catparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIiCCIpIPACdS1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIiCCIpIPACdS1 = parametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIiCCIpIPACdS1.category("public-ip-address-configuration-dns-settings").description($("Commands to configure public-ip-address-configuration-dns-settings of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIiCCIpIPACdS1.command("set").description($("Set public-ip-address-configuration-dns-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"dnsSettings\" : {\r\n             \"domainNameLabel\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--domain-name-label <domainNameLabel>", $("Set the domain-name-label value.")).execute(function __72(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__72", line: 6645 }; return __func(_, this, arguments, __72, 1, __frame, function __$__72() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__72() { return (function __$__72(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__72() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/publicIPAddressConfiguration/dnsSettings");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "domainNameLabel");
          if (options.domainNameLabel) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.domainNameLabel));
            cli.output.verbose("================================================");
            if ((options.parse && options.domainNameLabel)) {
              options.domainNameLabel = JSON.parse(options.domainNameLabel); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.domainNameLabel },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIiCCIpIPACdS1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIiCCIpIPACdS1 = catparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIiCCIpIPACdS1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIiCCIpIPACdS1 = parametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIiCCIpIPACdS1.category("public-ip-address-configuration-dns-settings").description($("Commands to configure public-ip-address-configuration-dns-settings of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIiCCIpIPACdS1.command("delete").description($("Remove public-ip-address-configuration-dns-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"dnsSettings\" : {\r\n             \"domainNameLabel\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--domain-name-label", $("Remove the domain-name-label value.")).execute(function __73(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__73", line: 6699 }; return __func(_, this, arguments, __73, 1, __frame, function __$__73() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__73() { return (function __$__73(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__73() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/publicIPAddressConfiguration/dnsSettings");
          anySubItem = (false || options.domainNameLabel);
          if (anySubItem) {
            subItemPath = null;
            if (options.domainNameLabel) {
              subItemPath = (options.path + "/domainNameLabel");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP1 = parametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP1.category("application-gateway-backend-address-pools").description($("Commands to configure application-gateway-backend-address-pools of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP1.command("set").description($("Set application-gateway-backend-address-pools in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"applicationGatewayBackendAddressPools\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __74(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__74", line: 6752 }; return __func(_, this, arguments, __74, 1, __frame, function __$__74() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__74() { return (function __$__74(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__74() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/applicationGatewayBackendAddressPools") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP1 = parametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP1.category("application-gateway-backend-address-pools").description($("Commands to configure application-gateway-backend-address-pools of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP1.command("delete").description($("Remove application-gateway-backend-address-pools in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"applicationGatewayBackendAddressPools\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--id", $("Remove the id value.")).execute(function __75(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__75", line: 6811 }; return __func(_, this, arguments, __75, 1, __frame, function __$__75() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__75() { return (function __$__75(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__75() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/applicationGatewayBackendAddressPools") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP1 = parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP1.category("load-balancer-backend-address-pools").description($("Commands to configure load-balancer-backend-address-pools of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP1.command("set").description($("Set load-balancer-backend-address-pools in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"loadBalancerBackendAddressPools\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __76(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__76", line: 6864 }; return __func(_, this, arguments, __76, 1, __frame, function __$__76() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__76() { return (function __$__76(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__76() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/loadBalancerBackendAddressPools") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP1 = parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP1.category("load-balancer-backend-address-pools").description($("Commands to configure load-balancer-backend-address-pools of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP1.command("delete").description($("Remove load-balancer-backend-address-pools in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"loadBalancerBackendAddressPools\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--id", $("Remove the id value.")).execute(function __77(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__77", line: 6923 }; return __func(_, this, arguments, __77, 1, __frame, function __$__77() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__77() { return (function __$__77(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__77() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/loadBalancerBackendAddressPools") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP1 = parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP1.category("load-balancer-inbound-nat-pools").description($("Commands to configure load-balancer-inbound-nat-pools of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP1.command("set").description($("Set load-balancer-inbound-nat-pools in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"loadBalancerInboundNatPools\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __78(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__78", line: 6976 }; return __func(_, this, arguments, __78, 1, __frame, function __$__78() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__78() { return (function __$__78(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__78() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/loadBalancerInboundNatPools") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP1 = parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP1.category("load-balancer-inbound-nat-pools").description($("Commands to configure load-balancer-inbound-nat-pools of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP1.command("delete").description($("Remove load-balancer-inbound-nat-pools in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"loadBalancerInboundNatPools\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--id", $("Remove the id value.")).execute(function __79(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__79", line: 7035 }; return __func(_, this, arguments, __79, 1, __frame, function __$__79() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__79() { return (function __$__79(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__79() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/loadBalancerInboundNatPools") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsDiagnosticsProfile0VMPdP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsDiagnosticsProfile0VMPdP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsDiagnosticsProfile0VMPdP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsDiagnosticsProfile0VMPdP1 = parametersCreateOrUpdateVirtualMachineScaleSetsDiagnosticsProfile0VMPdP1.category("diagnostics-profile").description($("Commands to configure diagnostics-profile of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsDiagnosticsProfile0VMPdP1.command("set").description($("Set diagnostics-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"diagnosticsProfile\" : {\r\n             \"bootDiagnostics\":{\r\n               \"enabled\":null,\r\n               \"storageUri\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--boot-diagnostics <bootDiagnostics>", $("Set the boot-diagnostics value.")).execute(function __80(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__80", line: 7084 }; return __func(_, this, arguments, __80, 1, __frame, function __$__80() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__80() { return (function __$__80(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__80() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/diagnosticsProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "bootDiagnostics");
          if (options.bootDiagnostics) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.bootDiagnostics));
            cli.output.verbose("================================================");
            if ((options.parse && options.bootDiagnostics)) {
              options.bootDiagnostics = JSON.parse(options.bootDiagnostics); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.bootDiagnostics },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsDiagnosticsProfile1VMPdP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsDiagnosticsProfile1VMPdP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsDiagnosticsProfile1VMPdP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsDiagnosticsProfile1VMPdP1 = parametersCreateOrUpdateVirtualMachineScaleSetsDiagnosticsProfile1VMPdP1.category("diagnostics-profile").description($("Commands to configure diagnostics-profile of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsDiagnosticsProfile1VMPdP1.command("delete").description($("Remove diagnostics-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"diagnosticsProfile\" : {\r\n             \"bootDiagnostics\":{\r\n               \"enabled\":null,\r\n               \"storageUri\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--boot-diagnostics", $("Remove the boot-diagnostics value.")).execute(function __81(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__81", line: 7136 }; return __func(_, this, arguments, __81, 1, __frame, function __$__81() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__81() { return (function __$__81(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__81() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/diagnosticsProfile";
          anySubItem = (false || options.bootDiagnostics);
          if (anySubItem) {
            subItemPath = null;
            if (options.bootDiagnostics) {
              subItemPath = (options.path + "/bootDiagnostics");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsBootDiagnostics0VMPdPbD1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsBootDiagnostics0VMPdPbD1 = catparametersCreateOrUpdateVirtualMachineScaleSetsBootDiagnostics0VMPdPbD1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsBootDiagnostics0VMPdPbD1 = parametersCreateOrUpdateVirtualMachineScaleSetsBootDiagnostics0VMPdPbD1.category("boot-diagnostics").description($("Commands to configure boot-diagnostics of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsBootDiagnostics0VMPdPbD1.command("set").description($("Set boot-diagnostics in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"bootDiagnostics\" : {\r\n             \"enabled\":null,\r\n             \"storageUri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--enabled <enabled>", $("Set the enabled value.")).option("--storage-uri <storageUri>", $("Set the storage-uri value.")).execute(function __82(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__82", line: 7186 }; return __func(_, this, arguments, __82, 1, __frame, function __$__82() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__82() { return (function __$__82(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__82() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/diagnosticsProfile/bootDiagnostics";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "enabled");
          if (options.enabled) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.enabled));
            cli.output.verbose("================================================");
            if ((options.parse && options.enabled)) {
              options.enabled = JSON.parse(options.enabled); } ;

            options.enabled = JSON.parse(options.enabled);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.enabled },]); } ;

          paramPath = ((options.path + "/") + "storageUri");
          if (options.storageUri) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageUri));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageUri)) {
              options.storageUri = JSON.parse(options.storageUri); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageUri },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsBootDiagnostics1VMPdPbD1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsBootDiagnostics1VMPdPbD1 = catparametersCreateOrUpdateVirtualMachineScaleSetsBootDiagnostics1VMPdPbD1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsBootDiagnostics1VMPdPbD1 = parametersCreateOrUpdateVirtualMachineScaleSetsBootDiagnostics1VMPdPbD1.category("boot-diagnostics").description($("Commands to configure boot-diagnostics of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsBootDiagnostics1VMPdPbD1.command("delete").description($("Remove boot-diagnostics in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"bootDiagnostics\" : {\r\n             \"enabled\":null,\r\n             \"storageUri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--enabled", $("Remove the enabled value.")).option("--storage-uri", $("Remove the storage-uri value.")).execute(function __83(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__83", line: 7251 }; return __func(_, this, arguments, __83, 1, __frame, function __$__83() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__83() { return (function __$__83(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__83() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/diagnosticsProfile/bootDiagnostics";
          anySubItem = ((false || options.enabled) || options.storageUri);
          if (anySubItem) {
            subItemPath = null;
            if (options.enabled) {
              subItemPath = (options.path + "/enabled");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.storageUri) {
              subItemPath = (options.path + "/storageUri");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP1 = parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP1.category("extension-profile").description($("Commands to configure extension-profile of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP1.command("set").description($("Set extension-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"extensionProfile\" : {\r\n             \"extensions\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"forceUpdateTag\":\"\",\r\n                 \"publisher\":\"\",\r\n                 \"type\":\"\",\r\n                 \"typeHandlerVersion\":\"\",\r\n                 \"autoUpgradeMinorVersion\":null,\r\n                 \"settings\":{\r\n                 },\r\n                 \"protectedSettings\":{\r\n                 },\r\n                 \"provisioningState\":\"\",\r\n                 \"id\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--extensions <extensions>", $("Set the extensions value.")).execute(function __84(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__84", line: 7304 }; return __func(_, this, arguments, __84, 1, __frame, function __$__84() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__84() { return (function __$__84(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__84() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/extensionProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "extensions");
          if (options.extensions) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.extensions));
            cli.output.verbose("================================================");
            if ((options.parse && options.extensions)) {
              options.extensions = JSON.parse(options.extensions); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.extensions },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP1 = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP1 = parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP1.category("extension-profile").description($("Commands to configure extension-profile of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP1.command("delete").description($("Remove extension-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"extensionProfile\" : {\r\n             \"extensions\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"forceUpdateTag\":\"\",\r\n                 \"publisher\":\"\",\r\n                 \"type\":\"\",\r\n                 \"typeHandlerVersion\":\"\",\r\n                 \"autoUpgradeMinorVersion\":null,\r\n                 \"settings\":{\r\n                 },\r\n                 \"protectedSettings\":{\r\n                 },\r\n                 \"provisioningState\":\"\",\r\n                 \"id\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--extensions", $("Remove the extensions value.")).execute(function __85(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__85", line: 7356 }; return __func(_, this, arguments, __85, 1, __frame, function __$__85() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__85() { return (function __$__85(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__85() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/extensionProfile";
          anySubItem = (false || options.extensions);
          if (anySubItem) {
            subItemPath = null;
            if (options.extensions) {
              subItemPath = (options.path + "/extensions");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions0VMPePe1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensions0VMPePe1 = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions0VMPePe1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsExtensions0VMPePe1 = parametersCreateOrUpdateVirtualMachineScaleSetsExtensions0VMPePe1.category("extensions").description($("Commands to configure extensions of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsExtensions0VMPePe1.command("set").description($("Set extensions in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"extensions\" : {\r\n             \"name\":\"\",\r\n             \"forceUpdateTag\":\"\",\r\n             \"publisher\":\"\",\r\n             \"type\":\"\",\r\n             \"typeHandlerVersion\":\"\",\r\n             \"autoUpgradeMinorVersion\":null,\r\n             \"settings\":{\r\n             },\r\n             \"protectedSettings\":{\r\n             },\r\n             \"provisioningState\":\"\",\r\n             \"id\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--force-update-tag <forceUpdateTag>", $("Set the force-update-tag value.")).option("--publisher <publisher>", $("Set the publisher value.")).option("--type <type>", $("Set the type value.")).option("--type-handler-version <typeHandlerVersion>", $("Set the type-handler-version value.")).option("--auto-upgrade-minor-version <autoUpgradeMinorVersion>", $("Set the auto-upgrade-minor-version value.")).option("--settings <settings>", $("Set the settings value.")).option("--protected-settings <protectedSettings>", $("Set the protected-settings value.")).option("--provisioning-state <provisioningState>", $("Set the provisioning-state value.")).option("--id <id>", $("Set the id value.")).execute(function __86(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__86", line: 7416 }; return __func(_, this, arguments, __86, 1, __frame, function __$__86() {

















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__86() { return (function __$__86(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__86() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/extensionProfile/extensions" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "forceUpdateTag");
          if (options.forceUpdateTag) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.forceUpdateTag));
            cli.output.verbose("================================================");
            if ((options.parse && options.forceUpdateTag)) {
              options.forceUpdateTag = JSON.parse(options.forceUpdateTag); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.forceUpdateTag },]); } ;

          paramPath = ((options.path + "/") + "publisher");
          if (options.publisher) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publisher));
            cli.output.verbose("================================================");
            if ((options.parse && options.publisher)) {
              options.publisher = JSON.parse(options.publisher); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publisher },]); } ;

          paramPath = ((options.path + "/") + "type");
          if (options.type) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.type));
            cli.output.verbose("================================================");
            if ((options.parse && options.type)) {
              options.type = JSON.parse(options.type); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.type },]); } ;

          paramPath = ((options.path + "/") + "typeHandlerVersion");
          if (options.typeHandlerVersion) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.typeHandlerVersion));
            cli.output.verbose("================================================");
            if ((options.parse && options.typeHandlerVersion)) {
              options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.typeHandlerVersion },]); } ;

          paramPath = ((options.path + "/") + "autoUpgradeMinorVersion");
          if (options.autoUpgradeMinorVersion) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.autoUpgradeMinorVersion));
            cli.output.verbose("================================================");
            if ((options.parse && options.autoUpgradeMinorVersion)) {
              options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion); } ;

            options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.autoUpgradeMinorVersion },]); } ;

          paramPath = ((options.path + "/") + "settings");
          if (options.settings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.settings));
            cli.output.verbose("================================================");
            if ((options.parse && options.settings)) {
              options.settings = JSON.parse(options.settings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.settings },]); } ;

          paramPath = ((options.path + "/") + "protectedSettings");
          if (options.protectedSettings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.protectedSettings));
            cli.output.verbose("================================================");
            if ((options.parse && options.protectedSettings)) {
              options.protectedSettings = JSON.parse(options.protectedSettings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.protectedSettings },]); } ;

          paramPath = ((options.path + "/") + "provisioningState");
          if (options.provisioningState) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.provisioningState));
            cli.output.verbose("================================================");
            if ((options.parse && options.provisioningState)) {
              options.provisioningState = JSON.parse(options.provisioningState); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.provisioningState },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions1VMPePe1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensions1VMPePe1 = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions1VMPePe1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsExtensions1VMPePe1 = parametersCreateOrUpdateVirtualMachineScaleSetsExtensions1VMPePe1.category("extensions").description($("Commands to configure extensions of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsExtensions1VMPePe1.command("delete").description($("Remove extensions in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"extensions\" : {\r\n             \"name\":\"\",\r\n             \"forceUpdateTag\":\"\",\r\n             \"publisher\":\"\",\r\n             \"type\":\"\",\r\n             \"typeHandlerVersion\":\"\",\r\n             \"autoUpgradeMinorVersion\":null,\r\n             \"settings\":{\r\n             },\r\n             \"protectedSettings\":{\r\n             },\r\n             \"provisioningState\":\"\",\r\n             \"id\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--name", $("Remove the name value.")).option("--force-update-tag", $("Remove the force-update-tag value.")).option("--publisher", $("Remove the publisher value.")).option("--type", $("Remove the type value.")).option("--type-handler-version", $("Remove the type-handler-version value.")).option("--auto-upgrade-minor-version", $("Remove the auto-upgrade-minor-version value.")).option("--settings", $("Remove the settings value.")).option("--protected-settings", $("Remove the protected-settings value.")).option("--provisioning-state", $("Remove the provisioning-state value.")).option("--id", $("Remove the id value.")).execute(function __87(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__87", line: 7582 }; return __func(_, this, arguments, __87, 1, __frame, function __$__87() {















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__87() { return (function __$__87(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__87() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/extensionProfile/extensions" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((((((((((false || options.name) || options.forceUpdateTag) || options.publisher) || options.type) || options.typeHandlerVersion) || options.autoUpgradeMinorVersion) || options.settings) || options.protectedSettings) || options.provisioningState) || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.forceUpdateTag) {
              subItemPath = (options.path + "/forceUpdateTag");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.publisher) {
              subItemPath = (options.path + "/publisher");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.type) {
              subItemPath = (options.path + "/type");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.typeHandlerVersion) {
              subItemPath = (options.path + "/typeHandlerVersion");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.autoUpgradeMinorVersion) {
              subItemPath = (options.path + "/autoUpgradeMinorVersion");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.settings) {
              subItemPath = (options.path + "/settings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.protectedSettings) {
              subItemPath = (options.path + "/protectedSettings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.provisioningState) {
              subItemPath = (options.path + "/provisioningState");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsIdentity0I1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsIdentity0I1 = catparametersCreateOrUpdateVirtualMachineScaleSetsIdentity0I1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsIdentity0I1 = parametersCreateOrUpdateVirtualMachineScaleSetsIdentity0I1.category("identity").description($("Commands to configure identity of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsIdentity0I1.command("set").description($("Set identity in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"identity\" : {\r\n             \"principalId\":\"\",\r\n             \"tenantId\":\"\",\r\n             \"type\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--principal-id <principalId>", $("Set the principal-id value.")).option("--tenant-id <tenantId>", $("Set the tenant-id value.")).option("--type <type>", $("Set the type value.")).execute(function __88(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__88", line: 7669 }; return __func(_, this, arguments, __88, 1, __frame, function __$__88() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__88() { return (function __$__88(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__88() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/identity";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "principalId");
          if (options.principalId) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.principalId));
            cli.output.verbose("================================================");
            if ((options.parse && options.principalId)) {
              options.principalId = JSON.parse(options.principalId); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.principalId },]); } ;

          paramPath = ((options.path + "/") + "tenantId");
          if (options.tenantId) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tenantId));
            cli.output.verbose("================================================");
            if ((options.parse && options.tenantId)) {
              options.tenantId = JSON.parse(options.tenantId); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tenantId },]); } ;

          paramPath = ((options.path + "/") + "type");
          if (options.type) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.type));
            cli.output.verbose("================================================");
            if ((options.parse && options.type)) {
              options.type = JSON.parse(options.type); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.type },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsIdentity1I1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsIdentity1I1 = catparametersCreateOrUpdateVirtualMachineScaleSetsIdentity1I1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsIdentity1I1 = parametersCreateOrUpdateVirtualMachineScaleSetsIdentity1I1.category("identity").description($("Commands to configure identity of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsIdentity1I1.command("delete").description($("Remove identity in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"identity\" : {\r\n             \"principalId\":\"\",\r\n             \"tenantId\":\"\",\r\n             \"type\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--principal-id", $("Remove the principal-id value.")).option("--tenant-id", $("Remove the tenant-id value.")).option("--type", $("Remove the type value.")).execute(function __89(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__89", line: 7745 }; return __func(_, this, arguments, __89, 1, __frame, function __$__89() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__89() { return (function __$__89(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__89() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/identity";
          anySubItem = (((false || options.principalId) || options.tenantId) || options.type);
          if (anySubItem) {
            subItemPath = null;
            if (options.principalId) {
              subItemPath = (options.path + "/principalId");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tenantId) {
              subItemPath = (options.path + "/tenantId");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.type) {
              subItemPath = (options.path + "/type");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateVirtualMachineScaleSetsZones0Z1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsZones0Z1 = catparametersCreateOrUpdateVirtualMachineScaleSetsZones0Z1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersCreateOrUpdateVirtualMachineScaleSetsZones0Z1 = parametersCreateOrUpdateVirtualMachineScaleSetsZones0Z1.category("zones").description($("Commands to configure zones of vmss in config file."));

  setparametersCreateOrUpdateVirtualMachineScaleSetsZones0Z1.command("set").description($("Set zones in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"zones\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).execute(function __90(options, _) { var fileContent, parametersObj, error, updatedContent; var __frame = { name: "__90", line: 7803 }; return __func(_, this, arguments, __90, 1, __frame, function __$__90() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__90() { return (function __$__90(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__90() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/zones" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateVirtualMachineScaleSetsZones1Z1 = cli.category("vmss");
  var parametersCreateOrUpdateVirtualMachineScaleSetsZones1Z1 = catparametersCreateOrUpdateVirtualMachineScaleSetsZones1Z1.category("config").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsZones1Z1 = parametersCreateOrUpdateVirtualMachineScaleSetsZones1Z1.category("zones").description($("Commands to configure zones of vmss in config file."));

  deleteparametersCreateOrUpdateVirtualMachineScaleSetsZones1Z1.command("delete").description($("Remove zones in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"zones\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).execute(function __91(options, _) { var fileContent, parametersObj, updatedContent; var __frame = { name: "__91", line: 7848 }; return __func(_, this, arguments, __91, 1, __frame, function __$__91() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__91() { return (function __$__91(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__91() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/zones" + ((options.index ? (("/" + options.index)) : "")));
          jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]);

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });








  var virtualMachineScaleSetsDeallocate = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsDeallocate.command("deallocate [resource-group] [name] [instance-ids]").description($("Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and releases the compute resources. You are not billed for the compute resources that this virtual machine scale set deallocates.")).usage("[options] <resource-group> <name> <instance-ids>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("--instance-ids <instance-ids>", $("instance-ids")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __92(resourceGroup, name, instanceIds, options, _) { var instanceIdsObj, fileContent, instanceIdsValArr, item, subscription, computeManagementClient, result; var __frame = { name: "__92", line: 7891 }; return __func(_, this, arguments, __92, 4, __frame, function __$__92() { return (function __$__92(__then) {







        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__92() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__92(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__92() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("instanceIds = " + instanceIds));
          instanceIdsObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            instanceIdsObj = JSON.parse(fileContent); }

           else {
            instanceIdsValArr = (instanceIds ? instanceIds.split(",") : []);
            cli.output.verbose(("instanceIds : " + instanceIdsValArr));
            instanceIdsObj = [];
            for (item in instanceIdsValArr) {
              instanceIdsObj.push(instanceIdsValArr[item]); };

            instanceIdsObj = { instanceIds: instanceIdsObj }; } ;

          cli.output.verbose(("instanceIdsObj = " + JSON.stringify(instanceIdsObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.deallocate(resourceGroup, name, instanceIdsObj, __cb(_, __frame, 30, 65, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });







  var virtualMachineScaleSetsDelete = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsDelete.command("delete [resource-group] [name]").description($("Deletes a VM scale set.")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __93(resourceGroup, name, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__93", line: 7939 }; return __func(_, this, arguments, __93, 3, __frame, function __$__93() { return (function __$__93(__then) {






        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__93() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__93(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__93() {


          cli.output.verbose(("name = " + name));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.deleteMethod(resourceGroup, name, __cb(_, __frame, 13, 65, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });








  var virtualMachineScaleSetsDeleteInstances = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsDeleteInstances.command("delete-instances [resource-group] [name] [instance-ids]").description($("Deletes virtual machines in a VM scale set.")).usage("[options] <resource-group> <name> <instance-ids>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("--instance-ids <instance-ids>", $("instance-ids")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __94(resourceGroup, name, instanceIds, options, _) { var instanceIdsObj, fileContent, instanceIdsValArr, item, subscription, computeManagementClient, result; var __frame = { name: "__94", line: 7972 }; return __func(_, this, arguments, __94, 4, __frame, function __$__94() { return (function __$__94(__then) {







        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__94() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__94(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__94() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("instanceIds = " + instanceIds));
          instanceIdsObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            instanceIdsObj = JSON.parse(fileContent); }

           else {
            instanceIdsValArr = (instanceIds ? instanceIds.split(",") : []);
            cli.output.verbose(("instanceIds : " + instanceIdsValArr));
            instanceIdsObj = [];
            for (item in instanceIdsValArr) {
              instanceIdsObj.push(instanceIdsValArr[item]); }; } ;


          cli.output.verbose(("instanceIdsObj = " + JSON.stringify(instanceIdsObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.deleteInstances(resourceGroup, name, instanceIdsObj, __cb(_, __frame, 29, 65, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });







  var virtualMachineScaleSetsGet = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsGet.command("show [resource-group] [name]").description($("Display information about a virtual machine scale set.")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __95(resourceGroup, name, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__95", line: 8019 }; return __func(_, this, arguments, __95, 3, __frame, function __$__95() { return (function __$__95(__then) {






        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__95() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__95(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__95() {


          cli.output.verbose(("name = " + name));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.get(resourceGroup, name, __cb(_, __frame, 13, 65, function ___(__0, __3) { result = __3;
            if (cli.output.format().json) {
              cli.output.json(result); }

             else {
              display(cli, result); } ; _(); }, true)); }); }); }); });







  var virtualMachineScaleSetsGetInstanceView = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsGetInstanceView.command("get-instance-view [resource-group] [name]").description($("Gets the status of a VM scale set instance.")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __96(resourceGroup, name, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__96", line: 8053 }; return __func(_, this, arguments, __96, 3, __frame, function __$__96() { return (function __$__96(__then) {






        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__96() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__96(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__96() {


          cli.output.verbose(("name = " + name));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.getInstanceView(resourceGroup, name, __cb(_, __frame, 13, 65, function ___(__0, __3) { result = __3;
            if (cli.output.format().json) {
              cli.output.json(result); }

             else {
              display(cli, result); } ; _(); }, true)); }); }); }); });






  var virtualMachineScaleSetsList = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsList.command("list [resource-group]").description($("Gets a list of all VM scale sets under a resource group.")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __97(resourceGroup, options, _) { var subscription, computeManagementClient, result, nextPageLink, pageResult; var __frame = { name: "__97", line: 8085 }; return __func(_, this, arguments, __97, 2, __frame, function __$__97() {





      cli.output.verbose(("resourceGroup = " + resourceGroup));
      subscription = profile.current.getSubscription(options.subscription);
      computeManagementClient = utils.createComputeManagementClient(subscription);
      result = null; return (function __$__97(__then) {
        if (utils.stringIsNullOrEmpty(resourceGroup)) {
          return computeManagementClient.virtualMachineScaleSets.listAll(__cb(_, __frame, 6, 63, function ___(__0, __1) { result = __1; __then(); }, true)); } else {


          return computeManagementClient.virtualMachineScaleSets.list(resourceGroup, __cb(_, __frame, 9, 63, function ___(__0, __2) { result = __2; __then(); }, true)); } ; })(function __$__97() {

        nextPageLink = result.nextLink; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$__97() { __more = false;
            var __6 = nextPageLink; if (__6) {
              return computeManagementClient.virtualMachineScaleSets.listNext(nextPageLink, __cb(_, __frame, 13, 71, function ___(__0, __3) { pageResult = __3;
                pageResult.forEach(function(item) {
                  result.push(item); });

                nextPageLink = pageResult.nextLink; while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$__97() {


          if (cli.output.format().json) {
            cli.output.json(result); }

           else {
            cli.output.table(result, function(row, item) {
              var rgName = (item.id ? utils.parseResourceReferenceUri(item.id).resourceGroupName : null);
              row.cell($("ResourceGroupName"), rgName);
              row.cell($("Name"), item.name);
              row.cell($("ProvisioningState"), item.provisioningState);
              row.cell($("Location"), item.location); }); } ; _(); }); }); }); });








  var virtualMachineScaleSetsListSkus = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsListSkus.command("list-skus [resource-group] [name]").description($("Gets a list of SKUs available for your VM scale set, including the minimum and maximum VM instances allowed for each SKU.")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __98(resourceGroup, name, options, _) { var subscription, computeManagementClient, result, nextPageLink, pageResult; var __frame = { name: "__98", line: 8131 }; return __func(_, this, arguments, __98, 3, __frame, function __$__98() { return (function __$__98(__then) {






        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__98() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__98(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__98() {


          cli.output.verbose(("name = " + name));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.listSkus(resourceGroup, name, __cb(_, __frame, 13, 65, function ___(__0, __3) { result = __3;
            nextPageLink = result.nextLink; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$__98() { __more = false;
                var __8 = nextPageLink; if (__8) {
                  return computeManagementClient.virtualMachineScaleSets.listSkusNext(nextPageLink, __cb(_, __frame, 16, 71, function ___(__0, __4) { pageResult = __4;
                    pageResult.forEach(function(item) {
                      result.push(item); });

                    nextPageLink = pageResult.nextLink; while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$__98() {


              if (result) {
                cli.output.json(result); } ; _(); }); }, true)); }); }); }); });








  var virtualMachineScaleSetsPowerOff = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsPowerOff.command("power-off [resource-group] [name] [instance-ids]").description($("Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.")).usage("[options] <resource-group> <name> <instance-ids>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("--instance-ids <instance-ids>", $("instance-ids")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __99(resourceGroup, name, instanceIds, options, _) { var instanceIdsObj, fileContent, instanceIdsValArr, item, subscription, computeManagementClient, result; var __frame = { name: "__99", line: 8173 }; return __func(_, this, arguments, __99, 4, __frame, function __$__99() { return (function __$__99(__then) {







        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__99() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__99(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__99() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("instanceIds = " + instanceIds));
          instanceIdsObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            instanceIdsObj = JSON.parse(fileContent); }

           else {
            instanceIdsValArr = (instanceIds ? instanceIds.split(",") : []);
            cli.output.verbose(("instanceIds : " + instanceIdsValArr));
            instanceIdsObj = [];
            for (item in instanceIdsValArr) {
              instanceIdsObj.push(instanceIdsValArr[item]); };

            instanceIdsObj = { instanceIds: instanceIdsObj }; } ;

          cli.output.verbose(("instanceIdsObj = " + JSON.stringify(instanceIdsObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.powerOff(resourceGroup, name, instanceIdsObj, __cb(_, __frame, 30, 65, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });








  var virtualMachineScaleSetsReimage = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsReimage.command("reimage [resource-group] [name] [instance-ids]").description($("Reimages (upgrade the operating system) one or more virtual machines in a VM scale set.")).usage("[options] <resource-group> <name> <instance-ids>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("--instance-ids <instance-ids>", $("instance-ids")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __100(resourceGroup, name, instanceIds, options, _) { var instanceIdsObj, fileContent, instanceIdsValArr, item, subscription, computeManagementClient, result; var __frame = { name: "__100", line: 8223 }; return __func(_, this, arguments, __100, 4, __frame, function __$__100() { return (function __$__100(__then) {







        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__100() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__100(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__100() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("instanceIds = " + instanceIds));
          instanceIdsObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            instanceIdsObj = JSON.parse(fileContent); }

           else {
            instanceIdsValArr = (instanceIds ? instanceIds.split(",") : []);
            cli.output.verbose(("instanceIds : " + instanceIdsValArr));
            instanceIdsObj = [];
            for (item in instanceIdsValArr) {
              instanceIdsObj.push(instanceIdsValArr[item]); }; } ;


          cli.output.verbose(("instanceIdsObj = " + JSON.stringify(instanceIdsObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.reimage(resourceGroup, name, instanceIdsObj, __cb(_, __frame, 29, 65, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });








  var virtualMachineScaleSetsReimageAll = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsReimageAll.command("reimage-all [resource-group] [name] [instance-ids]").description($("Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This operation is only supported for managed disks.")).usage("[options] <resource-group> <name> <instance-ids>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("--instance-ids <instance-ids>", $("instance-ids")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __101(resourceGroup, name, instanceIds, options, _) { var instanceIdsObj, fileContent, instanceIdsValArr, item, subscription, computeManagementClient, result; var __frame = { name: "__101", line: 8272 }; return __func(_, this, arguments, __101, 4, __frame, function __$__101() { return (function __$__101(__then) {







        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__101() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__101(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__101() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("instanceIds = " + instanceIds));
          instanceIdsObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            instanceIdsObj = JSON.parse(fileContent); }

           else {
            instanceIdsValArr = (instanceIds ? instanceIds.split(",") : []);
            cli.output.verbose(("instanceIds : " + instanceIdsValArr));
            instanceIdsObj = [];
            for (item in instanceIdsValArr) {
              instanceIdsObj.push(instanceIdsValArr[item]); }; } ;


          cli.output.verbose(("instanceIdsObj = " + JSON.stringify(instanceIdsObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.reimageAll(resourceGroup, name, instanceIdsObj, __cb(_, __frame, 29, 65, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });








  var virtualMachineScaleSetsRestart = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsRestart.command("restart [resource-group] [name] [instance-ids]").description($("Restarts one or more virtual machines in a VM scale set.")).usage("[options] <resource-group> <name> <instance-ids>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("--instance-ids <instance-ids>", $("instance-ids")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __102(resourceGroup, name, instanceIds, options, _) { var instanceIdsObj, fileContent, instanceIdsValArr, item, subscription, computeManagementClient, result; var __frame = { name: "__102", line: 8321 }; return __func(_, this, arguments, __102, 4, __frame, function __$__102() { return (function __$__102(__then) {







        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__102() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__102(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__102() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("instanceIds = " + instanceIds));
          instanceIdsObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            instanceIdsObj = JSON.parse(fileContent); }

           else {
            instanceIdsValArr = (instanceIds ? instanceIds.split(",") : []);
            cli.output.verbose(("instanceIds : " + instanceIdsValArr));
            instanceIdsObj = [];
            for (item in instanceIdsValArr) {
              instanceIdsObj.push(instanceIdsValArr[item]); };

            instanceIdsObj = { instanceIds: instanceIdsObj }; } ;

          cli.output.verbose(("instanceIdsObj = " + JSON.stringify(instanceIdsObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.restart(resourceGroup, name, instanceIdsObj, __cb(_, __frame, 30, 65, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });








  var virtualMachineScaleSetsStart = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsStart.command("start [resource-group] [name] [instance-ids]").description($("Starts one or more virtual machines in a VM scale set.")).usage("[options] <resource-group> <name> <instance-ids>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("--instance-ids <instance-ids>", $("instance-ids")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __103(resourceGroup, name, instanceIds, options, _) { var instanceIdsObj, fileContent, instanceIdsValArr, item, subscription, computeManagementClient, result; var __frame = { name: "__103", line: 8371 }; return __func(_, this, arguments, __103, 4, __frame, function __$__103() { return (function __$__103(__then) {







        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__103() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__103(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__103() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("instanceIds = " + instanceIds));
          instanceIdsObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            instanceIdsObj = JSON.parse(fileContent); }

           else {
            instanceIdsValArr = (instanceIds ? instanceIds.split(",") : []);
            cli.output.verbose(("instanceIds : " + instanceIdsValArr));
            instanceIdsObj = [];
            for (item in instanceIdsValArr) {
              instanceIdsObj.push(instanceIdsValArr[item]); };

            instanceIdsObj = { instanceIds: instanceIdsObj }; } ;

          cli.output.verbose(("instanceIdsObj = " + JSON.stringify(instanceIdsObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.start(resourceGroup, name, instanceIdsObj, __cb(_, __frame, 30, 65, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });








































































































































































































  var virtualMachineScaleSetsUpdate = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsUpdate.command("update [resource-group] [name] [parameters]").description($("Update a VM scale set.")).usage("[options] <resource-group> <name> <parameters>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("-p, --parameters <parameters>", $("A string of parameters in JSON format")).option("--parameter-file <parameter-file>", $("The text file that contains input parameter object in JSON format")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __104(resourceGroup, name, parameters, options, _) { var parametersObj, fileContent, subscription, computeManagementClient, result; var __frame = { name: "__104", line: 8614 }; return __func(_, this, arguments, __104, 4, __frame, function __$__104() { return (function __$__104(__then) {








        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__104() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__104(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__104() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("parameters = " + parameters));
          parametersObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            parametersObj = JSON.parse(fileContent); }

           else {
            parametersObj = JSON.parse(parameters); } ;

          cli.output.verbose(("parametersObj = " + JSON.stringify(parametersObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.update(resourceGroup, name, parametersObj, __cb(_, __frame, 24, 65, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });


  var virtualMachineScaleSetsUpdateupdateParameters2 = virtualMachineScaleSetsUpdate.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  virtualMachineScaleSetsUpdateupdateParameters2.command("create").description($("Generate virtualMachineScaleSetsUpdate parameter string or files.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).execute(function __105(options, _) { var filePath; var __frame = { name: "__105", line: 8649 }; return __func(_, this, arguments, __105, 1, __frame, function __$__105() {




      return cli.output.verbose("{\"sku\":{\"name\":\"\",\"tier\":\"\",\"capacity\":null},\"plan\":{\"name\":\"\",\"publisher\":\"\",\"product\":\"\",\"promotionCode\":\"\"},\"upgradePolicy\":{\"mode\":null,\"rollingUpgradePolicy\":{\"maxBatchInstancePercent\":null,\"maxUnhealthyInstancePercent\":null,\"maxUnhealthyUpgradedInstancePercent\":null,\"pauseTimeBetweenBatches\":\"\"},\"automaticOSUpgrade\":null},\"virtualMachineProfile\":{\"osProfile\":{\"customData\":\"\",\"windowsConfiguration\":{\"provisionVMAgent\":null,\"enableAutomaticUpdates\":null,\"timeZone\":\"\",\"additionalUnattendContent\":[{\"passName\":null,\"componentName\":null,\"settingName\":null,\"content\":\"\"}],\"winRM\":{\"listeners\":[{\"protocol\":null,\"certificateUrl\":\"\"}]}},\"linuxConfiguration\":{\"disablePasswordAuthentication\":null,\"ssh\":{\"publicKeys\":[{\"path\":\"\",\"keyData\":\"\"}]}},\"secrets\":[{\"sourceVault\":{\"id\":\"\"},\"vaultCertificates\":[{\"certificateUrl\":\"\",\"certificateStore\":\"\"}]}]},\"storageProfile\":{\"imageReference\":{\"publisher\":\"\",\"offer\":\"\",\"sku\":\"\",\"version\":\"\",\"id\":\"\"},\"osDisk\":{\"caching\":null,\"image\":{\"uri\":\"\"},\"vhdContainers\":[\"\"],\"managedDisk\":{\"storageAccountType\":null}},\"dataDisks\":[{\"name\":\"\",\"lun\":\"\",\"caching\":null,\"createOption\":\"\",\"diskSizeGB\":null,\"managedDisk\":{\"storageAccountType\":null}}]},\"networkProfile\":{\"networkInterfaceConfigurations\":[{\"name\":\"\",\"primary\":null,\"enableAcceleratedNetworking\":null,\"networkSecurityGroup\":{\"id\":\"\"},\"dnsSettings\":{\"dnsServers\":[\"\"]},\"ipConfigurations\":[{\"name\":\"\",\"subnet\":{\"id\":\"\"},\"primary\":null,\"publicIPAddressConfiguration\":{\"name\":\"\",\"idleTimeoutInMinutes\":null,\"dnsSettings\":{\"domainNameLabel\":\"\"}},\"privateIPAddressVersion\":\"\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"\"}],\"id\":\"\"}],\"id\":\"\"}]},\"diagnosticsProfile\":{\"bootDiagnostics\":{\"enabled\":null,\"storageUri\":\"\"}},\"extensionProfile\":{\"extensions\":[{\"name\":\"\",\"forceUpdateTag\":\"\",\"publisher\":\"\",\"type\":\"\",\"typeHandlerVersion\":\"\",\"autoUpgradeMinorVersion\":null,\"settings\":{},\"protectedSettings\":{},\"provisioningState\":\"\",\"id\":null}]},\"licenseType\":\"\"},\"overprovision\":null,\"singlePlacementGroup\":null,\"identity\":{\"principalId\":\"\",\"tenantId\":\"\",\"type\":null},\"tags\":{}}", __cb(_, __frame, 1, 15, function __$__105() {
        filePath = "virtualMachineScaleSetsUpdate_update.json";
        if (options.parameterFile) {
          filePath = options.parameterFile; } ;

        fs.writeFileSync(filePath, beautify("{\r\n\"sku\":{\r\n\"name\":\"\",\r\n\"tier\":\"\",\r\n\"capacity\":null\r\n},\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"product\":\"\",\r\n\"promotionCode\":\"\"\r\n},\r\n\"upgradePolicy\":{\r\n\"mode\":null,\r\n\"rollingUpgradePolicy\":{\r\n\"maxBatchInstancePercent\":null,\r\n\"maxUnhealthyInstancePercent\":null,\r\n\"maxUnhealthyUpgradedInstancePercent\":null,\r\n\"pauseTimeBetweenBatches\":\"\"\r\n},\r\n\"automaticOSUpgrade\":null\r\n},\r\n\"virtualMachineProfile\":{\r\n\"osProfile\":{\r\n\"customData\":\"\",\r\n\"windowsConfiguration\":{\r\n\"provisionVMAgent\":null,\r\n\"enableAutomaticUpdates\":null,\r\n\"timeZone\":\"\",\r\n\"additionalUnattendContent\":[\r\n{\r\n\"passName\":null,\r\n\"componentName\":null,\r\n\"settingName\":null,\r\n\"content\":\"\"\r\n}\r\n],\r\n\"winRM\":{\r\n\"listeners\":[\r\n{\r\n\"protocol\":null,\r\n\"certificateUrl\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"linuxConfiguration\":{\r\n\"disablePasswordAuthentication\":null,\r\n\"ssh\":{\r\n\"publicKeys\":[\r\n{\r\n\"path\":\"\",\r\n\"keyData\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"secrets\":[\r\n{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"vaultCertificates\":[\r\n{\r\n\"certificateUrl\":\"\",\r\n\"certificateStore\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"storageProfile\":{\r\n\"imageReference\":{\r\n\"publisher\":\"\",\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\",\r\n\"id\":\"\"\r\n},\r\n\"osDisk\":{\r\n\"caching\":null,\r\n\"image\":{\r\n\"uri\":\"\"\r\n},\r\n\"vhdContainers\":[\r\n\"\"\r\n],\r\n\"managedDisk\":{\r\n\"storageAccountType\":null\r\n}\r\n},\r\n\"dataDisks\":[\r\n{\r\n\"name\":\"\",\r\n\"lun\":\"\",\r\n\"caching\":null,\r\n\"createOption\":\"\",\r\n\"diskSizeGB\":null,\r\n\"managedDisk\":{\r\n\"storageAccountType\":null\r\n}\r\n}\r\n]\r\n},\r\n\"networkProfile\":{\r\n\"networkInterfaceConfigurations\":[\r\n{\r\n\"name\":\"\",\r\n\"primary\":null,\r\n\"enableAcceleratedNetworking\":null,\r\n\"networkSecurityGroup\":{\r\n\"id\":\"\"\r\n},\r\n\"dnsSettings\":{\r\n\"dnsServers\":[\r\n\"\"\r\n]\r\n},\r\n\"ipConfigurations\":[\r\n{\r\n\"name\":\"\",\r\n\"subnet\":{\r\n\"id\":\"\"\r\n},\r\n\"primary\":null,\r\n\"publicIPAddressConfiguration\":{\r\n\"name\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"dnsSettings\":{\r\n\"domainNameLabel\":\"\"\r\n}\r\n},\r\n\"privateIPAddressVersion\":\"\",\r\n\"applicationGatewayBackendAddressPools\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"loadBalancerBackendAddressPools\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"loadBalancerInboundNatPools\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"id\":\"\"\r\n}\r\n],\r\n\"id\":\"\"\r\n}\r\n]\r\n},\r\n\"diagnosticsProfile\":{\r\n\"bootDiagnostics\":{\r\n\"enabled\":null,\r\n\"storageUri\":\"\"\r\n}\r\n},\r\n\"extensionProfile\":{\r\n\"extensions\":[\r\n{\r\n\"name\":\"\",\r\n\"forceUpdateTag\":\"\",\r\n\"publisher\":\"\",\r\n\"type\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"autoUpgradeMinorVersion\":null,\r\n\"settings\":{\r\n},\r\n\"protectedSettings\":{\r\n},\r\n\"provisioningState\":\"\",\r\n\"id\":null\r\n}\r\n]\r\n},\r\n\"licenseType\":\"\"\r\n},\r\n\"overprovision\":null,\r\n\"singlePlacementGroup\":null,\r\n\"identity\":{\r\n\"principalId\":\"\",\r\n\"tenantId\":\"\",\r\n\"type\":null\r\n},\r\n\"tags\":{\r\n}\r\n}"));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file output to: " + filePath));
        cli.output.verbose("====================================="); _(); }, true)); }); });


  virtualMachineScaleSetsUpdateupdateParameters2.command("patch").description($("Command to patch virtualMachineScaleSetsUpdate parameter JSON file.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--operation <operation>", $("The JSON patch operation: add, remove, or replace.")).option("--path <path>", $("The JSON data path, e.g.: \"foo/1\".")).option("--value <value>", $("The JSON value.")).option("--parse", $("Parse the JSON value to object.")).execute(function __106(options, _) { var fileContent, parametersObj, updatedContent; var __frame = { name: "__106", line: 8669 }; return __func(_, this, arguments, __106, 1, __frame, function __$__106() {








      return cli.output.verbose(options.parameterFile, __cb(_, __frame, 1, 15, function __$__106() {
        cli.output.verbose(options.operation);
        cli.output.verbose(options.path);
        cli.output.verbose(options.value);
        cli.output.verbose(options.parse);
        if (options.parse) {
          options.value = JSON.parse(options.value); } ;

        cli.output.verbose(options.value);
        cli.output.verbose("=====================================");
        cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
        cli.output.verbose("=====================================");
        fileContent = fs.readFileSync(options.parameterFile, "utf8");
        parametersObj = JSON.parse(fileContent);
        cli.output.verbose("JSON object:");
        cli.output.verbose(JSON.stringify(parametersObj));
        if ((options.operation == "add")) {
          jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } else {

          if ((options.operation == "remove")) {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } else {

            if ((options.operation == "replace")) {
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ; } ; } ;

        updatedContent = JSON.stringify(parametersObj);
        cli.output.verbose("=====================================");
        cli.output.verbose("JSON object (updated):");
        cli.output.verbose(JSON.stringify(parametersObj));
        cli.output.verbose("=====================================");
        fs.writeFileSync(options.parameterFile, beautify(updatedContent));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
        cli.output.verbose("====================================="); _(); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsVirtualMachineScaleSetUpdate01 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsVirtualMachineScaleSetUpdate01 = catparametersUpdateVirtualMachineScaleSetsVirtualMachineScaleSetUpdate01.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsVirtualMachineScaleSetUpdate01 = parametersUpdateVirtualMachineScaleSetsVirtualMachineScaleSetUpdate01.category("virtual-machine-scale-set-update").description($("Commands to configure virtual-machine-scale-set-update of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsVirtualMachineScaleSetUpdate01.command("set").description($("Set virtual-machine-scale-set-update in update-parameters string or files, e.g. \r\n{\r\n  \"sku\":{\r\n    \"name\":\"\",\r\n    \"tier\":\"\",\r\n    \"capacity\":null\r\n  },\r\n  \"plan\":{\r\n    \"name\":\"\",\r\n    \"publisher\":\"\",\r\n    \"product\":\"\",\r\n    \"promotionCode\":\"\"\r\n  },\r\n  \"upgradePolicy\":{\r\n    \"mode\":null,\r\n    \"rollingUpgradePolicy\":{\r\n      \"maxBatchInstancePercent\":null,\r\n      \"maxUnhealthyInstancePercent\":null,\r\n      \"maxUnhealthyUpgradedInstancePercent\":null,\r\n      \"pauseTimeBetweenBatches\":\"\"\r\n    },\r\n    \"automaticOSUpgrade\":null\r\n  },\r\n  \"virtualMachineProfile\":{\r\n    \"osProfile\":{\r\n      \"customData\":\"\",\r\n      \"windowsConfiguration\":{\r\n        \"provisionVMAgent\":null,\r\n        \"enableAutomaticUpdates\":null,\r\n        \"timeZone\":\"\",\r\n        \"additionalUnattendContent\":[\r\n          {\r\n            \"passName\":null,\r\n            \"componentName\":null,\r\n            \"settingName\":null,\r\n            \"content\":\"\"\r\n          }\r\n        ],\r\n        \"winRM\":{\r\n          \"listeners\":[\r\n            {\r\n              \"protocol\":null,\r\n              \"certificateUrl\":\"\"\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      \"linuxConfiguration\":{\r\n        \"disablePasswordAuthentication\":null,\r\n        \"ssh\":{\r\n          \"publicKeys\":[\r\n            {\r\n              \"path\":\"\",\r\n              \"keyData\":\"\"\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      \"secrets\":[\r\n        {\r\n          \"sourceVault\":{\r\n            \"id\":\"\"\r\n          },\r\n          \"vaultCertificates\":[\r\n            {\r\n              \"certificateUrl\":\"\",\r\n              \"certificateStore\":\"\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"storageProfile\":{\r\n      \"imageReference\":{\r\n        \"publisher\":\"\",\r\n        \"offer\":\"\",\r\n        \"sku\":\"\",\r\n        \"version\":\"\",\r\n        \"id\":\"\"\r\n      },\r\n      \"osDisk\":{\r\n        \"caching\":null,\r\n        \"image\":{\r\n          \"uri\":\"\"\r\n        },\r\n        \"vhdContainers\":[\r\n          \"\"\r\n        ],\r\n        \"managedDisk\":{\r\n          \"storageAccountType\":null\r\n        }\r\n      },\r\n      \"dataDisks\":[\r\n        {\r\n          \"name\":\"\",\r\n          \"lun\":\"\",\r\n          \"caching\":null,\r\n          \"createOption\":\"\",\r\n          \"diskSizeGB\":null,\r\n          \"managedDisk\":{\r\n            \"storageAccountType\":null\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"networkProfile\":{\r\n      \"networkInterfaceConfigurations\":[\r\n        {\r\n          \"name\":\"\",\r\n          \"primary\":null,\r\n          \"enableAcceleratedNetworking\":null,\r\n          \"networkSecurityGroup\":{\r\n            \"id\":\"\"\r\n          },\r\n          \"dnsSettings\":{\r\n            \"dnsServers\":[\r\n              \"\"\r\n            ]\r\n          },\r\n          \"ipConfigurations\":[\r\n            {\r\n              \"name\":\"\",\r\n              \"subnet\":{\r\n                \"id\":\"\"\r\n              },\r\n              \"primary\":null,\r\n              \"publicIPAddressConfiguration\":{\r\n                \"name\":\"\",\r\n                \"idleTimeoutInMinutes\":null,\r\n                \"dnsSettings\":{\r\n                  \"domainNameLabel\":\"\"\r\n                }\r\n              },\r\n              \"privateIPAddressVersion\":\"\",\r\n              \"applicationGatewayBackendAddressPools\":[\r\n                {\r\n                  \"id\":\"\"\r\n                }\r\n              ],\r\n              \"loadBalancerBackendAddressPools\":[\r\n                {\r\n                  \"id\":\"\"\r\n                }\r\n              ],\r\n              \"loadBalancerInboundNatPools\":[\r\n                {\r\n                  \"id\":\"\"\r\n                }\r\n              ],\r\n              \"id\":\"\"\r\n            }\r\n          ],\r\n          \"id\":\"\"\r\n        }\r\n      ]\r\n    },\r\n    \"diagnosticsProfile\":{\r\n      \"bootDiagnostics\":{\r\n        \"enabled\":null,\r\n        \"storageUri\":\"\"\r\n      }\r\n    },\r\n    \"extensionProfile\":{\r\n      \"extensions\":[\r\n        {\r\n          \"name\":\"\",\r\n          \"forceUpdateTag\":\"\",\r\n          \"publisher\":\"\",\r\n          \"type\":\"\",\r\n          \"typeHandlerVersion\":\"\",\r\n          \"autoUpgradeMinorVersion\":null,\r\n          \"settings\":{\r\n          },\r\n          \"protectedSettings\":{\r\n          },\r\n          \"provisioningState\":\"\",\r\n          \"id\":null\r\n        }\r\n      ]\r\n    },\r\n    \"licenseType\":\"\"\r\n  },\r\n  \"overprovision\":null,\r\n  \"singlePlacementGroup\":null,\r\n  \"identity\":{\r\n    \"principalId\":\"\",\r\n    \"tenantId\":\"\",\r\n    \"type\":null\r\n  },\r\n  \"tags\":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--sku <sku>", $("Set the sku value.")).option("--plan <plan>", $("Set the plan value.")).option("--upgrade-policy <upgradePolicy>", $("Set the upgrade-policy value.")).option("--virtual-machine-profile <virtualMachineProfile>", $("Set the virtual-machine-profile value.")).option("--overprovision <overprovision>", $("Set the overprovision value.")).option("--single-placement-group <singlePlacementGroup>", $("Set the single-placement-group value.")).option("--identity <identity>", $("Set the identity value.")).option("--tags <tags>", $("Set the tags value.")).execute(function __107(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__107", line: 8725 }; return __func(_, this, arguments, __107, 1, __frame, function __$__107() {













      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__107() { return (function __$__107(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__107() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "sku");
          if (options.sku) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sku));
            cli.output.verbose("================================================");
            if ((options.parse && options.sku)) {
              options.sku = JSON.parse(options.sku); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sku },]); } ;

          paramPath = ((options.path + "/") + "plan");
          if (options.plan) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.plan));
            cli.output.verbose("================================================");
            if ((options.parse && options.plan)) {
              options.plan = JSON.parse(options.plan); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.plan },]); } ;

          paramPath = ((options.path + "/") + "upgradePolicy");
          if (options.upgradePolicy) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.upgradePolicy));
            cli.output.verbose("================================================");
            if ((options.parse && options.upgradePolicy)) {
              options.upgradePolicy = JSON.parse(options.upgradePolicy); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.upgradePolicy },]); } ;

          paramPath = ((options.path + "/") + "virtualMachineProfile");
          if (options.virtualMachineProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.virtualMachineProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.virtualMachineProfile)) {
              options.virtualMachineProfile = JSON.parse(options.virtualMachineProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.virtualMachineProfile },]); } ;

          paramPath = ((options.path + "/") + "overprovision");
          if (options.overprovision) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.overprovision));
            cli.output.verbose("================================================");
            if ((options.parse && options.overprovision)) {
              options.overprovision = JSON.parse(options.overprovision); } ;

            options.overprovision = JSON.parse(options.overprovision);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.overprovision },]); } ;

          paramPath = ((options.path + "/") + "singlePlacementGroup");
          if (options.singlePlacementGroup) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.singlePlacementGroup));
            cli.output.verbose("================================================");
            if ((options.parse && options.singlePlacementGroup)) {
              options.singlePlacementGroup = JSON.parse(options.singlePlacementGroup); } ;

            options.singlePlacementGroup = JSON.parse(options.singlePlacementGroup);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.singlePlacementGroup },]); } ;

          paramPath = ((options.path + "/") + "identity");
          if (options.identity) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.identity));
            cli.output.verbose("================================================");
            if ((options.parse && options.identity)) {
              options.identity = JSON.parse(options.identity); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.identity },]); } ;

          paramPath = ((options.path + "/") + "tags");
          if (options.tags) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tags));
            cli.output.verbose("================================================");
            if ((options.parse && options.tags)) {
              options.tags = JSON.parse(options.tags); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tags },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsVirtualMachineScaleSetUpdate11 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsVirtualMachineScaleSetUpdate11 = catparametersUpdateVirtualMachineScaleSetsVirtualMachineScaleSetUpdate11.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsVirtualMachineScaleSetUpdate11 = parametersUpdateVirtualMachineScaleSetsVirtualMachineScaleSetUpdate11.category("virtual-machine-scale-set-update").description($("Commands to configure virtual-machine-scale-set-update of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsVirtualMachineScaleSetUpdate11.command("delete").description($("Remove virtual-machine-scale-set-update in update-parameters string or files, e.g. \r\n{\r\n  \"sku\":{\r\n    \"name\":\"\",\r\n    \"tier\":\"\",\r\n    \"capacity\":null\r\n  },\r\n  \"plan\":{\r\n    \"name\":\"\",\r\n    \"publisher\":\"\",\r\n    \"product\":\"\",\r\n    \"promotionCode\":\"\"\r\n  },\r\n  \"upgradePolicy\":{\r\n    \"mode\":null,\r\n    \"rollingUpgradePolicy\":{\r\n      \"maxBatchInstancePercent\":null,\r\n      \"maxUnhealthyInstancePercent\":null,\r\n      \"maxUnhealthyUpgradedInstancePercent\":null,\r\n      \"pauseTimeBetweenBatches\":\"\"\r\n    },\r\n    \"automaticOSUpgrade\":null\r\n  },\r\n  \"virtualMachineProfile\":{\r\n    \"osProfile\":{\r\n      \"customData\":\"\",\r\n      \"windowsConfiguration\":{\r\n        \"provisionVMAgent\":null,\r\n        \"enableAutomaticUpdates\":null,\r\n        \"timeZone\":\"\",\r\n        \"additionalUnattendContent\":[\r\n          {\r\n            \"passName\":null,\r\n            \"componentName\":null,\r\n            \"settingName\":null,\r\n            \"content\":\"\"\r\n          }\r\n        ],\r\n        \"winRM\":{\r\n          \"listeners\":[\r\n            {\r\n              \"protocol\":null,\r\n              \"certificateUrl\":\"\"\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      \"linuxConfiguration\":{\r\n        \"disablePasswordAuthentication\":null,\r\n        \"ssh\":{\r\n          \"publicKeys\":[\r\n            {\r\n              \"path\":\"\",\r\n              \"keyData\":\"\"\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      \"secrets\":[\r\n        {\r\n          \"sourceVault\":{\r\n            \"id\":\"\"\r\n          },\r\n          \"vaultCertificates\":[\r\n            {\r\n              \"certificateUrl\":\"\",\r\n              \"certificateStore\":\"\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"storageProfile\":{\r\n      \"imageReference\":{\r\n        \"publisher\":\"\",\r\n        \"offer\":\"\",\r\n        \"sku\":\"\",\r\n        \"version\":\"\",\r\n        \"id\":\"\"\r\n      },\r\n      \"osDisk\":{\r\n        \"caching\":null,\r\n        \"image\":{\r\n          \"uri\":\"\"\r\n        },\r\n        \"vhdContainers\":[\r\n          \"\"\r\n        ],\r\n        \"managedDisk\":{\r\n          \"storageAccountType\":null\r\n        }\r\n      },\r\n      \"dataDisks\":[\r\n        {\r\n          \"name\":\"\",\r\n          \"lun\":\"\",\r\n          \"caching\":null,\r\n          \"createOption\":\"\",\r\n          \"diskSizeGB\":null,\r\n          \"managedDisk\":{\r\n            \"storageAccountType\":null\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"networkProfile\":{\r\n      \"networkInterfaceConfigurations\":[\r\n        {\r\n          \"name\":\"\",\r\n          \"primary\":null,\r\n          \"enableAcceleratedNetworking\":null,\r\n          \"networkSecurityGroup\":{\r\n            \"id\":\"\"\r\n          },\r\n          \"dnsSettings\":{\r\n            \"dnsServers\":[\r\n              \"\"\r\n            ]\r\n          },\r\n          \"ipConfigurations\":[\r\n            {\r\n              \"name\":\"\",\r\n              \"subnet\":{\r\n                \"id\":\"\"\r\n              },\r\n              \"primary\":null,\r\n              \"publicIPAddressConfiguration\":{\r\n                \"name\":\"\",\r\n                \"idleTimeoutInMinutes\":null,\r\n                \"dnsSettings\":{\r\n                  \"domainNameLabel\":\"\"\r\n                }\r\n              },\r\n              \"privateIPAddressVersion\":\"\",\r\n              \"applicationGatewayBackendAddressPools\":[\r\n                {\r\n                  \"id\":\"\"\r\n                }\r\n              ],\r\n              \"loadBalancerBackendAddressPools\":[\r\n                {\r\n                  \"id\":\"\"\r\n                }\r\n              ],\r\n              \"loadBalancerInboundNatPools\":[\r\n                {\r\n                  \"id\":\"\"\r\n                }\r\n              ],\r\n              \"id\":\"\"\r\n            }\r\n          ],\r\n          \"id\":\"\"\r\n        }\r\n      ]\r\n    },\r\n    \"diagnosticsProfile\":{\r\n      \"bootDiagnostics\":{\r\n        \"enabled\":null,\r\n        \"storageUri\":\"\"\r\n      }\r\n    },\r\n    \"extensionProfile\":{\r\n      \"extensions\":[\r\n        {\r\n          \"name\":\"\",\r\n          \"forceUpdateTag\":\"\",\r\n          \"publisher\":\"\",\r\n          \"type\":\"\",\r\n          \"typeHandlerVersion\":\"\",\r\n          \"autoUpgradeMinorVersion\":null,\r\n          \"settings\":{\r\n          },\r\n          \"protectedSettings\":{\r\n          },\r\n          \"provisioningState\":\"\",\r\n          \"id\":null\r\n        }\r\n      ]\r\n    },\r\n    \"licenseType\":\"\"\r\n  },\r\n  \"overprovision\":null,\r\n  \"singlePlacementGroup\":null,\r\n  \"identity\":{\r\n    \"principalId\":\"\",\r\n    \"tenantId\":\"\",\r\n    \"type\":null\r\n  },\r\n  \"tags\":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--sku", $("Remove the sku value.")).option("--plan", $("Remove the plan value.")).option("--upgrade-policy", $("Remove the upgrade-policy value.")).option("--virtual-machine-profile", $("Remove the virtual-machine-profile value.")).option("--overprovision", $("Remove the overprovision value.")).option("--single-placement-group", $("Remove the single-placement-group value.")).option("--identity", $("Remove the identity value.")).option("--tags", $("Remove the tags value.")).execute(function __108(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__108", line: 8863 }; return __func(_, this, arguments, __108, 1, __frame, function __$__108() {












      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__108() { return (function __$__108(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__108() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "";
          anySubItem = ((((((((false || options.sku) || options.plan) || options.upgradePolicy) || options.virtualMachineProfile) || options.overprovision) || options.singlePlacementGroup) || options.identity) || options.tags);
          if (anySubItem) {
            subItemPath = null;
            if (options.sku) {
              subItemPath = (options.path + "/sku");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.plan) {
              subItemPath = (options.path + "/plan");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.upgradePolicy) {
              subItemPath = (options.path + "/upgradePolicy");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.virtualMachineProfile) {
              subItemPath = (options.path + "/virtualMachineProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.overprovision) {
              subItemPath = (options.path + "/overprovision");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.singlePlacementGroup) {
              subItemPath = (options.path + "/singlePlacementGroup");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.identity) {
              subItemPath = (options.path + "/identity");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tags) {
              subItemPath = (options.path + "/tags");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsSku0S1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsSku0S1 = catparametersUpdateVirtualMachineScaleSetsSku0S1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsSku0S1 = parametersUpdateVirtualMachineScaleSetsSku0S1.category("sku").description($("Commands to configure sku of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsSku0S1.command("set").description($("Set sku in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"sku\" : {\r\n             \"name\":\"\",\r\n             \"tier\":\"\",\r\n             \"capacity\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--tier <tier>", $("Set the tier value.")).option("--capacity <capacity>", $("Set the capacity value.")).execute(function __109(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__109", line: 8942 }; return __func(_, this, arguments, __109, 1, __frame, function __$__109() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__109() { return (function __$__109(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__109() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/sku";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "tier");
          if (options.tier) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tier));
            cli.output.verbose("================================================");
            if ((options.parse && options.tier)) {
              options.tier = JSON.parse(options.tier); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tier },]); } ;

          paramPath = ((options.path + "/") + "capacity");
          if (options.capacity) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.capacity));
            cli.output.verbose("================================================");
            if ((options.parse && options.capacity)) {
              options.capacity = JSON.parse(options.capacity); } ;

            options.capacity = JSON.parse(options.capacity);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.capacity },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsSku1S1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsSku1S1 = catparametersUpdateVirtualMachineScaleSetsSku1S1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsSku1S1 = parametersUpdateVirtualMachineScaleSetsSku1S1.category("sku").description($("Commands to configure sku of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsSku1S1.command("delete").description($("Remove sku in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"sku\" : {\r\n             \"name\":\"\",\r\n             \"tier\":\"\",\r\n             \"capacity\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--name", $("Remove the name value.")).option("--tier", $("Remove the tier value.")).option("--capacity", $("Remove the capacity value.")).execute(function __110(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__110", line: 9019 }; return __func(_, this, arguments, __110, 1, __frame, function __$__110() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__110() { return (function __$__110(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__110() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/sku";
          anySubItem = (((false || options.name) || options.tier) || options.capacity);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tier) {
              subItemPath = (options.path + "/tier");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.capacity) {
              subItemPath = (options.path + "/capacity");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsPlan0P1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsPlan0P1 = catparametersUpdateVirtualMachineScaleSetsPlan0P1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsPlan0P1 = parametersUpdateVirtualMachineScaleSetsPlan0P1.category("plan").description($("Commands to configure plan of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsPlan0P1.command("set").description($("Set plan in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"plan\" : {\r\n             \"name\":\"\",\r\n             \"publisher\":\"\",\r\n             \"product\":\"\",\r\n             \"promotionCode\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--publisher <publisher>", $("Set the publisher value.")).option("--product <product>", $("Set the product value.")).option("--promotion-code <promotionCode>", $("Set the promotion-code value.")).execute(function __111(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__111", line: 9079 }; return __func(_, this, arguments, __111, 1, __frame, function __$__111() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__111() { return (function __$__111(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__111() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/plan";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "publisher");
          if (options.publisher) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publisher));
            cli.output.verbose("================================================");
            if ((options.parse && options.publisher)) {
              options.publisher = JSON.parse(options.publisher); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publisher },]); } ;

          paramPath = ((options.path + "/") + "product");
          if (options.product) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.product));
            cli.output.verbose("================================================");
            if ((options.parse && options.product)) {
              options.product = JSON.parse(options.product); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.product },]); } ;

          paramPath = ((options.path + "/") + "promotionCode");
          if (options.promotionCode) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.promotionCode));
            cli.output.verbose("================================================");
            if ((options.parse && options.promotionCode)) {
              options.promotionCode = JSON.parse(options.promotionCode); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.promotionCode },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsPlan1P1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsPlan1P1 = catparametersUpdateVirtualMachineScaleSetsPlan1P1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsPlan1P1 = parametersUpdateVirtualMachineScaleSetsPlan1P1.category("plan").description($("Commands to configure plan of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsPlan1P1.command("delete").description($("Remove plan in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"plan\" : {\r\n             \"name\":\"\",\r\n             \"publisher\":\"\",\r\n             \"product\":\"\",\r\n             \"promotionCode\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--name", $("Remove the name value.")).option("--publisher", $("Remove the publisher value.")).option("--product", $("Remove the product value.")).option("--promotion-code", $("Remove the promotion-code value.")).execute(function __112(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__112", line: 9167 }; return __func(_, this, arguments, __112, 1, __frame, function __$__112() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__112() { return (function __$__112(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__112() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/plan";
          anySubItem = ((((false || options.name) || options.publisher) || options.product) || options.promotionCode);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.publisher) {
              subItemPath = (options.path + "/publisher");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.product) {
              subItemPath = (options.path + "/product");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.promotionCode) {
              subItemPath = (options.path + "/promotionCode");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsUpgradePolicy0UP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsUpgradePolicy0UP1 = catparametersUpdateVirtualMachineScaleSetsUpgradePolicy0UP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsUpgradePolicy0UP1 = parametersUpdateVirtualMachineScaleSetsUpgradePolicy0UP1.category("upgrade-policy").description($("Commands to configure upgrade-policy of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsUpgradePolicy0UP1.command("set").description($("Set upgrade-policy in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"upgradePolicy\" : {\r\n             \"mode\":null,\r\n             \"rollingUpgradePolicy\":{\r\n               \"maxBatchInstancePercent\":null,\r\n               \"maxUnhealthyInstancePercent\":null,\r\n               \"maxUnhealthyUpgradedInstancePercent\":null,\r\n               \"pauseTimeBetweenBatches\":\"\"\r\n             },\r\n             \"automaticOSUpgrade\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--mode <mode>", $("Set the mode value.")).option("--rolling-upgrade-policy <rollingUpgradePolicy>", $("Set the rolling-upgrade-policy value.")).option("--automatic-os-upgrade <automaticOSUpgrade>", $("Set the automatic-os-upgrade value.")).execute(function __113(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__113", line: 9230 }; return __func(_, this, arguments, __113, 1, __frame, function __$__113() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__113() { return (function __$__113(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__113() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/upgradePolicy";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "mode");
          if (options.mode) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.mode));
            cli.output.verbose("================================================");
            if ((options.parse && options.mode)) {
              options.mode = JSON.parse(options.mode); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.mode },]); } ;

          paramPath = ((options.path + "/") + "rollingUpgradePolicy");
          if (options.rollingUpgradePolicy) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.rollingUpgradePolicy));
            cli.output.verbose("================================================");
            if ((options.parse && options.rollingUpgradePolicy)) {
              options.rollingUpgradePolicy = JSON.parse(options.rollingUpgradePolicy); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.rollingUpgradePolicy },]); } ;

          paramPath = ((options.path + "/") + "automaticOSUpgrade");
          if (options.automaticOSUpgrade) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.automaticOSUpgrade));
            cli.output.verbose("================================================");
            if ((options.parse && options.automaticOSUpgrade)) {
              options.automaticOSUpgrade = JSON.parse(options.automaticOSUpgrade); } ;

            options.automaticOSUpgrade = JSON.parse(options.automaticOSUpgrade);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.automaticOSUpgrade },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsUpgradePolicy1UP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsUpgradePolicy1UP1 = catparametersUpdateVirtualMachineScaleSetsUpgradePolicy1UP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsUpgradePolicy1UP1 = parametersUpdateVirtualMachineScaleSetsUpgradePolicy1UP1.category("upgrade-policy").description($("Commands to configure upgrade-policy of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsUpgradePolicy1UP1.command("delete").description($("Remove upgrade-policy in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"upgradePolicy\" : {\r\n             \"mode\":null,\r\n             \"rollingUpgradePolicy\":{\r\n               \"maxBatchInstancePercent\":null,\r\n               \"maxUnhealthyInstancePercent\":null,\r\n               \"maxUnhealthyUpgradedInstancePercent\":null,\r\n               \"pauseTimeBetweenBatches\":\"\"\r\n             },\r\n             \"automaticOSUpgrade\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--mode", $("Remove the mode value.")).option("--rolling-upgrade-policy", $("Remove the rolling-upgrade-policy value.")).option("--automatic-os-upgrade", $("Remove the automatic-os-upgrade value.")).execute(function __114(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__114", line: 9307 }; return __func(_, this, arguments, __114, 1, __frame, function __$__114() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__114() { return (function __$__114(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__114() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/upgradePolicy";
          anySubItem = (((false || options.mode) || options.rollingUpgradePolicy) || options.automaticOSUpgrade);
          if (anySubItem) {
            subItemPath = null;
            if (options.mode) {
              subItemPath = (options.path + "/mode");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.rollingUpgradePolicy) {
              subItemPath = (options.path + "/rollingUpgradePolicy");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.automaticOSUpgrade) {
              subItemPath = (options.path + "/automaticOSUpgrade");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsRollingUpgradePolicy0UPrUP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsRollingUpgradePolicy0UPrUP1 = catparametersUpdateVirtualMachineScaleSetsRollingUpgradePolicy0UPrUP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsRollingUpgradePolicy0UPrUP1 = parametersUpdateVirtualMachineScaleSetsRollingUpgradePolicy0UPrUP1.category("rolling-upgrade-policy").description($("Commands to configure rolling-upgrade-policy of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsRollingUpgradePolicy0UPrUP1.command("set").description($("Set rolling-upgrade-policy in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"rollingUpgradePolicy\" : {\r\n             \"maxBatchInstancePercent\":null,\r\n             \"maxUnhealthyInstancePercent\":null,\r\n             \"maxUnhealthyUpgradedInstancePercent\":null,\r\n             \"pauseTimeBetweenBatches\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--max-batch-instance-percent <maxBatchInstancePercent>", $("Set the max-batch-instance-percent value.")).option("--max-unhealthy-instance-percent <maxUnhealthyInstancePercent>", $("Set the max-unhealthy-instance-percent value.")).option("--max-unhealthy-upgraded-instance-percent <maxUnhealthyUpgradedInstancePercent>", $("Set the max-unhealthy-upgraded-instance-percent value.")).option("--pause-time-between-batches <pauseTimeBetweenBatches>", $("Set the pause-time-between-batches value.")).execute(function __115(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__115", line: 9367 }; return __func(_, this, arguments, __115, 1, __frame, function __$__115() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__115() { return (function __$__115(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__115() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/upgradePolicy/rollingUpgradePolicy";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "maxBatchInstancePercent");
          if (options.maxBatchInstancePercent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.maxBatchInstancePercent));
            cli.output.verbose("================================================");
            if ((options.parse && options.maxBatchInstancePercent)) {
              options.maxBatchInstancePercent = JSON.parse(options.maxBatchInstancePercent); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.maxBatchInstancePercent },]); } ;

          paramPath = ((options.path + "/") + "maxUnhealthyInstancePercent");
          if (options.maxUnhealthyInstancePercent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.maxUnhealthyInstancePercent));
            cli.output.verbose("================================================");
            if ((options.parse && options.maxUnhealthyInstancePercent)) {
              options.maxUnhealthyInstancePercent = JSON.parse(options.maxUnhealthyInstancePercent); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.maxUnhealthyInstancePercent },]); } ;

          paramPath = ((options.path + "/") + "maxUnhealthyUpgradedInstancePercent");
          if (options.maxUnhealthyUpgradedInstancePercent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.maxUnhealthyUpgradedInstancePercent));
            cli.output.verbose("================================================");
            if ((options.parse && options.maxUnhealthyUpgradedInstancePercent)) {
              options.maxUnhealthyUpgradedInstancePercent = JSON.parse(options.maxUnhealthyUpgradedInstancePercent); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.maxUnhealthyUpgradedInstancePercent },]); } ;

          paramPath = ((options.path + "/") + "pauseTimeBetweenBatches");
          if (options.pauseTimeBetweenBatches) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.pauseTimeBetweenBatches));
            cli.output.verbose("================================================");
            if ((options.parse && options.pauseTimeBetweenBatches)) {
              options.pauseTimeBetweenBatches = JSON.parse(options.pauseTimeBetweenBatches); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.pauseTimeBetweenBatches },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsRollingUpgradePolicy1UPrUP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsRollingUpgradePolicy1UPrUP1 = catparametersUpdateVirtualMachineScaleSetsRollingUpgradePolicy1UPrUP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsRollingUpgradePolicy1UPrUP1 = parametersUpdateVirtualMachineScaleSetsRollingUpgradePolicy1UPrUP1.category("rolling-upgrade-policy").description($("Commands to configure rolling-upgrade-policy of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsRollingUpgradePolicy1UPrUP1.command("delete").description($("Remove rolling-upgrade-policy in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"rollingUpgradePolicy\" : {\r\n             \"maxBatchInstancePercent\":null,\r\n             \"maxUnhealthyInstancePercent\":null,\r\n             \"maxUnhealthyUpgradedInstancePercent\":null,\r\n             \"pauseTimeBetweenBatches\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--max-batch-instance-percent", $("Remove the max-batch-instance-percent value.")).option("--max-unhealthy-instance-percent", $("Remove the max-unhealthy-instance-percent value.")).option("--max-unhealthy-upgraded-instance-percent", $("Remove the max-unhealthy-upgraded-instance-percent value.")).option("--pause-time-between-batches", $("Remove the pause-time-between-batches value.")).execute(function __116(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__116", line: 9455 }; return __func(_, this, arguments, __116, 1, __frame, function __$__116() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__116() { return (function __$__116(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__116() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/upgradePolicy/rollingUpgradePolicy";
          anySubItem = ((((false || options.maxBatchInstancePercent) || options.maxUnhealthyInstancePercent) || options.maxUnhealthyUpgradedInstancePercent) || options.pauseTimeBetweenBatches);
          if (anySubItem) {
            subItemPath = null;
            if (options.maxBatchInstancePercent) {
              subItemPath = (options.path + "/maxBatchInstancePercent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.maxUnhealthyInstancePercent) {
              subItemPath = (options.path + "/maxUnhealthyInstancePercent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.maxUnhealthyUpgradedInstancePercent) {
              subItemPath = (options.path + "/maxUnhealthyUpgradedInstancePercent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.pauseTimeBetweenBatches) {
              subItemPath = (options.path + "/pauseTimeBetweenBatches");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP1 = catparametersUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP1 = parametersUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP1.category("virtual-machine-profile").description($("Commands to configure virtual-machine-profile of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP1.command("set").description($("Set virtual-machine-profile in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"virtualMachineProfile\" : {\r\n             \"osProfile\":{\r\n               \"customData\":\"\",\r\n               \"windowsConfiguration\":{\r\n                 \"provisionVMAgent\":null,\r\n                 \"enableAutomaticUpdates\":null,\r\n                 \"timeZone\":\"\",\r\n                 \"additionalUnattendContent\":[\r\n                   {\r\n                     \"passName\":null,\r\n                     \"componentName\":null,\r\n                     \"settingName\":null,\r\n                     \"content\":\"\"\r\n                   }\r\n                 ],\r\n                 \"winRM\":{\r\n                   \"listeners\":[\r\n                     {\r\n                       \"protocol\":null,\r\n                       \"certificateUrl\":\"\"\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               \"linuxConfiguration\":{\r\n                 \"disablePasswordAuthentication\":null,\r\n                 \"ssh\":{\r\n                   \"publicKeys\":[\r\n                     {\r\n                       \"path\":\"\",\r\n                       \"keyData\":\"\"\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               \"secrets\":[\r\n                 {\r\n                   \"sourceVault\":{\r\n                     \"id\":\"\"\r\n                   },\r\n                   \"vaultCertificates\":[\r\n                     {\r\n                       \"certificateUrl\":\"\",\r\n                       \"certificateStore\":\"\"\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             \"storageProfile\":{\r\n               \"imageReference\":{\r\n                 \"publisher\":\"\",\r\n                 \"offer\":\"\",\r\n                 \"sku\":\"\",\r\n                 \"version\":\"\",\r\n                 \"id\":\"\"\r\n               },\r\n               \"osDisk\":{\r\n                 \"caching\":null,\r\n                 \"image\":{\r\n                   \"uri\":\"\"\r\n                 },\r\n                 \"vhdContainers\":[\r\n                   \"\"\r\n                 ],\r\n                 \"managedDisk\":{\r\n                   \"storageAccountType\":null\r\n                 }\r\n               },\r\n               \"dataDisks\":[\r\n                 {\r\n                   \"name\":\"\",\r\n                   \"lun\":\"\",\r\n                   \"caching\":null,\r\n                   \"createOption\":\"\",\r\n                   \"diskSizeGB\":null,\r\n                   \"managedDisk\":{\r\n                     \"storageAccountType\":null\r\n                   }\r\n                 }\r\n               ]\r\n             },\r\n             \"networkProfile\":{\r\n               \"networkInterfaceConfigurations\":[\r\n                 {\r\n                   \"name\":\"\",\r\n                   \"primary\":null,\r\n                   \"enableAcceleratedNetworking\":null,\r\n                   \"networkSecurityGroup\":{\r\n                     \"id\":\"\"\r\n                   },\r\n                   \"dnsSettings\":{\r\n                     \"dnsServers\":[\r\n                       \"\"\r\n                     ]\r\n                   },\r\n                   \"ipConfigurations\":[\r\n                     {\r\n                       \"name\":\"\",\r\n                       \"subnet\":{\r\n                         \"id\":\"\"\r\n                       },\r\n                       \"primary\":null,\r\n                       \"publicIPAddressConfiguration\":{\r\n                         \"name\":\"\",\r\n                         \"idleTimeoutInMinutes\":null,\r\n                         \"dnsSettings\":{\r\n                           \"domainNameLabel\":\"\"\r\n                         }\r\n                       },\r\n                       \"privateIPAddressVersion\":\"\",\r\n                       \"applicationGatewayBackendAddressPools\":[\r\n                         {\r\n                           \"id\":\"\"\r\n                         }\r\n                       ],\r\n                       \"loadBalancerBackendAddressPools\":[\r\n                         {\r\n                           \"id\":\"\"\r\n                         }\r\n                       ],\r\n                       \"loadBalancerInboundNatPools\":[\r\n                         {\r\n                           \"id\":\"\"\r\n                         }\r\n                       ],\r\n                       \"id\":\"\"\r\n                     }\r\n                   ],\r\n                   \"id\":\"\"\r\n                 }\r\n               ]\r\n             },\r\n             \"diagnosticsProfile\":{\r\n               \"bootDiagnostics\":{\r\n                 \"enabled\":null,\r\n                 \"storageUri\":\"\"\r\n               }\r\n             },\r\n             \"extensionProfile\":{\r\n               \"extensions\":[\r\n                 {\r\n                   \"name\":\"\",\r\n                   \"forceUpdateTag\":\"\",\r\n                   \"publisher\":\"\",\r\n                   \"type\":\"\",\r\n                   \"typeHandlerVersion\":\"\",\r\n                   \"autoUpgradeMinorVersion\":null,\r\n                   \"settings\":{\r\n                   },\r\n                   \"protectedSettings\":{\r\n                   },\r\n                   \"provisioningState\":\"\",\r\n                   \"id\":null\r\n                 }\r\n               ]\r\n             },\r\n             \"licenseType\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--os-profile <osProfile>", $("Set the os-profile value.")).option("--storage-profile <storageProfile>", $("Set the storage-profile value.")).option("--network-profile <networkProfile>", $("Set the network-profile value.")).option("--diagnostics-profile <diagnosticsProfile>", $("Set the diagnostics-profile value.")).option("--extension-profile <extensionProfile>", $("Set the extension-profile value.")).option("--license-type <licenseType>", $("Set the license-type value.")).execute(function __117(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__117", line: 9521 }; return __func(_, this, arguments, __117, 1, __frame, function __$__117() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__117() { return (function __$__117(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__117() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "osProfile");
          if (options.osProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.osProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.osProfile)) {
              options.osProfile = JSON.parse(options.osProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.osProfile },]); } ;

          paramPath = ((options.path + "/") + "storageProfile");
          if (options.storageProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageProfile)) {
              options.storageProfile = JSON.parse(options.storageProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageProfile },]); } ;

          paramPath = ((options.path + "/") + "networkProfile");
          if (options.networkProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.networkProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.networkProfile)) {
              options.networkProfile = JSON.parse(options.networkProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.networkProfile },]); } ;

          paramPath = ((options.path + "/") + "diagnosticsProfile");
          if (options.diagnosticsProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diagnosticsProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.diagnosticsProfile)) {
              options.diagnosticsProfile = JSON.parse(options.diagnosticsProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diagnosticsProfile },]); } ;

          paramPath = ((options.path + "/") + "extensionProfile");
          if (options.extensionProfile) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.extensionProfile));
            cli.output.verbose("================================================");
            if ((options.parse && options.extensionProfile)) {
              options.extensionProfile = JSON.parse(options.extensionProfile); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.extensionProfile },]); } ;

          paramPath = ((options.path + "/") + "licenseType");
          if (options.licenseType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.licenseType));
            cli.output.verbose("================================================");
            if ((options.parse && options.licenseType)) {
              options.licenseType = JSON.parse(options.licenseType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.licenseType },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP1 = catparametersUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP1 = parametersUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP1.category("virtual-machine-profile").description($("Commands to configure virtual-machine-profile of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP1.command("delete").description($("Remove virtual-machine-profile in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"virtualMachineProfile\" : {\r\n             \"osProfile\":{\r\n               \"customData\":\"\",\r\n               \"windowsConfiguration\":{\r\n                 \"provisionVMAgent\":null,\r\n                 \"enableAutomaticUpdates\":null,\r\n                 \"timeZone\":\"\",\r\n                 \"additionalUnattendContent\":[\r\n                   {\r\n                     \"passName\":null,\r\n                     \"componentName\":null,\r\n                     \"settingName\":null,\r\n                     \"content\":\"\"\r\n                   }\r\n                 ],\r\n                 \"winRM\":{\r\n                   \"listeners\":[\r\n                     {\r\n                       \"protocol\":null,\r\n                       \"certificateUrl\":\"\"\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               \"linuxConfiguration\":{\r\n                 \"disablePasswordAuthentication\":null,\r\n                 \"ssh\":{\r\n                   \"publicKeys\":[\r\n                     {\r\n                       \"path\":\"\",\r\n                       \"keyData\":\"\"\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               \"secrets\":[\r\n                 {\r\n                   \"sourceVault\":{\r\n                     \"id\":\"\"\r\n                   },\r\n                   \"vaultCertificates\":[\r\n                     {\r\n                       \"certificateUrl\":\"\",\r\n                       \"certificateStore\":\"\"\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             \"storageProfile\":{\r\n               \"imageReference\":{\r\n                 \"publisher\":\"\",\r\n                 \"offer\":\"\",\r\n                 \"sku\":\"\",\r\n                 \"version\":\"\",\r\n                 \"id\":\"\"\r\n               },\r\n               \"osDisk\":{\r\n                 \"caching\":null,\r\n                 \"image\":{\r\n                   \"uri\":\"\"\r\n                 },\r\n                 \"vhdContainers\":[\r\n                   \"\"\r\n                 ],\r\n                 \"managedDisk\":{\r\n                   \"storageAccountType\":null\r\n                 }\r\n               },\r\n               \"dataDisks\":[\r\n                 {\r\n                   \"name\":\"\",\r\n                   \"lun\":\"\",\r\n                   \"caching\":null,\r\n                   \"createOption\":\"\",\r\n                   \"diskSizeGB\":null,\r\n                   \"managedDisk\":{\r\n                     \"storageAccountType\":null\r\n                   }\r\n                 }\r\n               ]\r\n             },\r\n             \"networkProfile\":{\r\n               \"networkInterfaceConfigurations\":[\r\n                 {\r\n                   \"name\":\"\",\r\n                   \"primary\":null,\r\n                   \"enableAcceleratedNetworking\":null,\r\n                   \"networkSecurityGroup\":{\r\n                     \"id\":\"\"\r\n                   },\r\n                   \"dnsSettings\":{\r\n                     \"dnsServers\":[\r\n                       \"\"\r\n                     ]\r\n                   },\r\n                   \"ipConfigurations\":[\r\n                     {\r\n                       \"name\":\"\",\r\n                       \"subnet\":{\r\n                         \"id\":\"\"\r\n                       },\r\n                       \"primary\":null,\r\n                       \"publicIPAddressConfiguration\":{\r\n                         \"name\":\"\",\r\n                         \"idleTimeoutInMinutes\":null,\r\n                         \"dnsSettings\":{\r\n                           \"domainNameLabel\":\"\"\r\n                         }\r\n                       },\r\n                       \"privateIPAddressVersion\":\"\",\r\n                       \"applicationGatewayBackendAddressPools\":[\r\n                         {\r\n                           \"id\":\"\"\r\n                         }\r\n                       ],\r\n                       \"loadBalancerBackendAddressPools\":[\r\n                         {\r\n                           \"id\":\"\"\r\n                         }\r\n                       ],\r\n                       \"loadBalancerInboundNatPools\":[\r\n                         {\r\n                           \"id\":\"\"\r\n                         }\r\n                       ],\r\n                       \"id\":\"\"\r\n                     }\r\n                   ],\r\n                   \"id\":\"\"\r\n                 }\r\n               ]\r\n             },\r\n             \"diagnosticsProfile\":{\r\n               \"bootDiagnostics\":{\r\n                 \"enabled\":null,\r\n                 \"storageUri\":\"\"\r\n               }\r\n             },\r\n             \"extensionProfile\":{\r\n               \"extensions\":[\r\n                 {\r\n                   \"name\":\"\",\r\n                   \"forceUpdateTag\":\"\",\r\n                   \"publisher\":\"\",\r\n                   \"type\":\"\",\r\n                   \"typeHandlerVersion\":\"\",\r\n                   \"autoUpgradeMinorVersion\":null,\r\n                   \"settings\":{\r\n                   },\r\n                   \"protectedSettings\":{\r\n                   },\r\n                   \"provisioningState\":\"\",\r\n                   \"id\":null\r\n                 }\r\n               ]\r\n             },\r\n             \"licenseType\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--os-profile", $("Remove the os-profile value.")).option("--storage-profile", $("Remove the storage-profile value.")).option("--network-profile", $("Remove the network-profile value.")).option("--diagnostics-profile", $("Remove the diagnostics-profile value.")).option("--extension-profile", $("Remove the extension-profile value.")).option("--license-type", $("Remove the license-type value.")).execute(function __118(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__118", line: 9633 }; return __func(_, this, arguments, __118, 1, __frame, function __$__118() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__118() { return (function __$__118(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__118() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile";
          anySubItem = ((((((false || options.osProfile) || options.storageProfile) || options.networkProfile) || options.diagnosticsProfile) || options.extensionProfile) || options.licenseType);
          if (anySubItem) {
            subItemPath = null;
            if (options.osProfile) {
              subItemPath = (options.path + "/osProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.storageProfile) {
              subItemPath = (options.path + "/storageProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.networkProfile) {
              subItemPath = (options.path + "/networkProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.diagnosticsProfile) {
              subItemPath = (options.path + "/diagnosticsProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.extensionProfile) {
              subItemPath = (options.path + "/extensionProfile");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.licenseType) {
              subItemPath = (options.path + "/licenseType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsOsProfile0VMPoP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsOsProfile0VMPoP1 = catparametersUpdateVirtualMachineScaleSetsOsProfile0VMPoP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsOsProfile0VMPoP1 = parametersUpdateVirtualMachineScaleSetsOsProfile0VMPoP1.category("os-profile").description($("Commands to configure os-profile of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsOsProfile0VMPoP1.command("set").description($("Set os-profile in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"osProfile\" : {\r\n             \"customData\":\"\",\r\n             \"windowsConfiguration\":{\r\n               \"provisionVMAgent\":null,\r\n               \"enableAutomaticUpdates\":null,\r\n               \"timeZone\":\"\",\r\n               \"additionalUnattendContent\":[\r\n                 {\r\n                   \"passName\":null,\r\n                   \"componentName\":null,\r\n                   \"settingName\":null,\r\n                   \"content\":\"\"\r\n                 }\r\n               ],\r\n               \"winRM\":{\r\n                 \"listeners\":[\r\n                   {\r\n                     \"protocol\":null,\r\n                     \"certificateUrl\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             \"linuxConfiguration\":{\r\n               \"disablePasswordAuthentication\":null,\r\n               \"ssh\":{\r\n                 \"publicKeys\":[\r\n                   {\r\n                     \"path\":\"\",\r\n                     \"keyData\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             \"secrets\":[\r\n               {\r\n                 \"sourceVault\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"vaultCertificates\":[\r\n                   {\r\n                     \"certificateUrl\":\"\",\r\n                     \"certificateStore\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--custom-data <customData>", $("Set the custom-data value.")).option("--windows-configuration <windowsConfiguration>", $("Set the windows-configuration value.")).option("--linux-configuration <linuxConfiguration>", $("Set the linux-configuration value.")).option("--secrets <secrets>", $("Set the secrets value.")).execute(function __119(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__119", line: 9705 }; return __func(_, this, arguments, __119, 1, __frame, function __$__119() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__119() { return (function __$__119(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__119() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/osProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "customData");
          if (options.customData) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.customData));
            cli.output.verbose("================================================");
            if ((options.parse && options.customData)) {
              options.customData = JSON.parse(options.customData); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.customData },]); } ;

          paramPath = ((options.path + "/") + "windowsConfiguration");
          if (options.windowsConfiguration) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.windowsConfiguration));
            cli.output.verbose("================================================");
            if ((options.parse && options.windowsConfiguration)) {
              options.windowsConfiguration = JSON.parse(options.windowsConfiguration); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.windowsConfiguration },]); } ;

          paramPath = ((options.path + "/") + "linuxConfiguration");
          if (options.linuxConfiguration) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.linuxConfiguration));
            cli.output.verbose("================================================");
            if ((options.parse && options.linuxConfiguration)) {
              options.linuxConfiguration = JSON.parse(options.linuxConfiguration); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.linuxConfiguration },]); } ;

          paramPath = ((options.path + "/") + "secrets");
          if (options.secrets) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.secrets));
            cli.output.verbose("================================================");
            if ((options.parse && options.secrets)) {
              options.secrets = JSON.parse(options.secrets); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.secrets },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsOsProfile1VMPoP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsOsProfile1VMPoP1 = catparametersUpdateVirtualMachineScaleSetsOsProfile1VMPoP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsOsProfile1VMPoP1 = parametersUpdateVirtualMachineScaleSetsOsProfile1VMPoP1.category("os-profile").description($("Commands to configure os-profile of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsOsProfile1VMPoP1.command("delete").description($("Remove os-profile in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"osProfile\" : {\r\n             \"customData\":\"\",\r\n             \"windowsConfiguration\":{\r\n               \"provisionVMAgent\":null,\r\n               \"enableAutomaticUpdates\":null,\r\n               \"timeZone\":\"\",\r\n               \"additionalUnattendContent\":[\r\n                 {\r\n                   \"passName\":null,\r\n                   \"componentName\":null,\r\n                   \"settingName\":null,\r\n                   \"content\":\"\"\r\n                 }\r\n               ],\r\n               \"winRM\":{\r\n                 \"listeners\":[\r\n                   {\r\n                     \"protocol\":null,\r\n                     \"certificateUrl\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             \"linuxConfiguration\":{\r\n               \"disablePasswordAuthentication\":null,\r\n               \"ssh\":{\r\n                 \"publicKeys\":[\r\n                   {\r\n                     \"path\":\"\",\r\n                     \"keyData\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             \"secrets\":[\r\n               {\r\n                 \"sourceVault\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"vaultCertificates\":[\r\n                   {\r\n                     \"certificateUrl\":\"\",\r\n                     \"certificateStore\":\"\"\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--custom-data", $("Remove the custom-data value.")).option("--windows-configuration", $("Remove the windows-configuration value.")).option("--linux-configuration", $("Remove the linux-configuration value.")).option("--secrets", $("Remove the secrets value.")).execute(function __120(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__120", line: 9793 }; return __func(_, this, arguments, __120, 1, __frame, function __$__120() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__120() { return (function __$__120(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__120() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/osProfile";
          anySubItem = ((((false || options.customData) || options.windowsConfiguration) || options.linuxConfiguration) || options.secrets);
          if (anySubItem) {
            subItemPath = null;
            if (options.customData) {
              subItemPath = (options.path + "/customData");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.windowsConfiguration) {
              subItemPath = (options.path + "/windowsConfiguration");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.linuxConfiguration) {
              subItemPath = (options.path + "/linuxConfiguration");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.secrets) {
              subItemPath = (options.path + "/secrets");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC1 = catparametersUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC1 = parametersUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC1.category("windows-configuration").description($("Commands to configure windows-configuration of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC1.command("set").description($("Set windows-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"windowsConfiguration\" : {\r\n             \"provisionVMAgent\":null,\r\n             \"enableAutomaticUpdates\":null,\r\n             \"timeZone\":\"\",\r\n             \"additionalUnattendContent\":[\r\n               {\r\n                 \"passName\":null,\r\n                 \"componentName\":null,\r\n                 \"settingName\":null,\r\n                 \"content\":\"\"\r\n               }\r\n             ],\r\n             \"winRM\":{\r\n               \"listeners\":[\r\n                 {\r\n                   \"protocol\":null,\r\n                   \"certificateUrl\":\"\"\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--provision-vm-agent <provisionVMAgent>", $("Set the provision-vm-agent value.")).option("--enable-automatic-updates <enableAutomaticUpdates>", $("Set the enable-automatic-updates value.")).option("--time-zone <timeZone>", $("Set the time-zone value.")).option("--additional-unattend-content <additionalUnattendContent>", $("Set the additional-unattend-content value.")).option("--win-rm <winRM>", $("Set the win-rm value.")).execute(function __121(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__121", line: 9858 }; return __func(_, this, arguments, __121, 1, __frame, function __$__121() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__121() { return (function __$__121(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__121() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/osProfile/windowsConfiguration";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "provisionVMAgent");
          if (options.provisionVMAgent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.provisionVMAgent));
            cli.output.verbose("================================================");
            if ((options.parse && options.provisionVMAgent)) {
              options.provisionVMAgent = JSON.parse(options.provisionVMAgent); } ;

            options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.provisionVMAgent },]); } ;

          paramPath = ((options.path + "/") + "enableAutomaticUpdates");
          if (options.enableAutomaticUpdates) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.enableAutomaticUpdates));
            cli.output.verbose("================================================");
            if ((options.parse && options.enableAutomaticUpdates)) {
              options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates); } ;

            options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.enableAutomaticUpdates },]); } ;

          paramPath = ((options.path + "/") + "timeZone");
          if (options.timeZone) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.timeZone));
            cli.output.verbose("================================================");
            if ((options.parse && options.timeZone)) {
              options.timeZone = JSON.parse(options.timeZone); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.timeZone },]); } ;

          paramPath = ((options.path + "/") + "additionalUnattendContent");
          if (options.additionalUnattendContent) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.additionalUnattendContent));
            cli.output.verbose("================================================");
            if ((options.parse && options.additionalUnattendContent)) {
              options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.additionalUnattendContent },]); } ;

          paramPath = ((options.path + "/") + "winRM");
          if (options.winRM) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.winRM));
            cli.output.verbose("================================================");
            if ((options.parse && options.winRM)) {
              options.winRM = JSON.parse(options.winRM); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.winRM },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC1 = catparametersUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC1 = parametersUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC1.category("windows-configuration").description($("Commands to configure windows-configuration of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC1.command("delete").description($("Remove windows-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"windowsConfiguration\" : {\r\n             \"provisionVMAgent\":null,\r\n             \"enableAutomaticUpdates\":null,\r\n             \"timeZone\":\"\",\r\n             \"additionalUnattendContent\":[\r\n               {\r\n                 \"passName\":null,\r\n                 \"componentName\":null,\r\n                 \"settingName\":null,\r\n                 \"content\":\"\"\r\n               }\r\n             ],\r\n             \"winRM\":{\r\n               \"listeners\":[\r\n                 {\r\n                   \"protocol\":null,\r\n                   \"certificateUrl\":\"\"\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--provision-vm-agent", $("Remove the provision-vm-agent value.")).option("--enable-automatic-updates", $("Remove the enable-automatic-updates value.")).option("--time-zone", $("Remove the time-zone value.")).option("--additional-unattend-content", $("Remove the additional-unattend-content value.")).option("--win-rm", $("Remove the win-rm value.")).execute(function __122(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__122", line: 9960 }; return __func(_, this, arguments, __122, 1, __frame, function __$__122() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__122() { return (function __$__122(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__122() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/osProfile/windowsConfiguration";
          anySubItem = (((((false || options.provisionVMAgent) || options.enableAutomaticUpdates) || options.timeZone) || options.additionalUnattendContent) || options.winRM);
          if (anySubItem) {
            subItemPath = null;
            if (options.provisionVMAgent) {
              subItemPath = (options.path + "/provisionVMAgent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.enableAutomaticUpdates) {
              subItemPath = (options.path + "/enableAutomaticUpdates");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.timeZone) {
              subItemPath = (options.path + "/timeZone");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.additionalUnattendContent) {
              subItemPath = (options.path + "/additionalUnattendContent");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.winRM) {
              subItemPath = (options.path + "/winRM");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC1 = catparametersUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC1 = parametersUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC1.category("additional-unattend-content").description($("Commands to configure additional-unattend-content of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC1.command("set").description($("Set additional-unattend-content in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"additionalUnattendContent\" : {\r\n             \"passName\":null,\r\n             \"componentName\":null,\r\n             \"settingName\":null,\r\n             \"content\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--pass-name <passName>", $("Set the pass-name value.")).option("--component-name <componentName>", $("Set the component-name value.")).option("--setting-name <settingName>", $("Set the setting-name value.")).option("--content <content>", $("Set the content value.")).execute(function __123(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__123", line: 10030 }; return __func(_, this, arguments, __123, 1, __frame, function __$__123() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__123() { return (function __$__123(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__123() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "passName");
          if (options.passName) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.passName));
            cli.output.verbose("================================================");
            if ((options.parse && options.passName)) {
              options.passName = JSON.parse(options.passName); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.passName },]); } ;

          paramPath = ((options.path + "/") + "componentName");
          if (options.componentName) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.componentName));
            cli.output.verbose("================================================");
            if ((options.parse && options.componentName)) {
              options.componentName = JSON.parse(options.componentName); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.componentName },]); } ;

          paramPath = ((options.path + "/") + "settingName");
          if (options.settingName) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.settingName));
            cli.output.verbose("================================================");
            if ((options.parse && options.settingName)) {
              options.settingName = JSON.parse(options.settingName); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.settingName },]); } ;

          paramPath = ((options.path + "/") + "content");
          if (options.content) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.content));
            cli.output.verbose("================================================");
            if ((options.parse && options.content)) {
              options.content = JSON.parse(options.content); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.content },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC1 = catparametersUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC1 = parametersUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC1.category("additional-unattend-content").description($("Commands to configure additional-unattend-content of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC1.command("delete").description($("Remove additional-unattend-content in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"additionalUnattendContent\" : {\r\n             \"passName\":null,\r\n             \"componentName\":null,\r\n             \"settingName\":null,\r\n             \"content\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--pass-name", $("Remove the pass-name value.")).option("--component-name", $("Remove the component-name value.")).option("--setting-name", $("Remove the setting-name value.")).option("--content", $("Remove the content value.")).execute(function __124(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__124", line: 10123 }; return __func(_, this, arguments, __124, 1, __frame, function __$__124() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__124() { return (function __$__124(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__124() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((((false || options.passName) || options.componentName) || options.settingName) || options.content);
          if (anySubItem) {
            subItemPath = null;
            if (options.passName) {
              subItemPath = (options.path + "/passName");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.componentName) {
              subItemPath = (options.path + "/componentName");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.settingName) {
              subItemPath = (options.path + "/settingName");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.content) {
              subItemPath = (options.path + "/content");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM1 = catparametersUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM1 = parametersUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM1.category("win-rm").description($("Commands to configure win-rm of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM1.command("set").description($("Set win-rm in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"winRM\" : {\r\n             \"listeners\":[\r\n               {\r\n                 \"protocol\":null,\r\n                 \"certificateUrl\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--listeners <listeners>", $("Set the listeners value.")).execute(function __125(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__125", line: 10184 }; return __func(_, this, arguments, __125, 1, __frame, function __$__125() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__125() { return (function __$__125(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__125() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/osProfile/windowsConfiguration/winRM";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "listeners");
          if (options.listeners) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.listeners));
            cli.output.verbose("================================================");
            if ((options.parse && options.listeners)) {
              options.listeners = JSON.parse(options.listeners); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.listeners },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM1 = catparametersUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM1 = parametersUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM1.category("win-rm").description($("Commands to configure win-rm of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM1.command("delete").description($("Remove win-rm in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"winRM\" : {\r\n             \"listeners\":[\r\n               {\r\n                 \"protocol\":null,\r\n                 \"certificateUrl\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--listeners", $("Remove the listeners value.")).execute(function __126(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__126", line: 10236 }; return __func(_, this, arguments, __126, 1, __frame, function __$__126() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__126() { return (function __$__126(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__126() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/osProfile/windowsConfiguration/winRM";
          anySubItem = (false || options.listeners);
          if (anySubItem) {
            subItemPath = null;
            if (options.listeners) {
              subItemPath = (options.path + "/listeners");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl1 = catparametersUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl1 = parametersUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl1.category("listeners").description($("Commands to configure listeners of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl1.command("set").description($("Set listeners in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"listeners\" : {\r\n             \"protocol\":null,\r\n             \"certificateUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--protocol <protocol>", $("Set the protocol value.")).option("--certificate-url <certificateUrl>", $("Set the certificate-url value.")).execute(function __127(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__127", line: 10288 }; return __func(_, this, arguments, __127, 1, __frame, function __$__127() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__127() { return (function __$__127(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__127() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/osProfile/windowsConfiguration/winRM/listeners" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "protocol");
          if (options.protocol) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.protocol));
            cli.output.verbose("================================================");
            if ((options.parse && options.protocol)) {
              options.protocol = JSON.parse(options.protocol); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.protocol },]); } ;

          paramPath = ((options.path + "/") + "certificateUrl");
          if (options.certificateUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.certificateUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.certificateUrl)) {
              options.certificateUrl = JSON.parse(options.certificateUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.certificateUrl },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl1 = catparametersUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl1 = parametersUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl1.category("listeners").description($("Commands to configure listeners of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl1.command("delete").description($("Remove listeners in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"listeners\" : {\r\n             \"protocol\":null,\r\n             \"certificateUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--protocol", $("Remove the protocol value.")).option("--certificate-url", $("Remove the certificate-url value.")).execute(function __128(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__128", line: 10357 }; return __func(_, this, arguments, __128, 1, __frame, function __$__128() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__128() { return (function __$__128(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__128() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/osProfile/windowsConfiguration/winRM/listeners" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.protocol) || options.certificateUrl);
          if (anySubItem) {
            subItemPath = null;
            if (options.protocol) {
              subItemPath = (options.path + "/protocol");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.certificateUrl) {
              subItemPath = (options.path + "/certificateUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC1 = catparametersUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC1 = parametersUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC1.category("linux-configuration").description($("Commands to configure linux-configuration of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC1.command("set").description($("Set linux-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"linuxConfiguration\" : {\r\n             \"disablePasswordAuthentication\":null,\r\n             \"ssh\":{\r\n               \"publicKeys\":[\r\n                 {\r\n                   \"path\":\"\",\r\n                   \"keyData\":\"\"\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--disable-password-authentication <disablePasswordAuthentication>", $("Set the disable-password-authentication value.")).option("--ssh <ssh>", $("Set the ssh value.")).execute(function __129(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__129", line: 10411 }; return __func(_, this, arguments, __129, 1, __frame, function __$__129() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__129() { return (function __$__129(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__129() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/osProfile/linuxConfiguration";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "disablePasswordAuthentication");
          if (options.disablePasswordAuthentication) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.disablePasswordAuthentication));
            cli.output.verbose("================================================");
            if ((options.parse && options.disablePasswordAuthentication)) {
              options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication); } ;

            options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.disablePasswordAuthentication },]); } ;

          paramPath = ((options.path + "/") + "ssh");
          if (options.ssh) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.ssh));
            cli.output.verbose("================================================");
            if ((options.parse && options.ssh)) {
              options.ssh = JSON.parse(options.ssh); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.ssh },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC1 = catparametersUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC1 = parametersUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC1.category("linux-configuration").description($("Commands to configure linux-configuration of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC1.command("delete").description($("Remove linux-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"linuxConfiguration\" : {\r\n             \"disablePasswordAuthentication\":null,\r\n             \"ssh\":{\r\n               \"publicKeys\":[\r\n                 {\r\n                   \"path\":\"\",\r\n                   \"keyData\":\"\"\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--disable-password-authentication", $("Remove the disable-password-authentication value.")).option("--ssh", $("Remove the ssh value.")).execute(function __130(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__130", line: 10476 }; return __func(_, this, arguments, __130, 1, __frame, function __$__130() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__130() { return (function __$__130(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__130() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/osProfile/linuxConfiguration";
          anySubItem = ((false || options.disablePasswordAuthentication) || options.ssh);
          if (anySubItem) {
            subItemPath = null;
            if (options.disablePasswordAuthentication) {
              subItemPath = (options.path + "/disablePasswordAuthentication");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.ssh) {
              subItemPath = (options.path + "/ssh");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsSsh0VMPoPlCs1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsSsh0VMPoPlCs1 = catparametersUpdateVirtualMachineScaleSetsSsh0VMPoPlCs1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsSsh0VMPoPlCs1 = parametersUpdateVirtualMachineScaleSetsSsh0VMPoPlCs1.category("ssh").description($("Commands to configure ssh of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsSsh0VMPoPlCs1.command("set").description($("Set ssh in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"ssh\" : {\r\n             \"publicKeys\":[\r\n               {\r\n                 \"path\":\"\",\r\n                 \"keyData\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--public-keys <publicKeys>", $("Set the public-keys value.")).execute(function __131(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__131", line: 10529 }; return __func(_, this, arguments, __131, 1, __frame, function __$__131() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__131() { return (function __$__131(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__131() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/osProfile/linuxConfiguration/ssh";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "publicKeys");
          if (options.publicKeys) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publicKeys));
            cli.output.verbose("================================================");
            if ((options.parse && options.publicKeys)) {
              options.publicKeys = JSON.parse(options.publicKeys); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publicKeys },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsSsh1VMPoPlCs1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsSsh1VMPoPlCs1 = catparametersUpdateVirtualMachineScaleSetsSsh1VMPoPlCs1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsSsh1VMPoPlCs1 = parametersUpdateVirtualMachineScaleSetsSsh1VMPoPlCs1.category("ssh").description($("Commands to configure ssh of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsSsh1VMPoPlCs1.command("delete").description($("Remove ssh in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"ssh\" : {\r\n             \"publicKeys\":[\r\n               {\r\n                 \"path\":\"\",\r\n                 \"keyData\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--public-keys", $("Remove the public-keys value.")).execute(function __132(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__132", line: 10581 }; return __func(_, this, arguments, __132, 1, __frame, function __$__132() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__132() { return (function __$__132(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__132() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/osProfile/linuxConfiguration/ssh";
          anySubItem = (false || options.publicKeys);
          if (anySubItem) {
            subItemPath = null;
            if (options.publicKeys) {
              subItemPath = (options.path + "/publicKeys");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK1 = catparametersUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK1 = parametersUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK1.category("public-keys").description($("Commands to configure public-keys of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK1.command("set").description($("Set public-keys in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"publicKeys\" : {\r\n             \"path\":\"\",\r\n             \"keyData\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--path <path>", $("Set the path value.")).option("--key-data <keyData>", $("Set the key-data value.")).execute(function __133(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__133", line: 10633 }; return __func(_, this, arguments, __133, 1, __frame, function __$__133() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__133() { return (function __$__133(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__133() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/osProfile/linuxConfiguration/ssh/publicKeys" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "path");
          if (options.path) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.path));
            cli.output.verbose("================================================");
            if ((options.parse && options.path)) {
              options.path = JSON.parse(options.path); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.path },]); } ;

          paramPath = ((options.path + "/") + "keyData");
          if (options.keyData) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.keyData));
            cli.output.verbose("================================================");
            if ((options.parse && options.keyData)) {
              options.keyData = JSON.parse(options.keyData); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.keyData },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK1 = catparametersUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK1 = parametersUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK1.category("public-keys").description($("Commands to configure public-keys of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK1.command("delete").description($("Remove public-keys in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"publicKeys\" : {\r\n             \"path\":\"\",\r\n             \"keyData\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--path", $("Remove the path value.")).option("--key-data", $("Remove the key-data value.")).execute(function __134(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__134", line: 10702 }; return __func(_, this, arguments, __134, 1, __frame, function __$__134() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__134() { return (function __$__134(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__134() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/osProfile/linuxConfiguration/ssh/publicKeys" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.path) || options.keyData);
          if (anySubItem) {
            subItemPath = null;
            if (options.path) {
              subItemPath = (options.path + "/path");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.keyData) {
              subItemPath = (options.path + "/keyData");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsSecrets0VMPoPs1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsSecrets0VMPoPs1 = catparametersUpdateVirtualMachineScaleSetsSecrets0VMPoPs1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsSecrets0VMPoPs1 = parametersUpdateVirtualMachineScaleSetsSecrets0VMPoPs1.category("secrets").description($("Commands to configure secrets of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsSecrets0VMPoPs1.command("set").description($("Set secrets in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"secrets\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"vaultCertificates\":[\r\n               {\r\n                 \"certificateUrl\":\"\",\r\n                 \"certificateStore\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--source-vault <sourceVault>", $("Set the source-vault value.")).option("--vault-certificates <vaultCertificates>", $("Set the vault-certificates value.")).execute(function __135(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__135", line: 10758 }; return __func(_, this, arguments, __135, 1, __frame, function __$__135() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__135() { return (function __$__135(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__135() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/osProfile/secrets" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "sourceVault");
          if (options.sourceVault) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceVault));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceVault)) {
              options.sourceVault = JSON.parse(options.sourceVault); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceVault },]); } ;

          paramPath = ((options.path + "/") + "vaultCertificates");
          if (options.vaultCertificates) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.vaultCertificates));
            cli.output.verbose("================================================");
            if ((options.parse && options.vaultCertificates)) {
              options.vaultCertificates = JSON.parse(options.vaultCertificates); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.vaultCertificates },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsSecrets1VMPoPs1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsSecrets1VMPoPs1 = catparametersUpdateVirtualMachineScaleSetsSecrets1VMPoPs1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsSecrets1VMPoPs1 = parametersUpdateVirtualMachineScaleSetsSecrets1VMPoPs1.category("secrets").description($("Commands to configure secrets of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsSecrets1VMPoPs1.command("delete").description($("Remove secrets in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"secrets\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"vaultCertificates\":[\r\n               {\r\n                 \"certificateUrl\":\"\",\r\n                 \"certificateStore\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--source-vault", $("Remove the source-vault value.")).option("--vault-certificates", $("Remove the vault-certificates value.")).execute(function __136(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__136", line: 10827 }; return __func(_, this, arguments, __136, 1, __frame, function __$__136() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__136() { return (function __$__136(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__136() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/osProfile/secrets" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.sourceVault) || options.vaultCertificates);
          if (anySubItem) {
            subItemPath = null;
            if (options.sourceVault) {
              subItemPath = (options.path + "/sourceVault");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.vaultCertificates) {
              subItemPath = (options.path + "/vaultCertificates");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV1 = catparametersUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV1 = parametersUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV1.category("source-vault").description($("Commands to configure source-vault of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV1.command("set").description($("Set source-vault in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--secrets-index <secrets-index>", $("Indexer: secrets-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __137(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__137", line: 10881 }; return __func(_, this, arguments, __137, 1, __frame, function __$__137() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__137() { return (function __$__137(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__137() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/virtualMachineProfile/osProfile/secrets/" + options.secretsIndex) + "/sourceVault");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV1 = catparametersUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV1 = parametersUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV1.category("source-vault").description($("Commands to configure source-vault of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV1.command("delete").description($("Remove source-vault in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--secrets-index <secrets-index>", $("Indexer: secrets-index.")).option("--id", $("Remove the id value.")).execute(function __138(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__138", line: 10934 }; return __func(_, this, arguments, __138, 1, __frame, function __$__138() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__138() { return (function __$__138(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__138() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/virtualMachineProfile/osProfile/secrets/" + options.secretsIndex) + "/sourceVault");
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC1 = catparametersUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC1 = parametersUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC1.category("vault-certificates").description($("Commands to configure vault-certificates of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC1.command("set").description($("Set vault-certificates in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"vaultCertificates\" : {\r\n             \"certificateUrl\":\"\",\r\n             \"certificateStore\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--secrets-index <secrets-index>", $("Indexer: secrets-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--certificate-url <certificateUrl>", $("Set the certificate-url value.")).option("--certificate-store <certificateStore>", $("Set the certificate-store value.")).execute(function __139(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__139", line: 10987 }; return __func(_, this, arguments, __139, 1, __frame, function __$__139() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__139() { return (function __$__139(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__139() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/virtualMachineProfile/osProfile/secrets/" + options.secretsIndex) + "/vaultCertificates") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "certificateUrl");
          if (options.certificateUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.certificateUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.certificateUrl)) {
              options.certificateUrl = JSON.parse(options.certificateUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.certificateUrl },]); } ;

          paramPath = ((options.path + "/") + "certificateStore");
          if (options.certificateStore) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.certificateStore));
            cli.output.verbose("================================================");
            if ((options.parse && options.certificateStore)) {
              options.certificateStore = JSON.parse(options.certificateStore); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.certificateStore },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC1 = catparametersUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC1 = parametersUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC1.category("vault-certificates").description($("Commands to configure vault-certificates of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC1.command("delete").description($("Remove vault-certificates in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"vaultCertificates\" : {\r\n             \"certificateUrl\":\"\",\r\n             \"certificateStore\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--secrets-index <secrets-index>", $("Indexer: secrets-index.")).option("--certificate-url", $("Remove the certificate-url value.")).option("--certificate-store", $("Remove the certificate-store value.")).execute(function __140(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__140", line: 11057 }; return __func(_, this, arguments, __140, 1, __frame, function __$__140() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__140() { return (function __$__140(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__140() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/virtualMachineProfile/osProfile/secrets/" + options.secretsIndex) + "/vaultCertificates") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((false || options.certificateUrl) || options.certificateStore);
          if (anySubItem) {
            subItemPath = null;
            if (options.certificateUrl) {
              subItemPath = (options.path + "/certificateUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.certificateStore) {
              subItemPath = (options.path + "/certificateStore");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsStorageProfile0VMPsP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsStorageProfile0VMPsP1 = catparametersUpdateVirtualMachineScaleSetsStorageProfile0VMPsP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsStorageProfile0VMPsP1 = parametersUpdateVirtualMachineScaleSetsStorageProfile0VMPsP1.category("storage-profile").description($("Commands to configure storage-profile of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsStorageProfile0VMPsP1.command("set").description($("Set storage-profile in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"storageProfile\" : {\r\n             \"imageReference\":{\r\n               \"publisher\":\"\",\r\n               \"offer\":\"\",\r\n               \"sku\":\"\",\r\n               \"version\":\"\",\r\n               \"id\":\"\"\r\n             },\r\n             \"osDisk\":{\r\n               \"caching\":null,\r\n               \"image\":{\r\n                 \"uri\":\"\"\r\n               },\r\n               \"vhdContainers\":[\r\n                 \"\"\r\n               ],\r\n               \"managedDisk\":{\r\n                 \"storageAccountType\":null\r\n               }\r\n             },\r\n             \"dataDisks\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"lun\":\"\",\r\n                 \"caching\":null,\r\n                 \"createOption\":\"\",\r\n                 \"diskSizeGB\":null,\r\n                 \"managedDisk\":{\r\n                   \"storageAccountType\":null\r\n                 }\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--image-reference <imageReference>", $("Set the image-reference value.")).option("--os-disk <osDisk>", $("Set the os-disk value.")).option("--data-disks <dataDisks>", $("Set the data-disks value.")).execute(function __141(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__141", line: 11112 }; return __func(_, this, arguments, __141, 1, __frame, function __$__141() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__141() { return (function __$__141(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__141() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/storageProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "imageReference");
          if (options.imageReference) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.imageReference));
            cli.output.verbose("================================================");
            if ((options.parse && options.imageReference)) {
              options.imageReference = JSON.parse(options.imageReference); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.imageReference },]); } ;

          paramPath = ((options.path + "/") + "osDisk");
          if (options.osDisk) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.osDisk));
            cli.output.verbose("================================================");
            if ((options.parse && options.osDisk)) {
              options.osDisk = JSON.parse(options.osDisk); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.osDisk },]); } ;

          paramPath = ((options.path + "/") + "dataDisks");
          if (options.dataDisks) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.dataDisks));
            cli.output.verbose("================================================");
            if ((options.parse && options.dataDisks)) {
              options.dataDisks = JSON.parse(options.dataDisks); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.dataDisks },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsStorageProfile1VMPsP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsStorageProfile1VMPsP1 = catparametersUpdateVirtualMachineScaleSetsStorageProfile1VMPsP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsStorageProfile1VMPsP1 = parametersUpdateVirtualMachineScaleSetsStorageProfile1VMPsP1.category("storage-profile").description($("Commands to configure storage-profile of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsStorageProfile1VMPsP1.command("delete").description($("Remove storage-profile in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"storageProfile\" : {\r\n             \"imageReference\":{\r\n               \"publisher\":\"\",\r\n               \"offer\":\"\",\r\n               \"sku\":\"\",\r\n               \"version\":\"\",\r\n               \"id\":\"\"\r\n             },\r\n             \"osDisk\":{\r\n               \"caching\":null,\r\n               \"image\":{\r\n                 \"uri\":\"\"\r\n               },\r\n               \"vhdContainers\":[\r\n                 \"\"\r\n               ],\r\n               \"managedDisk\":{\r\n                 \"storageAccountType\":null\r\n               }\r\n             },\r\n             \"dataDisks\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"lun\":\"\",\r\n                 \"caching\":null,\r\n                 \"createOption\":\"\",\r\n                 \"diskSizeGB\":null,\r\n                 \"managedDisk\":{\r\n                   \"storageAccountType\":null\r\n                 }\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--image-reference", $("Remove the image-reference value.")).option("--os-disk", $("Remove the os-disk value.")).option("--data-disks", $("Remove the data-disks value.")).execute(function __142(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__142", line: 11188 }; return __func(_, this, arguments, __142, 1, __frame, function __$__142() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__142() { return (function __$__142(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__142() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/storageProfile";
          anySubItem = (((false || options.imageReference) || options.osDisk) || options.dataDisks);
          if (anySubItem) {
            subItemPath = null;
            if (options.imageReference) {
              subItemPath = (options.path + "/imageReference");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.osDisk) {
              subItemPath = (options.path + "/osDisk");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.dataDisks) {
              subItemPath = (options.path + "/dataDisks");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsImageReference0VMPsPiR1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsImageReference0VMPsPiR1 = catparametersUpdateVirtualMachineScaleSetsImageReference0VMPsPiR1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsImageReference0VMPsPiR1 = parametersUpdateVirtualMachineScaleSetsImageReference0VMPsPiR1.category("image-reference").description($("Commands to configure image-reference of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsImageReference0VMPsPiR1.command("set").description($("Set image-reference in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"imageReference\" : {\r\n             \"publisher\":\"\",\r\n             \"offer\":\"\",\r\n             \"sku\":\"\",\r\n             \"version\":\"\",\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--publisher <publisher>", $("Set the publisher value.")).option("--offer <offer>", $("Set the offer value.")).option("--sku <sku>", $("Set the sku value.")).option("--version <version>", $("Set the version value.")).option("--id <id>", $("Set the id value.")).execute(function __143(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__143", line: 11249 }; return __func(_, this, arguments, __143, 1, __frame, function __$__143() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__143() { return (function __$__143(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__143() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/storageProfile/imageReference";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "publisher");
          if (options.publisher) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publisher));
            cli.output.verbose("================================================");
            if ((options.parse && options.publisher)) {
              options.publisher = JSON.parse(options.publisher); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publisher },]); } ;

          paramPath = ((options.path + "/") + "offer");
          if (options.offer) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.offer));
            cli.output.verbose("================================================");
            if ((options.parse && options.offer)) {
              options.offer = JSON.parse(options.offer); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.offer },]); } ;

          paramPath = ((options.path + "/") + "sku");
          if (options.sku) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sku));
            cli.output.verbose("================================================");
            if ((options.parse && options.sku)) {
              options.sku = JSON.parse(options.sku); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sku },]); } ;

          paramPath = ((options.path + "/") + "version");
          if (options.version) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.version));
            cli.output.verbose("================================================");
            if ((options.parse && options.version)) {
              options.version = JSON.parse(options.version); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.version },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsImageReference1VMPsPiR1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsImageReference1VMPsPiR1 = catparametersUpdateVirtualMachineScaleSetsImageReference1VMPsPiR1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsImageReference1VMPsPiR1 = parametersUpdateVirtualMachineScaleSetsImageReference1VMPsPiR1.category("image-reference").description($("Commands to configure image-reference of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsImageReference1VMPsPiR1.command("delete").description($("Remove image-reference in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"imageReference\" : {\r\n             \"publisher\":\"\",\r\n             \"offer\":\"\",\r\n             \"sku\":\"\",\r\n             \"version\":\"\",\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--publisher", $("Remove the publisher value.")).option("--offer", $("Remove the offer value.")).option("--sku", $("Remove the sku value.")).option("--version", $("Remove the version value.")).option("--id", $("Remove the id value.")).execute(function __144(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__144", line: 11349 }; return __func(_, this, arguments, __144, 1, __frame, function __$__144() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__144() { return (function __$__144(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__144() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/storageProfile/imageReference";
          anySubItem = (((((false || options.publisher) || options.offer) || options.sku) || options.version) || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.publisher) {
              subItemPath = (options.path + "/publisher");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.offer) {
              subItemPath = (options.path + "/offer");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.sku) {
              subItemPath = (options.path + "/sku");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.version) {
              subItemPath = (options.path + "/version");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD1 = catparametersUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD1 = parametersUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD1.category("os-disk").description($("Commands to configure os-disk of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD1.command("set").description($("Set os-disk in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"osDisk\" : {\r\n             \"caching\":null,\r\n             \"image\":{\r\n               \"uri\":\"\"\r\n             },\r\n             \"vhdContainers\":[\r\n               \"\"\r\n             ],\r\n             \"managedDisk\":{\r\n               \"storageAccountType\":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--caching <caching>", $("Set the caching value.")).option("--image <image>", $("Set the image value.")).option("--vhd-containers <vhdContainers>", $("Set the vhd-containers value.")).option("--managed-disk <managedDisk>", $("Set the managed-disk value.")).execute(function __145(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__145", line: 11417 }; return __func(_, this, arguments, __145, 1, __frame, function __$__145() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__145() { return (function __$__145(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__145() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/storageProfile/osDisk";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "caching");
          if (options.caching) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.caching));
            cli.output.verbose("================================================");
            if ((options.parse && options.caching)) {
              options.caching = JSON.parse(options.caching); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.caching },]); } ;

          paramPath = ((options.path + "/") + "image");
          if (options.image) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.image));
            cli.output.verbose("================================================");
            if ((options.parse && options.image)) {
              options.image = JSON.parse(options.image); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.image },]); } ;

          paramPath = ((options.path + "/") + "vhdContainers");
          if (options.vhdContainers) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.vhdContainers));
            cli.output.verbose("================================================");
            if ((options.parse && options.vhdContainers)) {
              options.vhdContainers = JSON.parse(options.vhdContainers); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.vhdContainers },]); } ;

          paramPath = ((options.path + "/") + "managedDisk");
          if (options.managedDisk) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.managedDisk));
            cli.output.verbose("================================================");
            if ((options.parse && options.managedDisk)) {
              options.managedDisk = JSON.parse(options.managedDisk); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.managedDisk },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD1 = catparametersUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD1 = parametersUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD1.category("os-disk").description($("Commands to configure os-disk of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD1.command("delete").description($("Remove os-disk in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"osDisk\" : {\r\n             \"caching\":null,\r\n             \"image\":{\r\n               \"uri\":\"\"\r\n             },\r\n             \"vhdContainers\":[\r\n               \"\"\r\n             ],\r\n             \"managedDisk\":{\r\n               \"storageAccountType\":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--caching", $("Remove the caching value.")).option("--image", $("Remove the image value.")).option("--vhd-containers", $("Remove the vhd-containers value.")).option("--managed-disk", $("Remove the managed-disk value.")).execute(function __146(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__146", line: 11505 }; return __func(_, this, arguments, __146, 1, __frame, function __$__146() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__146() { return (function __$__146(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__146() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/storageProfile/osDisk";
          anySubItem = ((((false || options.caching) || options.image) || options.vhdContainers) || options.managedDisk);
          if (anySubItem) {
            subItemPath = null;
            if (options.caching) {
              subItemPath = (options.path + "/caching");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.image) {
              subItemPath = (options.path + "/image");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.vhdContainers) {
              subItemPath = (options.path + "/vhdContainers");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.managedDisk) {
              subItemPath = (options.path + "/managedDisk");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsImage0VMPsPoDi1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsImage0VMPsPoDi1 = catparametersUpdateVirtualMachineScaleSetsImage0VMPsPoDi1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsImage0VMPsPoDi1 = parametersUpdateVirtualMachineScaleSetsImage0VMPsPoDi1.category("image").description($("Commands to configure image of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsImage0VMPsPoDi1.command("set").description($("Set image in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"image\" : {\r\n             \"uri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--uri <uri>", $("Set the uri value.")).execute(function __147(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__147", line: 11566 }; return __func(_, this, arguments, __147, 1, __frame, function __$__147() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__147() { return (function __$__147(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__147() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/storageProfile/osDisk/image";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "uri");
          if (options.uri) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.uri));
            cli.output.verbose("================================================");
            if ((options.parse && options.uri)) {
              options.uri = JSON.parse(options.uri); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.uri },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsImage1VMPsPoDi1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsImage1VMPsPoDi1 = catparametersUpdateVirtualMachineScaleSetsImage1VMPsPoDi1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsImage1VMPsPoDi1 = parametersUpdateVirtualMachineScaleSetsImage1VMPsPoDi1.category("image").description($("Commands to configure image of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsImage1VMPsPoDi1.command("delete").description($("Remove image in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"image\" : {\r\n             \"uri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--uri", $("Remove the uri value.")).execute(function __148(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__148", line: 11618 }; return __func(_, this, arguments, __148, 1, __frame, function __$__148() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__148() { return (function __$__148(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__148() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/storageProfile/osDisk/image";
          anySubItem = (false || options.uri);
          if (anySubItem) {
            subItemPath = null;
            if (options.uri) {
              subItemPath = (options.path + "/uri");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC1 = catparametersUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC1 = parametersUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC1.category("vhd-containers").description($("Commands to configure vhd-containers of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC1.command("set").description($("Set vhd-containers in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"vhdContainers\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).execute(function __149(options, _) { var fileContent, parametersObj, error, updatedContent; var __frame = { name: "__149", line: 11668 }; return __func(_, this, arguments, __149, 1, __frame, function __$__149() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__149() { return (function __$__149(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__149() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/storageProfile/osDisk/vhdContainers" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC1 = catparametersUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC1 = parametersUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC1.category("vhd-containers").description($("Commands to configure vhd-containers of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC1.command("delete").description($("Remove vhd-containers in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"vhdContainers\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).execute(function __150(options, _) { var fileContent, parametersObj, updatedContent; var __frame = { name: "__150", line: 11713 }; return __func(_, this, arguments, __150, 1, __frame, function __$__150() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__150() { return (function __$__150(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__150() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/storageProfile/osDisk/vhdContainers" + ((options.index ? (("/" + options.index)) : "")));
          jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]);

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD1 = catparametersUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD1 = parametersUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD1.category("managed-disk").description($("Commands to configure managed-disk of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD1.command("set").description($("Set managed-disk in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"managedDisk\" : {\r\n             \"storageAccountType\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--storage-account-type <storageAccountType>", $("Set the storage-account-type value.")).execute(function __151(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__151", line: 11752 }; return __func(_, this, arguments, __151, 1, __frame, function __$__151() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__151() { return (function __$__151(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__151() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/storageProfile/osDisk/managedDisk";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "storageAccountType");
          if (options.storageAccountType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageAccountType));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageAccountType)) {
              options.storageAccountType = JSON.parse(options.storageAccountType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageAccountType },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD1 = catparametersUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD1 = parametersUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD1.category("managed-disk").description($("Commands to configure managed-disk of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD1.command("delete").description($("Remove managed-disk in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"managedDisk\" : {\r\n             \"storageAccountType\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--storage-account-type", $("Remove the storage-account-type value.")).execute(function __152(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__152", line: 11804 }; return __func(_, this, arguments, __152, 1, __frame, function __$__152() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__152() { return (function __$__152(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__152() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/storageProfile/osDisk/managedDisk";
          anySubItem = (false || options.storageAccountType);
          if (anySubItem) {
            subItemPath = null;
            if (options.storageAccountType) {
              subItemPath = (options.path + "/storageAccountType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD1 = catparametersUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD1 = parametersUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD1.category("data-disks").description($("Commands to configure data-disks of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD1.command("set").description($("Set data-disks in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"dataDisks\" : {\r\n             \"name\":\"\",\r\n             \"lun\":\"\",\r\n             \"caching\":null,\r\n             \"createOption\":\"\",\r\n             \"diskSizeGB\":null,\r\n             \"managedDisk\":{\r\n               \"storageAccountType\":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--lun <lun>", $("Set the lun value.")).option("--caching <caching>", $("Set the caching value.")).option("--create-option <createOption>", $("Set the create-option value.")).option("--disk-size-g-b <diskSizeGB>", $("Set the disk-size-g-b value.")).option("--managed-disk <managedDisk>", $("Set the managed-disk value.")).execute(function __153(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__153", line: 11860 }; return __func(_, this, arguments, __153, 1, __frame, function __$__153() {













      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__153() { return (function __$__153(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__153() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/storageProfile/dataDisks" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "lun");
          if (options.lun) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.lun));
            cli.output.verbose("================================================");
            if ((options.parse && options.lun)) {
              options.lun = JSON.parse(options.lun); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.lun },]); } ;

          paramPath = ((options.path + "/") + "caching");
          if (options.caching) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.caching));
            cli.output.verbose("================================================");
            if ((options.parse && options.caching)) {
              options.caching = JSON.parse(options.caching); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.caching },]); } ;

          paramPath = ((options.path + "/") + "createOption");
          if (options.createOption) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.createOption));
            cli.output.verbose("================================================");
            if ((options.parse && options.createOption)) {
              options.createOption = JSON.parse(options.createOption); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.createOption },]); } ;

          paramPath = ((options.path + "/") + "diskSizeGB");
          if (options.diskSizeGB) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diskSizeGB));
            cli.output.verbose("================================================");
            if ((options.parse && options.diskSizeGB)) {
              options.diskSizeGB = JSON.parse(options.diskSizeGB); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diskSizeGB },]); } ;

          paramPath = ((options.path + "/") + "managedDisk");
          if (options.managedDisk) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.managedDisk));
            cli.output.verbose("================================================");
            if ((options.parse && options.managedDisk)) {
              options.managedDisk = JSON.parse(options.managedDisk); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.managedDisk },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD1 = catparametersUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD1 = parametersUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD1.category("data-disks").description($("Commands to configure data-disks of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD1.command("delete").description($("Remove data-disks in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"dataDisks\" : {\r\n             \"name\":\"\",\r\n             \"lun\":\"\",\r\n             \"caching\":null,\r\n             \"createOption\":\"\",\r\n             \"diskSizeGB\":null,\r\n             \"managedDisk\":{\r\n               \"storageAccountType\":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--name", $("Remove the name value.")).option("--lun", $("Remove the lun value.")).option("--caching", $("Remove the caching value.")).option("--create-option", $("Remove the create-option value.")).option("--disk-size-g-b", $("Remove the disk-size-g-b value.")).option("--managed-disk", $("Remove the managed-disk value.")).execute(function __154(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__154", line: 11977 }; return __func(_, this, arguments, __154, 1, __frame, function __$__154() {











      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__154() { return (function __$__154(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__154() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/storageProfile/dataDisks" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((((((false || options.name) || options.lun) || options.caching) || options.createOption) || options.diskSizeGB) || options.managedDisk);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.lun) {
              subItemPath = (options.path + "/lun");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.caching) {
              subItemPath = (options.path + "/caching");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.createOption) {
              subItemPath = (options.path + "/createOption");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.diskSizeGB) {
              subItemPath = (options.path + "/diskSizeGB");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.managedDisk) {
              subItemPath = (options.path + "/managedDisk");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsManagedDisk0VMPsPdDDImD2 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsManagedDisk0VMPsPdDDImD2 = catparametersUpdateVirtualMachineScaleSetsManagedDisk0VMPsPdDDImD2.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsManagedDisk0VMPsPdDDImD2 = parametersUpdateVirtualMachineScaleSetsManagedDisk0VMPsPdDDImD2.category("data-disks-managed-disk").description($("Commands to configure data-disks-managed-disk of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsManagedDisk0VMPsPdDDImD2.command("set").description($("Set data-disks-managed-disk in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"managedDisk\" : {\r\n             \"storageAccountType\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--data-disks-index <data-disks-index>", $("Indexer: data-disks-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--storage-account-type <storageAccountType>", $("Set the storage-account-type value.")).execute(function __155(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__155", line: 12047 }; return __func(_, this, arguments, __155, 1, __frame, function __$__155() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__155() { return (function __$__155(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__155() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/virtualMachineProfile/storageProfile/dataDisks/" + options.dataDisksIndex) + "/managedDisk");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "storageAccountType");
          if (options.storageAccountType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageAccountType));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageAccountType)) {
              options.storageAccountType = JSON.parse(options.storageAccountType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageAccountType },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD2 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD2 = catparametersUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD2.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD2 = parametersUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD2.category("data-disks-managed-disk").description($("Commands to configure data-disks-managed-disk of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD2.command("delete").description($("Remove data-disks-managed-disk in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"managedDisk\" : {\r\n             \"storageAccountType\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--data-disks-index <data-disks-index>", $("Indexer: data-disks-index.")).option("--storage-account-type", $("Remove the storage-account-type value.")).execute(function __156(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__156", line: 12100 }; return __func(_, this, arguments, __156, 1, __frame, function __$__156() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__156() { return (function __$__156(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__156() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/virtualMachineProfile/storageProfile/dataDisks/" + options.dataDisksIndex) + "/managedDisk");
          anySubItem = (false || options.storageAccountType);
          if (anySubItem) {
            subItemPath = null;
            if (options.storageAccountType) {
              subItemPath = (options.path + "/storageAccountType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP1 = catparametersUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP1 = parametersUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP1.category("network-profile").description($("Commands to configure network-profile of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP1.command("set").description($("Set network-profile in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkProfile\" : {\r\n             \"networkInterfaceConfigurations\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"primary\":null,\r\n                 \"enableAcceleratedNetworking\":null,\r\n                 \"networkSecurityGroup\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"dnsSettings\":{\r\n                   \"dnsServers\":[\r\n                     \"\"\r\n                   ]\r\n                 },\r\n                 \"ipConfigurations\":[\r\n                   {\r\n                     \"name\":\"\",\r\n                     \"subnet\":{\r\n                       \"id\":\"\"\r\n                     },\r\n                     \"primary\":null,\r\n                     \"publicIPAddressConfiguration\":{\r\n                       \"name\":\"\",\r\n                       \"idleTimeoutInMinutes\":null,\r\n                       \"dnsSettings\":{\r\n                         \"domainNameLabel\":\"\"\r\n                       }\r\n                     },\r\n                     \"privateIPAddressVersion\":\"\",\r\n                     \"applicationGatewayBackendAddressPools\":[\r\n                       {\r\n                         \"id\":\"\"\r\n                       }\r\n                     ],\r\n                     \"loadBalancerBackendAddressPools\":[\r\n                       {\r\n                         \"id\":\"\"\r\n                       }\r\n                     ],\r\n                     \"loadBalancerInboundNatPools\":[\r\n                       {\r\n                         \"id\":\"\"\r\n                       }\r\n                     ],\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"id\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--network-interface-configurations <networkInterfaceConfigurations>", $("Set the network-interface-configurations value.")).execute(function __157(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__157", line: 12149 }; return __func(_, this, arguments, __157, 1, __frame, function __$__157() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__157() { return (function __$__157(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__157() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/networkProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "networkInterfaceConfigurations");
          if (options.networkInterfaceConfigurations) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.networkInterfaceConfigurations));
            cli.output.verbose("================================================");
            if ((options.parse && options.networkInterfaceConfigurations)) {
              options.networkInterfaceConfigurations = JSON.parse(options.networkInterfaceConfigurations); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.networkInterfaceConfigurations },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP1 = catparametersUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP1 = parametersUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP1.category("network-profile").description($("Commands to configure network-profile of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP1.command("delete").description($("Remove network-profile in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkProfile\" : {\r\n             \"networkInterfaceConfigurations\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"primary\":null,\r\n                 \"enableAcceleratedNetworking\":null,\r\n                 \"networkSecurityGroup\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"dnsSettings\":{\r\n                   \"dnsServers\":[\r\n                     \"\"\r\n                   ]\r\n                 },\r\n                 \"ipConfigurations\":[\r\n                   {\r\n                     \"name\":\"\",\r\n                     \"subnet\":{\r\n                       \"id\":\"\"\r\n                     },\r\n                     \"primary\":null,\r\n                     \"publicIPAddressConfiguration\":{\r\n                       \"name\":\"\",\r\n                       \"idleTimeoutInMinutes\":null,\r\n                       \"dnsSettings\":{\r\n                         \"domainNameLabel\":\"\"\r\n                       }\r\n                     },\r\n                     \"privateIPAddressVersion\":\"\",\r\n                     \"applicationGatewayBackendAddressPools\":[\r\n                       {\r\n                         \"id\":\"\"\r\n                       }\r\n                     ],\r\n                     \"loadBalancerBackendAddressPools\":[\r\n                       {\r\n                         \"id\":\"\"\r\n                       }\r\n                     ],\r\n                     \"loadBalancerInboundNatPools\":[\r\n                       {\r\n                         \"id\":\"\"\r\n                       }\r\n                     ],\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"id\":\"\"\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--network-interface-configurations", $("Remove the network-interface-configurations value.")).execute(function __158(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__158", line: 12201 }; return __func(_, this, arguments, __158, 1, __frame, function __$__158() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__158() { return (function __$__158(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__158() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/networkProfile";
          anySubItem = (false || options.networkInterfaceConfigurations);
          if (anySubItem) {
            subItemPath = null;
            if (options.networkInterfaceConfigurations) {
              subItemPath = (options.path + "/networkInterfaceConfigurations");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC1 = catparametersUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC1 = parametersUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC1.category("network-interface-configurations").description($("Commands to configure network-interface-configurations of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC1.command("set").description($("Set network-interface-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkInterfaceConfigurations\" : {\r\n             \"name\":\"\",\r\n             \"primary\":null,\r\n             \"enableAcceleratedNetworking\":null,\r\n             \"networkSecurityGroup\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"dnsSettings\":{\r\n               \"dnsServers\":[\r\n                 \"\"\r\n               ]\r\n             },\r\n             \"ipConfigurations\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"subnet\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"primary\":null,\r\n                 \"publicIPAddressConfiguration\":{\r\n                   \"name\":\"\",\r\n                   \"idleTimeoutInMinutes\":null,\r\n                   \"dnsSettings\":{\r\n                     \"domainNameLabel\":\"\"\r\n                   }\r\n                 },\r\n                 \"privateIPAddressVersion\":\"\",\r\n                 \"applicationGatewayBackendAddressPools\":[\r\n                   {\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"loadBalancerBackendAddressPools\":[\r\n                   {\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"loadBalancerInboundNatPools\":[\r\n                   {\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--primary <primary>", $("Set the primary value.")).option("--enable-accelerated-networking <enableAcceleratedNetworking>", $("Set the enable-accelerated-networking value.")).option("--network-security-group <networkSecurityGroup>", $("Set the network-security-group value.")).option("--dns-settings <dnsSettings>", $("Set the dns-settings value.")).option("--ip-configurations <ipConfigurations>", $("Set the ip-configurations value.")).option("--id <id>", $("Set the id value.")).execute(function __159(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__159", line: 12258 }; return __func(_, this, arguments, __159, 1, __frame, function __$__159() {














      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__159() { return (function __$__159(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__159() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "primary");
          if (options.primary) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.primary));
            cli.output.verbose("================================================");
            if ((options.parse && options.primary)) {
              options.primary = JSON.parse(options.primary); } ;

            options.primary = JSON.parse(options.primary);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.primary },]); } ;

          paramPath = ((options.path + "/") + "enableAcceleratedNetworking");
          if (options.enableAcceleratedNetworking) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.enableAcceleratedNetworking));
            cli.output.verbose("================================================");
            if ((options.parse && options.enableAcceleratedNetworking)) {
              options.enableAcceleratedNetworking = JSON.parse(options.enableAcceleratedNetworking); } ;

            options.enableAcceleratedNetworking = JSON.parse(options.enableAcceleratedNetworking);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.enableAcceleratedNetworking },]); } ;

          paramPath = ((options.path + "/") + "networkSecurityGroup");
          if (options.networkSecurityGroup) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.networkSecurityGroup));
            cli.output.verbose("================================================");
            if ((options.parse && options.networkSecurityGroup)) {
              options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.networkSecurityGroup },]); } ;

          paramPath = ((options.path + "/") + "dnsSettings");
          if (options.dnsSettings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.dnsSettings));
            cli.output.verbose("================================================");
            if ((options.parse && options.dnsSettings)) {
              options.dnsSettings = JSON.parse(options.dnsSettings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.dnsSettings },]); } ;

          paramPath = ((options.path + "/") + "ipConfigurations");
          if (options.ipConfigurations) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.ipConfigurations));
            cli.output.verbose("================================================");
            if ((options.parse && options.ipConfigurations)) {
              options.ipConfigurations = JSON.parse(options.ipConfigurations); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.ipConfigurations },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC1 = catparametersUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC1 = parametersUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC1.category("network-interface-configurations").description($("Commands to configure network-interface-configurations of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC1.command("delete").description($("Remove network-interface-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkInterfaceConfigurations\" : {\r\n             \"name\":\"\",\r\n             \"primary\":null,\r\n             \"enableAcceleratedNetworking\":null,\r\n             \"networkSecurityGroup\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"dnsSettings\":{\r\n               \"dnsServers\":[\r\n                 \"\"\r\n               ]\r\n             },\r\n             \"ipConfigurations\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"subnet\":{\r\n                   \"id\":\"\"\r\n                 },\r\n                 \"primary\":null,\r\n                 \"publicIPAddressConfiguration\":{\r\n                   \"name\":\"\",\r\n                   \"idleTimeoutInMinutes\":null,\r\n                   \"dnsSettings\":{\r\n                     \"domainNameLabel\":\"\"\r\n                   }\r\n                 },\r\n                 \"privateIPAddressVersion\":\"\",\r\n                 \"applicationGatewayBackendAddressPools\":[\r\n                   {\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"loadBalancerBackendAddressPools\":[\r\n                   {\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"loadBalancerInboundNatPools\":[\r\n                   {\r\n                     \"id\":\"\"\r\n                   }\r\n                 ],\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--name", $("Remove the name value.")).option("--primary", $("Remove the primary value.")).option("--enable-accelerated-networking", $("Remove the enable-accelerated-networking value.")).option("--network-security-group", $("Remove the network-security-group value.")).option("--dns-settings", $("Remove the dns-settings value.")).option("--ip-configurations", $("Remove the ip-configurations value.")).option("--id", $("Remove the id value.")).execute(function __160(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__160", line: 12389 }; return __func(_, this, arguments, __160, 1, __frame, function __$__160() {












      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__160() { return (function __$__160(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__160() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((((((false || options.name) || options.primary) || options.enableAcceleratedNetworking) || options.networkSecurityGroup) || options.dnsSettings) || options.ipConfigurations) || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.primary) {
              subItemPath = (options.path + "/primary");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.enableAcceleratedNetworking) {
              subItemPath = (options.path + "/enableAcceleratedNetworking");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.networkSecurityGroup) {
              subItemPath = (options.path + "/networkSecurityGroup");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.dnsSettings) {
              subItemPath = (options.path + "/dnsSettings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.ipConfigurations) {
              subItemPath = (options.path + "/ipConfigurations");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsNetworkSecurityGroup0VMPnPnICICInSG1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsNetworkSecurityGroup0VMPnPnICICInSG1 = catparametersUpdateVirtualMachineScaleSetsNetworkSecurityGroup0VMPnPnICICInSG1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsNetworkSecurityGroup0VMPnPnICICInSG1 = parametersUpdateVirtualMachineScaleSetsNetworkSecurityGroup0VMPnPnICICInSG1.category("network-security-group").description($("Commands to configure network-security-group of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsNetworkSecurityGroup0VMPnPnICICInSG1.command("set").description($("Set network-security-group in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkSecurityGroup\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __161(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__161", line: 12463 }; return __func(_, this, arguments, __161, 1, __frame, function __$__161() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__161() { return (function __$__161(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__161() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/networkSecurityGroup");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsNetworkSecurityGroup1VMPnPnICICInSG1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsNetworkSecurityGroup1VMPnPnICICInSG1 = catparametersUpdateVirtualMachineScaleSetsNetworkSecurityGroup1VMPnPnICICInSG1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsNetworkSecurityGroup1VMPnPnICICInSG1 = parametersUpdateVirtualMachineScaleSetsNetworkSecurityGroup1VMPnPnICICInSG1.category("network-security-group").description($("Commands to configure network-security-group of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsNetworkSecurityGroup1VMPnPnICICInSG1.command("delete").description($("Remove network-security-group in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"networkSecurityGroup\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--id", $("Remove the id value.")).execute(function __162(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__162", line: 12516 }; return __func(_, this, arguments, __162, 1, __frame, function __$__162() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__162() { return (function __$__162(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__162() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/networkSecurityGroup");
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIdS1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIdS1 = catparametersUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIdS1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIdS1 = parametersUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIdS1.category("dns-settings").description($("Commands to configure dns-settings of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIdS1.command("set").description($("Set dns-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"dnsSettings\" : {\r\n             \"dnsServers\":[\r\n               \"\"\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--dns-servers <dnsServers>", $("Set the dns-servers value.")).execute(function __163(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__163", line: 12566 }; return __func(_, this, arguments, __163, 1, __frame, function __$__163() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__163() { return (function __$__163(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__163() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/dnsSettings");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "dnsServers");
          if (options.dnsServers) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.dnsServers));
            cli.output.verbose("================================================");
            if ((options.parse && options.dnsServers)) {
              options.dnsServers = JSON.parse(options.dnsServers); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.dnsServers },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIdS1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIdS1 = catparametersUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIdS1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIdS1 = parametersUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIdS1.category("dns-settings").description($("Commands to configure dns-settings of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIdS1.command("delete").description($("Remove dns-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"dnsSettings\" : {\r\n             \"dnsServers\":[\r\n               \"\"\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--dns-servers", $("Remove the dns-servers value.")).execute(function __164(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__164", line: 12619 }; return __func(_, this, arguments, __164, 1, __frame, function __$__164() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__164() { return (function __$__164(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__164() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/dnsSettings");
          anySubItem = (false || options.dnsServers);
          if (anySubItem) {
            subItemPath = null;
            if (options.dnsServers) {
              subItemPath = (options.path + "/dnsServers");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsDnsServers0VMPnPnICICIdSdS1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsDnsServers0VMPnPnICICIdSdS1 = catparametersUpdateVirtualMachineScaleSetsDnsServers0VMPnPnICICIdSdS1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsDnsServers0VMPnPnICICIdSdS1 = parametersUpdateVirtualMachineScaleSetsDnsServers0VMPnPnICICIdSdS1.category("dns-servers").description($("Commands to configure dns-servers of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsDnsServers0VMPnPnICICIdSdS1.command("set").description($("Set dns-servers in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"dnsServers\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).execute(function __165(options, _) { var fileContent, parametersObj, error, updatedContent; var __frame = { name: "__165", line: 12670 }; return __func(_, this, arguments, __165, 1, __frame, function __$__165() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__165() { return (function __$__165(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__165() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/dnsSettings/dnsServers") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsDnsServers1VMPnPnICICIdSdS1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsDnsServers1VMPnPnICICIdSdS1 = catparametersUpdateVirtualMachineScaleSetsDnsServers1VMPnPnICICIdSdS1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsDnsServers1VMPnPnICICIdSdS1 = parametersUpdateVirtualMachineScaleSetsDnsServers1VMPnPnICICIdSdS1.category("dns-servers").description($("Commands to configure dns-servers of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsDnsServers1VMPnPnICICIdSdS1.command("delete").description($("Remove dns-servers in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"dnsServers\" : \"\"\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).execute(function __166(options, _) { var fileContent, parametersObj, updatedContent; var __frame = { name: "__166", line: 12716 }; return __func(_, this, arguments, __166, 1, __frame, function __$__166() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__166() { return (function __$__166(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__166() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/dnsSettings/dnsServers") + ((options.index ? (("/" + options.index)) : "")));
          jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]);

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC1 = catparametersUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC1 = parametersUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC1.category("ip-configurations").description($("Commands to configure ip-configurations of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC1.command("set").description($("Set ip-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"ipConfigurations\" : {\r\n             \"name\":\"\",\r\n             \"subnet\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"primary\":null,\r\n             \"publicIPAddressConfiguration\":{\r\n               \"name\":\"\",\r\n               \"idleTimeoutInMinutes\":null,\r\n               \"dnsSettings\":{\r\n                 \"domainNameLabel\":\"\"\r\n               }\r\n             },\r\n             \"privateIPAddressVersion\":\"\",\r\n             \"applicationGatewayBackendAddressPools\":[\r\n               {\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"loadBalancerBackendAddressPools\":[\r\n               {\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"loadBalancerInboundNatPools\":[\r\n               {\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--subnet <subnet>", $("Set the subnet value.")).option("--primary <primary>", $("Set the primary value.")).option("--public-ip-address-configuration <publicIPAddressConfiguration>", $("Set the public-ip-address-configuration value.")).option("--private-ip-address-version <privateIPAddressVersion>", $("Set the private-ip-address-version value.")).option("--application-gateway-backend-address-pools <applicationGatewayBackendAddressPools>", $("Set the application-gateway-backend-address-pools value.")).option("--load-balancer-backend-address-pools <loadBalancerBackendAddressPools>", $("Set the load-balancer-backend-address-pools value.")).option("--load-balancer-inbound-nat-pools <loadBalancerInboundNatPools>", $("Set the load-balancer-inbound-nat-pools value.")).option("--id <id>", $("Set the id value.")).execute(function __167(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__167", line: 12766 }; return __func(_, this, arguments, __167, 1, __frame, function __$__167() {

















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__167() { return (function __$__167(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__167() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "subnet");
          if (options.subnet) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.subnet));
            cli.output.verbose("================================================");
            if ((options.parse && options.subnet)) {
              options.subnet = JSON.parse(options.subnet); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.subnet },]); } ;

          paramPath = ((options.path + "/") + "primary");
          if (options.primary) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.primary));
            cli.output.verbose("================================================");
            if ((options.parse && options.primary)) {
              options.primary = JSON.parse(options.primary); } ;

            options.primary = JSON.parse(options.primary);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.primary },]); } ;

          paramPath = ((options.path + "/") + "publicIPAddressConfiguration");
          if (options.publicIPAddressConfiguration) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publicIPAddressConfiguration));
            cli.output.verbose("================================================");
            if ((options.parse && options.publicIPAddressConfiguration)) {
              options.publicIPAddressConfiguration = JSON.parse(options.publicIPAddressConfiguration); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publicIPAddressConfiguration },]); } ;

          paramPath = ((options.path + "/") + "privateIPAddressVersion");
          if (options.privateIPAddressVersion) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.privateIPAddressVersion));
            cli.output.verbose("================================================");
            if ((options.parse && options.privateIPAddressVersion)) {
              options.privateIPAddressVersion = JSON.parse(options.privateIPAddressVersion); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.privateIPAddressVersion },]); } ;

          paramPath = ((options.path + "/") + "applicationGatewayBackendAddressPools");
          if (options.applicationGatewayBackendAddressPools) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.applicationGatewayBackendAddressPools));
            cli.output.verbose("================================================");
            if ((options.parse && options.applicationGatewayBackendAddressPools)) {
              options.applicationGatewayBackendAddressPools = JSON.parse(options.applicationGatewayBackendAddressPools); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.applicationGatewayBackendAddressPools },]); } ;

          paramPath = ((options.path + "/") + "loadBalancerBackendAddressPools");
          if (options.loadBalancerBackendAddressPools) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.loadBalancerBackendAddressPools));
            cli.output.verbose("================================================");
            if ((options.parse && options.loadBalancerBackendAddressPools)) {
              options.loadBalancerBackendAddressPools = JSON.parse(options.loadBalancerBackendAddressPools); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.loadBalancerBackendAddressPools },]); } ;

          paramPath = ((options.path + "/") + "loadBalancerInboundNatPools");
          if (options.loadBalancerInboundNatPools) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.loadBalancerInboundNatPools));
            cli.output.verbose("================================================");
            if ((options.parse && options.loadBalancerInboundNatPools)) {
              options.loadBalancerInboundNatPools = JSON.parse(options.loadBalancerInboundNatPools); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.loadBalancerInboundNatPools },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC1 = catparametersUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC1 = parametersUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC1.category("ip-configurations").description($("Commands to configure ip-configurations of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC1.command("delete").description($("Remove ip-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"ipConfigurations\" : {\r\n             \"name\":\"\",\r\n             \"subnet\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"primary\":null,\r\n             \"publicIPAddressConfiguration\":{\r\n               \"name\":\"\",\r\n               \"idleTimeoutInMinutes\":null,\r\n               \"dnsSettings\":{\r\n                 \"domainNameLabel\":\"\"\r\n               }\r\n             },\r\n             \"privateIPAddressVersion\":\"\",\r\n             \"applicationGatewayBackendAddressPools\":[\r\n               {\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"loadBalancerBackendAddressPools\":[\r\n               {\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"loadBalancerInboundNatPools\":[\r\n               {\r\n                 \"id\":\"\"\r\n               }\r\n             ],\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--name", $("Remove the name value.")).option("--subnet", $("Remove the subnet value.")).option("--primary", $("Remove the primary value.")).option("--public-ip-address-configuration", $("Remove the public-ip-address-configuration value.")).option("--private-ip-address-version", $("Remove the private-ip-address-version value.")).option("--application-gateway-backend-address-pools", $("Remove the application-gateway-backend-address-pools value.")).option("--load-balancer-backend-address-pools", $("Remove the load-balancer-backend-address-pools value.")).option("--load-balancer-inbound-nat-pools", $("Remove the load-balancer-inbound-nat-pools value.")).option("--id", $("Remove the id value.")).execute(function __168(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__168", line: 12921 }; return __func(_, this, arguments, __168, 1, __frame, function __$__168() {















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__168() { return (function __$__168(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__168() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (((((((((false || options.name) || options.subnet) || options.primary) || options.publicIPAddressConfiguration) || options.privateIPAddressVersion) || options.applicationGatewayBackendAddressPools) || options.loadBalancerBackendAddressPools) || options.loadBalancerInboundNatPools) || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.subnet) {
              subItemPath = (options.path + "/subnet");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.primary) {
              subItemPath = (options.path + "/primary");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.publicIPAddressConfiguration) {
              subItemPath = (options.path + "/publicIPAddressConfiguration");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.privateIPAddressVersion) {
              subItemPath = (options.path + "/privateIPAddressVersion");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.applicationGatewayBackendAddressPools) {
              subItemPath = (options.path + "/applicationGatewayBackendAddressPools");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.loadBalancerBackendAddressPools) {
              subItemPath = (options.path + "/loadBalancerBackendAddressPools");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.loadBalancerInboundNatPools) {
              subItemPath = (options.path + "/loadBalancerInboundNatPools");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs1 = catparametersUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs1 = parametersUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs1.category("subnet").description($("Commands to configure subnet of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs1.command("set").description($("Set subnet in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"subnet\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __169(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__169", line: 13004 }; return __func(_, this, arguments, __169, 1, __frame, function __$__169() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__169() { return (function __$__169(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__169() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/subnet");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs1 = catparametersUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs1 = parametersUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs1.category("subnet").description($("Commands to configure subnet of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs1.command("delete").description($("Remove subnet in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"subnet\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--id", $("Remove the id value.")).execute(function __170(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__170", line: 13058 }; return __func(_, this, arguments, __170, 1, __frame, function __$__170() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__170() { return (function __$__170(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__170() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/subnet");
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration0VMPnPnICICIiCCIpIPAC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration0VMPnPnICICIiCCIpIPAC1 = catparametersUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration0VMPnPnICICIiCCIpIPAC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration0VMPnPnICICIiCCIpIPAC1 = parametersUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration0VMPnPnICICIiCCIpIPAC1.category("public-ip-address-configuration").description($("Commands to configure public-ip-address-configuration of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration0VMPnPnICICIiCCIpIPAC1.command("set").description($("Set public-ip-address-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"publicIPAddressConfiguration\" : {\r\n             \"name\":\"\",\r\n             \"idleTimeoutInMinutes\":null,\r\n             \"dnsSettings\":{\r\n               \"domainNameLabel\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--idle-timeout-in-minutes <idleTimeoutInMinutes>", $("Set the idle-timeout-in-minutes value.")).option("--dns-settings <dnsSettings>", $("Set the dns-settings value.")).execute(function __171(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__171", line: 13111 }; return __func(_, this, arguments, __171, 1, __frame, function __$__171() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__171() { return (function __$__171(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__171() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/publicIPAddressConfiguration");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "idleTimeoutInMinutes");
          if (options.idleTimeoutInMinutes) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.idleTimeoutInMinutes));
            cli.output.verbose("================================================");
            if ((options.parse && options.idleTimeoutInMinutes)) {
              options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes },]); } ;

          paramPath = ((options.path + "/") + "dnsSettings");
          if (options.dnsSettings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.dnsSettings));
            cli.output.verbose("================================================");
            if ((options.parse && options.dnsSettings)) {
              options.dnsSettings = JSON.parse(options.dnsSettings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.dnsSettings },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration1VMPnPnICICIiCCIpIPAC1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration1VMPnPnICICIiCCIpIPAC1 = catparametersUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration1VMPnPnICICIiCCIpIPAC1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration1VMPnPnICICIiCCIpIPAC1 = parametersUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration1VMPnPnICICIiCCIpIPAC1.category("public-ip-address-configuration").description($("Commands to configure public-ip-address-configuration of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsPublicIPAddressConfiguration1VMPnPnICICIiCCIpIPAC1.command("delete").description($("Remove public-ip-address-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"publicIPAddressConfiguration\" : {\r\n             \"name\":\"\",\r\n             \"idleTimeoutInMinutes\":null,\r\n             \"dnsSettings\":{\r\n               \"domainNameLabel\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--name", $("Remove the name value.")).option("--idle-timeout-in-minutes", $("Remove the idle-timeout-in-minutes value.")).option("--dns-settings", $("Remove the dns-settings value.")).execute(function __172(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__172", line: 13189 }; return __func(_, this, arguments, __172, 1, __frame, function __$__172() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__172() { return (function __$__172(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__172() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/publicIPAddressConfiguration");
          anySubItem = (((false || options.name) || options.idleTimeoutInMinutes) || options.dnsSettings);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.idleTimeoutInMinutes) {
              subItemPath = (options.path + "/idleTimeoutInMinutes");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.dnsSettings) {
              subItemPath = (options.path + "/dnsSettings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIiCCIpIPACdS1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIiCCIpIPACdS1 = catparametersUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIiCCIpIPACdS1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIiCCIpIPACdS1 = parametersUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIiCCIpIPACdS1.category("public-ip-address-configuration-dns-settings").description($("Commands to configure public-ip-address-configuration-dns-settings of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsDnsSettings0VMPnPnICICIiCCIpIPACdS1.command("set").description($("Set public-ip-address-configuration-dns-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"dnsSettings\" : {\r\n             \"domainNameLabel\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--domain-name-label <domainNameLabel>", $("Set the domain-name-label value.")).execute(function __173(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__173", line: 13248 }; return __func(_, this, arguments, __173, 1, __frame, function __$__173() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__173() { return (function __$__173(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__173() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = (((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/publicIPAddressConfiguration/dnsSettings");
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "domainNameLabel");
          if (options.domainNameLabel) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.domainNameLabel));
            cli.output.verbose("================================================");
            if ((options.parse && options.domainNameLabel)) {
              options.domainNameLabel = JSON.parse(options.domainNameLabel); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.domainNameLabel },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIiCCIpIPACdS1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIiCCIpIPACdS1 = catparametersUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIiCCIpIPACdS1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIiCCIpIPACdS1 = parametersUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIiCCIpIPACdS1.category("public-ip-address-configuration-dns-settings").description($("Commands to configure public-ip-address-configuration-dns-settings of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsDnsSettings1VMPnPnICICIiCCIpIPACdS1.command("delete").description($("Remove public-ip-address-configuration-dns-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"dnsSettings\" : {\r\n             \"domainNameLabel\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--domain-name-label", $("Remove the domain-name-label value.")).execute(function __174(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__174", line: 13302 }; return __func(_, this, arguments, __174, 1, __frame, function __$__174() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__174() { return (function __$__174(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__174() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = (((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/publicIPAddressConfiguration/dnsSettings");
          anySubItem = (false || options.domainNameLabel);
          if (anySubItem) {
            subItemPath = null;
            if (options.domainNameLabel) {
              subItemPath = (options.path + "/domainNameLabel");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP1 = catparametersUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP1 = parametersUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP1.category("application-gateway-backend-address-pools").description($("Commands to configure application-gateway-backend-address-pools of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP1.command("set").description($("Set application-gateway-backend-address-pools in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"applicationGatewayBackendAddressPools\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __175(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__175", line: 13355 }; return __func(_, this, arguments, __175, 1, __frame, function __$__175() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__175() { return (function __$__175(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__175() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/applicationGatewayBackendAddressPools") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP1 = catparametersUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP1 = parametersUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP1.category("application-gateway-backend-address-pools").description($("Commands to configure application-gateway-backend-address-pools of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP1.command("delete").description($("Remove application-gateway-backend-address-pools in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"applicationGatewayBackendAddressPools\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--id", $("Remove the id value.")).execute(function __176(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__176", line: 13414 }; return __func(_, this, arguments, __176, 1, __frame, function __$__176() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__176() { return (function __$__176(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__176() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/applicationGatewayBackendAddressPools") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP1 = catparametersUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP1 = parametersUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP1.category("load-balancer-backend-address-pools").description($("Commands to configure load-balancer-backend-address-pools of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP1.command("set").description($("Set load-balancer-backend-address-pools in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"loadBalancerBackendAddressPools\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __177(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__177", line: 13467 }; return __func(_, this, arguments, __177, 1, __frame, function __$__177() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__177() { return (function __$__177(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__177() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/loadBalancerBackendAddressPools") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP1 = catparametersUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP1 = parametersUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP1.category("load-balancer-backend-address-pools").description($("Commands to configure load-balancer-backend-address-pools of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP1.command("delete").description($("Remove load-balancer-backend-address-pools in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"loadBalancerBackendAddressPools\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--id", $("Remove the id value.")).execute(function __178(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__178", line: 13526 }; return __func(_, this, arguments, __178, 1, __frame, function __$__178() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__178() { return (function __$__178(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__178() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/loadBalancerBackendAddressPools") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP1 = catparametersUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP1 = parametersUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP1.category("load-balancer-inbound-nat-pools").description($("Commands to configure load-balancer-inbound-nat-pools of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP1.command("set").description($("Set load-balancer-inbound-nat-pools in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"loadBalancerInboundNatPools\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __179(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__179", line: 13579 }; return __func(_, this, arguments, __179, 1, __frame, function __$__179() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__179() { return (function __$__179(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__179() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ((((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/loadBalancerInboundNatPools") + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP1 = catparametersUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP1 = parametersUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP1.category("load-balancer-inbound-nat-pools").description($("Commands to configure load-balancer-inbound-nat-pools of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP1.command("delete").description($("Remove load-balancer-inbound-nat-pools in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"loadBalancerInboundNatPools\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--ip-configurations-index <ip-configurations-index>", $("Indexer: ip-configurations-index.")).option("--network-interface-configurations-index <network-interface-configurations-index>", $("Indexer: network-interface-configurations-index.")).option("--id", $("Remove the id value.")).execute(function __180(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__180", line: 13638 }; return __func(_, this, arguments, __180, 1, __frame, function __$__180() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__180() { return (function __$__180(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__180() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ((((("/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/" + options.networkInterfaceConfigurationsIndex) + "/ipConfigurations/") + options.ipConfigurationsIndex) + "/loadBalancerInboundNatPools") + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsDiagnosticsProfile0VMPdP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsDiagnosticsProfile0VMPdP1 = catparametersUpdateVirtualMachineScaleSetsDiagnosticsProfile0VMPdP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsDiagnosticsProfile0VMPdP1 = parametersUpdateVirtualMachineScaleSetsDiagnosticsProfile0VMPdP1.category("diagnostics-profile").description($("Commands to configure diagnostics-profile of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsDiagnosticsProfile0VMPdP1.command("set").description($("Set diagnostics-profile in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"diagnosticsProfile\" : {\r\n             \"bootDiagnostics\":{\r\n               \"enabled\":null,\r\n               \"storageUri\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--boot-diagnostics <bootDiagnostics>", $("Set the boot-diagnostics value.")).execute(function __181(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__181", line: 13687 }; return __func(_, this, arguments, __181, 1, __frame, function __$__181() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__181() { return (function __$__181(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__181() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/diagnosticsProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "bootDiagnostics");
          if (options.bootDiagnostics) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.bootDiagnostics));
            cli.output.verbose("================================================");
            if ((options.parse && options.bootDiagnostics)) {
              options.bootDiagnostics = JSON.parse(options.bootDiagnostics); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.bootDiagnostics },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsDiagnosticsProfile1VMPdP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsDiagnosticsProfile1VMPdP1 = catparametersUpdateVirtualMachineScaleSetsDiagnosticsProfile1VMPdP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsDiagnosticsProfile1VMPdP1 = parametersUpdateVirtualMachineScaleSetsDiagnosticsProfile1VMPdP1.category("diagnostics-profile").description($("Commands to configure diagnostics-profile of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsDiagnosticsProfile1VMPdP1.command("delete").description($("Remove diagnostics-profile in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"diagnosticsProfile\" : {\r\n             \"bootDiagnostics\":{\r\n               \"enabled\":null,\r\n               \"storageUri\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--boot-diagnostics", $("Remove the boot-diagnostics value.")).execute(function __182(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__182", line: 13739 }; return __func(_, this, arguments, __182, 1, __frame, function __$__182() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__182() { return (function __$__182(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__182() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/diagnosticsProfile";
          anySubItem = (false || options.bootDiagnostics);
          if (anySubItem) {
            subItemPath = null;
            if (options.bootDiagnostics) {
              subItemPath = (options.path + "/bootDiagnostics");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsBootDiagnostics0VMPdPbD1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsBootDiagnostics0VMPdPbD1 = catparametersUpdateVirtualMachineScaleSetsBootDiagnostics0VMPdPbD1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsBootDiagnostics0VMPdPbD1 = parametersUpdateVirtualMachineScaleSetsBootDiagnostics0VMPdPbD1.category("boot-diagnostics").description($("Commands to configure boot-diagnostics of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsBootDiagnostics0VMPdPbD1.command("set").description($("Set boot-diagnostics in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"bootDiagnostics\" : {\r\n             \"enabled\":null,\r\n             \"storageUri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--enabled <enabled>", $("Set the enabled value.")).option("--storage-uri <storageUri>", $("Set the storage-uri value.")).execute(function __183(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__183", line: 13789 }; return __func(_, this, arguments, __183, 1, __frame, function __$__183() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__183() { return (function __$__183(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__183() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/diagnosticsProfile/bootDiagnostics";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "enabled");
          if (options.enabled) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.enabled));
            cli.output.verbose("================================================");
            if ((options.parse && options.enabled)) {
              options.enabled = JSON.parse(options.enabled); } ;

            options.enabled = JSON.parse(options.enabled);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.enabled },]); } ;

          paramPath = ((options.path + "/") + "storageUri");
          if (options.storageUri) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageUri));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageUri)) {
              options.storageUri = JSON.parse(options.storageUri); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageUri },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsBootDiagnostics1VMPdPbD1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsBootDiagnostics1VMPdPbD1 = catparametersUpdateVirtualMachineScaleSetsBootDiagnostics1VMPdPbD1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsBootDiagnostics1VMPdPbD1 = parametersUpdateVirtualMachineScaleSetsBootDiagnostics1VMPdPbD1.category("boot-diagnostics").description($("Commands to configure boot-diagnostics of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsBootDiagnostics1VMPdPbD1.command("delete").description($("Remove boot-diagnostics in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"bootDiagnostics\" : {\r\n             \"enabled\":null,\r\n             \"storageUri\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--enabled", $("Remove the enabled value.")).option("--storage-uri", $("Remove the storage-uri value.")).execute(function __184(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__184", line: 13854 }; return __func(_, this, arguments, __184, 1, __frame, function __$__184() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__184() { return (function __$__184(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__184() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/diagnosticsProfile/bootDiagnostics";
          anySubItem = ((false || options.enabled) || options.storageUri);
          if (anySubItem) {
            subItemPath = null;
            if (options.enabled) {
              subItemPath = (options.path + "/enabled");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.storageUri) {
              subItemPath = (options.path + "/storageUri");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP1 = catparametersUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP1 = parametersUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP1.category("extension-profile").description($("Commands to configure extension-profile of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP1.command("set").description($("Set extension-profile in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"extensionProfile\" : {\r\n             \"extensions\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"forceUpdateTag\":\"\",\r\n                 \"publisher\":\"\",\r\n                 \"type\":\"\",\r\n                 \"typeHandlerVersion\":\"\",\r\n                 \"autoUpgradeMinorVersion\":null,\r\n                 \"settings\":{\r\n                 },\r\n                 \"protectedSettings\":{\r\n                 },\r\n                 \"provisioningState\":\"\",\r\n                 \"id\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--extensions <extensions>", $("Set the extensions value.")).execute(function __185(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__185", line: 13907 }; return __func(_, this, arguments, __185, 1, __frame, function __$__185() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__185() { return (function __$__185(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__185() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/virtualMachineProfile/extensionProfile";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "extensions");
          if (options.extensions) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.extensions));
            cli.output.verbose("================================================");
            if ((options.parse && options.extensions)) {
              options.extensions = JSON.parse(options.extensions); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.extensions },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP1 = catparametersUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP1 = parametersUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP1.category("extension-profile").description($("Commands to configure extension-profile of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP1.command("delete").description($("Remove extension-profile in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"extensionProfile\" : {\r\n             \"extensions\":[\r\n               {\r\n                 \"name\":\"\",\r\n                 \"forceUpdateTag\":\"\",\r\n                 \"publisher\":\"\",\r\n                 \"type\":\"\",\r\n                 \"typeHandlerVersion\":\"\",\r\n                 \"autoUpgradeMinorVersion\":null,\r\n                 \"settings\":{\r\n                 },\r\n                 \"protectedSettings\":{\r\n                 },\r\n                 \"provisioningState\":\"\",\r\n                 \"id\":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--extensions", $("Remove the extensions value.")).execute(function __186(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__186", line: 13959 }; return __func(_, this, arguments, __186, 1, __frame, function __$__186() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__186() { return (function __$__186(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__186() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/virtualMachineProfile/extensionProfile";
          anySubItem = (false || options.extensions);
          if (anySubItem) {
            subItemPath = null;
            if (options.extensions) {
              subItemPath = (options.path + "/extensions");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsExtensions0VMPePe1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsExtensions0VMPePe1 = catparametersUpdateVirtualMachineScaleSetsExtensions0VMPePe1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsExtensions0VMPePe1 = parametersUpdateVirtualMachineScaleSetsExtensions0VMPePe1.category("extensions").description($("Commands to configure extensions of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsExtensions0VMPePe1.command("set").description($("Set extensions in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"extensions\" : {\r\n             \"name\":\"\",\r\n             \"forceUpdateTag\":\"\",\r\n             \"publisher\":\"\",\r\n             \"type\":\"\",\r\n             \"typeHandlerVersion\":\"\",\r\n             \"autoUpgradeMinorVersion\":null,\r\n             \"settings\":{\r\n             },\r\n             \"protectedSettings\":{\r\n             },\r\n             \"provisioningState\":\"\",\r\n             \"id\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--value <value>", $("The input string value for the indexed item.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--force-update-tag <forceUpdateTag>", $("Set the force-update-tag value.")).option("--publisher <publisher>", $("Set the publisher value.")).option("--type <type>", $("Set the type value.")).option("--type-handler-version <typeHandlerVersion>", $("Set the type-handler-version value.")).option("--auto-upgrade-minor-version <autoUpgradeMinorVersion>", $("Set the auto-upgrade-minor-version value.")).option("--settings <settings>", $("Set the settings value.")).option("--protected-settings <protectedSettings>", $("Set the protected-settings value.")).option("--provisioning-state <provisioningState>", $("Set the provisioning-state value.")).option("--id <id>", $("Set the id value.")).execute(function __187(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__187", line: 14019 }; return __func(_, this, arguments, __187, 1, __frame, function __$__187() {

















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__187() { return (function __$__187(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__187() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = ("/virtualMachineProfile/extensionProfile/extensions" + ((options.index ? (("/" + options.index)) : "")));
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          if (options.value) {
            cli.output.verbose(options.value);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path, value: options.value },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "forceUpdateTag");
          if (options.forceUpdateTag) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.forceUpdateTag));
            cli.output.verbose("================================================");
            if ((options.parse && options.forceUpdateTag)) {
              options.forceUpdateTag = JSON.parse(options.forceUpdateTag); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.forceUpdateTag },]); } ;

          paramPath = ((options.path + "/") + "publisher");
          if (options.publisher) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.publisher));
            cli.output.verbose("================================================");
            if ((options.parse && options.publisher)) {
              options.publisher = JSON.parse(options.publisher); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.publisher },]); } ;

          paramPath = ((options.path + "/") + "type");
          if (options.type) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.type));
            cli.output.verbose("================================================");
            if ((options.parse && options.type)) {
              options.type = JSON.parse(options.type); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.type },]); } ;

          paramPath = ((options.path + "/") + "typeHandlerVersion");
          if (options.typeHandlerVersion) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.typeHandlerVersion));
            cli.output.verbose("================================================");
            if ((options.parse && options.typeHandlerVersion)) {
              options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.typeHandlerVersion },]); } ;

          paramPath = ((options.path + "/") + "autoUpgradeMinorVersion");
          if (options.autoUpgradeMinorVersion) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.autoUpgradeMinorVersion));
            cli.output.verbose("================================================");
            if ((options.parse && options.autoUpgradeMinorVersion)) {
              options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion); } ;

            options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.autoUpgradeMinorVersion },]); } ;

          paramPath = ((options.path + "/") + "settings");
          if (options.settings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.settings));
            cli.output.verbose("================================================");
            if ((options.parse && options.settings)) {
              options.settings = JSON.parse(options.settings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.settings },]); } ;

          paramPath = ((options.path + "/") + "protectedSettings");
          if (options.protectedSettings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.protectedSettings));
            cli.output.verbose("================================================");
            if ((options.parse && options.protectedSettings)) {
              options.protectedSettings = JSON.parse(options.protectedSettings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.protectedSettings },]); } ;

          paramPath = ((options.path + "/") + "provisioningState");
          if (options.provisioningState) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.provisioningState));
            cli.output.verbose("================================================");
            if ((options.parse && options.provisioningState)) {
              options.provisioningState = JSON.parse(options.provisioningState); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.provisioningState },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsExtensions1VMPePe1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsExtensions1VMPePe1 = catparametersUpdateVirtualMachineScaleSetsExtensions1VMPePe1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsExtensions1VMPePe1 = parametersUpdateVirtualMachineScaleSetsExtensions1VMPePe1.category("extensions").description($("Commands to configure extensions of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsExtensions1VMPePe1.command("delete").description($("Remove extensions in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"extensions\" : {\r\n             \"name\":\"\",\r\n             \"forceUpdateTag\":\"\",\r\n             \"publisher\":\"\",\r\n             \"type\":\"\",\r\n             \"typeHandlerVersion\":\"\",\r\n             \"autoUpgradeMinorVersion\":null,\r\n             \"settings\":{\r\n             },\r\n             \"protectedSettings\":{\r\n             },\r\n             \"provisioningState\":\"\",\r\n             \"id\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--index <index>", $("Indexer: index.")).option("--name", $("Remove the name value.")).option("--force-update-tag", $("Remove the force-update-tag value.")).option("--publisher", $("Remove the publisher value.")).option("--type", $("Remove the type value.")).option("--type-handler-version", $("Remove the type-handler-version value.")).option("--auto-upgrade-minor-version", $("Remove the auto-upgrade-minor-version value.")).option("--settings", $("Remove the settings value.")).option("--protected-settings", $("Remove the protected-settings value.")).option("--provisioning-state", $("Remove the provisioning-state value.")).option("--id", $("Remove the id value.")).execute(function __188(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__188", line: 14185 }; return __func(_, this, arguments, __188, 1, __frame, function __$__188() {















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__188() { return (function __$__188(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__188() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = ("/virtualMachineProfile/extensionProfile/extensions" + ((options.index ? (("/" + options.index)) : "")));
          anySubItem = ((((((((((false || options.name) || options.forceUpdateTag) || options.publisher) || options.type) || options.typeHandlerVersion) || options.autoUpgradeMinorVersion) || options.settings) || options.protectedSettings) || options.provisioningState) || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.forceUpdateTag) {
              subItemPath = (options.path + "/forceUpdateTag");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.publisher) {
              subItemPath = (options.path + "/publisher");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.type) {
              subItemPath = (options.path + "/type");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.typeHandlerVersion) {
              subItemPath = (options.path + "/typeHandlerVersion");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.autoUpgradeMinorVersion) {
              subItemPath = (options.path + "/autoUpgradeMinorVersion");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.settings) {
              subItemPath = (options.path + "/settings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.protectedSettings) {
              subItemPath = (options.path + "/protectedSettings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.provisioningState) {
              subItemPath = (options.path + "/provisioningState");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateVirtualMachineScaleSetsIdentity0I1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsIdentity0I1 = catparametersUpdateVirtualMachineScaleSetsIdentity0I1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var setparametersUpdateVirtualMachineScaleSetsIdentity0I1 = parametersUpdateVirtualMachineScaleSetsIdentity0I1.category("identity").description($("Commands to configure identity of vmss in update-parameters file."));

  setparametersUpdateVirtualMachineScaleSetsIdentity0I1.command("set").description($("Set identity in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"identity\" : {\r\n             \"principalId\":\"\",\r\n             \"tenantId\":\"\",\r\n             \"type\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--principal-id <principalId>", $("Set the principal-id value.")).option("--tenant-id <tenantId>", $("Set the tenant-id value.")).option("--type <type>", $("Set the type value.")).execute(function __189(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__189", line: 14272 }; return __func(_, this, arguments, __189, 1, __frame, function __$__189() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__189() { return (function __$__189(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__189() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/identity";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "principalId");
          if (options.principalId) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.principalId));
            cli.output.verbose("================================================");
            if ((options.parse && options.principalId)) {
              options.principalId = JSON.parse(options.principalId); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.principalId },]); } ;

          paramPath = ((options.path + "/") + "tenantId");
          if (options.tenantId) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tenantId));
            cli.output.verbose("================================================");
            if ((options.parse && options.tenantId)) {
              options.tenantId = JSON.parse(options.tenantId); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tenantId },]); } ;

          paramPath = ((options.path + "/") + "type");
          if (options.type) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.type));
            cli.output.verbose("================================================");
            if ((options.parse && options.type)) {
              options.type = JSON.parse(options.type); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.type },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateVirtualMachineScaleSetsIdentity1I1 = cli.category("vmss");
  var parametersUpdateVirtualMachineScaleSetsIdentity1I1 = catparametersUpdateVirtualMachineScaleSetsIdentity1I1.category("update-parameters").description($("Commands to manage configuration of virtual-machine-scale-sets in the parameter file."));

  var deleteparametersUpdateVirtualMachineScaleSetsIdentity1I1 = parametersUpdateVirtualMachineScaleSetsIdentity1I1.category("identity").description($("Commands to configure identity of vmss in update-parameters file."));

  deleteparametersUpdateVirtualMachineScaleSetsIdentity1I1.command("delete").description($("Remove identity in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"identity\" : {\r\n             \"principalId\":\"\",\r\n             \"tenantId\":\"\",\r\n             \"type\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--principal-id", $("Remove the principal-id value.")).option("--tenant-id", $("Remove the tenant-id value.")).option("--type", $("Remove the type value.")).execute(function __190(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__190", line: 14348 }; return __func(_, this, arguments, __190, 1, __frame, function __$__190() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__190() { return (function __$__190(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__190() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/identity";
          anySubItem = (((false || options.principalId) || options.tenantId) || options.type);
          if (anySubItem) {
            subItemPath = null;
            if (options.principalId) {
              subItemPath = (options.path + "/principalId");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tenantId) {
              subItemPath = (options.path + "/tenantId");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.type) {
              subItemPath = (options.path + "/type");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });








  var virtualMachineScaleSetsUpdateInstances = cli.category("vmss").description($("Commands to manage your virtual machine scale sets.  "));

  virtualMachineScaleSetsUpdateInstances.command("update-instances [resource-group] [name] [instance-ids]").description($("Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.")).usage("[options] <resource-group> <name> <instance-ids>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("--instance-ids <instance-ids>", $("instance-ids")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __191(resourceGroup, name, instanceIds, options, _) { var instanceIdsObj, fileContent, instanceIdsValArr, item, subscription, computeManagementClient, result; var __frame = { name: "__191", line: 14409 }; return __func(_, this, arguments, __191, 4, __frame, function __$__191() { return (function __$__191(__then) {







        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__191() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__191(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__191() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("instanceIds = " + instanceIds));
          instanceIdsObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            instanceIdsObj = JSON.parse(fileContent); }

           else {
            instanceIdsValArr = (instanceIds ? instanceIds.split(",") : []);
            cli.output.verbose(("instanceIds : " + instanceIdsValArr));
            instanceIdsObj = [];
            for (item in instanceIdsValArr) {
              instanceIdsObj.push(instanceIdsValArr[item]); }; } ;


          cli.output.verbose(("instanceIdsObj = " + JSON.stringify(instanceIdsObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.virtualMachineScaleSets.updateInstances(resourceGroup, name, instanceIdsObj, __cb(_, __frame, 29, 65, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });};
