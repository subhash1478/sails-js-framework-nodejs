/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; var fs = require("fs");








































































































































































































































































































var jsonpatch = require("fast-json-patch");

var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;
function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);};

function capitalize(str) {
  if ((str && (str.length >= 1))) {
    return (str.charAt(0).toUpperCase() + str.slice(1)); }

   else {
    return str; } ;};



function makeTuple(k, v, d) {
  return { key: k, value: v, depth: d };};


function displayImpl(o, key, depth, arr) {
  if (((!!o) && (((o.constructor === Object) || (o.constructor === Array))))) {
    arr.push(makeTuple(key, "", depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = ((o.constructor === Array) ? "#" : "");
      var w = displayImpl(v1, (p1 + k1), (depth + 1), arr);
      if ((w > len)) {
        len = w; } ; });


    return len; }

   else {
    arr.push(makeTuple(key, (o ? o.toString() : ""), depth));
    return ((depth * 2) + ((key ? key.toString().length : 0))); } ;};



function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, "", 0, arr);
  for (var t in arr) {
    var prebuf = new Array((arr[t].depth * 2)).join(" ");
    var key = (arr[t].key ? arr[t].key : "");
    var postLen = (width - ((prebuf.length + key.length)));
    var postbuf = new Array(((postLen > 0) ? postLen : 0)).join(" ");
    var str = ((prebuf + capitalize(key)) + postbuf);
    if (arr[t].value) {
      str += (" : " + arr[t].value); } ;

    cli.output.data(str); };};


exports.init = function(cli) {




















































  var snapshotsCreateOrUpdate = cli.category("managed-snapshot").description($("Commands to manage your snapshots.  "));

  snapshotsCreateOrUpdate.command("create [resource-group] [name] [snapshot]").description($("Creates or updates a snapshot.")).usage("[options] <resource-group> <name> <snapshot>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("--snapshot <snapshot>", $("A string of parameters in JSON format")).option("--parameter-file <parameter-file>", $("The text file that contains input parameter object in JSON format")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __1(resourceGroup, name, snapshot, options, _) { var snapshotObj, fileContent, subscription, computeManagementClient, result; var __frame = { name: "__1", line: 419 }; return __func(_, this, arguments, __1, 4, __frame, function __$__1() { return (function __$__1(__then) {








        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__1() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__1(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__1() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("snapshot = " + snapshot));
          snapshotObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            snapshotObj = JSON.parse(fileContent); }

           else {
            snapshotObj = JSON.parse(snapshot); } ;

          cli.output.verbose(("snapshotObj = " + JSON.stringify(snapshotObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.snapshots.createOrUpdate(resourceGroup, name, snapshotObj, __cb(_, __frame, 24, 51, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });


  var snapshotsCreateOrUpdatecreateOrUpdateParameters2 = snapshotsCreateOrUpdate.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  snapshotsCreateOrUpdatecreateOrUpdateParameters2.command("create").description($("Generate snapshotsCreateOrUpdate parameter string or files.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).execute(function __2(options, _) { var filePath; var __frame = { name: "__2", line: 454 }; return __func(_, this, arguments, __2, 1, __frame, function __$__2() {




      return cli.output.verbose("{\"managedBy\":\"\",\"sku\":{\"name\":null,\"tier\":\"\"},\"timeCreated\":null,\"osType\":null,\"creationData\":{\"createOption\":\"\",\"storageAccountId\":\"\",\"imageReference\":{\"id\":\"\",\"lun\":null},\"sourceUri\":\"\",\"sourceResourceId\":\"\"},\"diskSizeGB\":null,\"encryptionSettings\":{\"enabled\":null,\"diskEncryptionKey\":{\"sourceVault\":{\"id\":\"\"},\"secretUrl\":\"\"},\"keyEncryptionKey\":{\"sourceVault\":{\"id\":\"\"},\"keyUrl\":\"\"}},\"provisioningState\":\"\",\"id\":null,\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}", __cb(_, __frame, 1, 15, function __$__2() {
        filePath = "snapshotsCreateOrUpdate_createOrUpdate.json";
        if (options.parameterFile) {
          filePath = options.parameterFile; } ;

        fs.writeFileSync(filePath, beautify("{\r\n\"managedBy\":\"\",\r\n\"sku\":{\r\n\"name\":null,\r\n\"tier\":\"\"\r\n},\r\n\"timeCreated\":null,\r\n\"osType\":null,\r\n\"creationData\":{\r\n\"createOption\":\"\",\r\n\"storageAccountId\":\"\",\r\n\"imageReference\":{\r\n\"id\":\"\",\r\n\"lun\":null\r\n},\r\n\"sourceUri\":\"\",\r\n\"sourceResourceId\":\"\"\r\n},\r\n\"diskSizeGB\":null,\r\n\"encryptionSettings\":{\r\n\"enabled\":null,\r\n\"diskEncryptionKey\":{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"secretUrl\":\"\"\r\n},\r\n\"keyEncryptionKey\":{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"keyUrl\":\"\"\r\n}\r\n},\r\n\"provisioningState\":\"\",\r\n\"id\":null,\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}"));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file output to: " + filePath));
        cli.output.verbose("====================================="); _(); }, true)); }); });


  snapshotsCreateOrUpdatecreateOrUpdateParameters2.command("patch").description($("Command to patch snapshotsCreateOrUpdate parameter JSON file.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--operation <operation>", $("The JSON patch operation: add, remove, or replace.")).option("--path <path>", $("The JSON data path, e.g.: \"foo/1\".")).option("--value <value>", $("The JSON value.")).option("--parse", $("Parse the JSON value to object.")).execute(function __3(options, _) { var fileContent, snapshotObj, updatedContent; var __frame = { name: "__3", line: 474 }; return __func(_, this, arguments, __3, 1, __frame, function __$__3() {








      return cli.output.verbose(options.parameterFile, __cb(_, __frame, 1, 15, function __$__3() {
        cli.output.verbose(options.operation);
        cli.output.verbose(options.path);
        cli.output.verbose(options.value);
        cli.output.verbose(options.parse);
        if (options.parse) {
          options.value = JSON.parse(options.value); } ;

        cli.output.verbose(options.value);
        cli.output.verbose("=====================================");
        cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
        cli.output.verbose("=====================================");
        fileContent = fs.readFileSync(options.parameterFile, "utf8");
        snapshotObj = JSON.parse(fileContent);
        cli.output.verbose("JSON object:");
        cli.output.verbose(JSON.stringify(snapshotObj));
        if ((options.operation == "add")) {
          jsonpatch.apply(snapshotObj, [{ op: options.operation, path: options.path, value: options.value },]); } else {

          if ((options.operation == "remove")) {
            jsonpatch.apply(snapshotObj, [{ op: options.operation, path: options.path },]); } else {

            if ((options.operation == "replace")) {
              jsonpatch.apply(snapshotObj, [{ op: options.operation, path: options.path, value: options.value },]); } ; } ; } ;

        updatedContent = JSON.stringify(snapshotObj);
        cli.output.verbose("=====================================");
        cli.output.verbose("JSON object (updated):");
        cli.output.verbose(JSON.stringify(snapshotObj));
        cli.output.verbose("=====================================");
        fs.writeFileSync(options.parameterFile, beautify(updatedContent));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
        cli.output.verbose("====================================="); _(); }, true)); }); });



  var catparametersCreateOrUpdateSnapshotsSnapshot01 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsSnapshot01 = catparametersCreateOrUpdateSnapshotsSnapshot01.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersCreateOrUpdateSnapshotsSnapshot01 = parametersCreateOrUpdateSnapshotsSnapshot01.category("snapshot").description($("Commands to configure snapshot of managed-snapshot in config file."));

  setparametersCreateOrUpdateSnapshotsSnapshot01.command("set").description($("Set snapshot in config string or files, e.g. \r\n{\r\n  \"managedBy\":\"\",\r\n  \"sku\":{\r\n    \"name\":null,\r\n    \"tier\":\"\"\r\n  },\r\n  \"timeCreated\":null,\r\n  \"osType\":null,\r\n  \"creationData\":{\r\n    \"createOption\":\"\",\r\n    \"storageAccountId\":\"\",\r\n    \"imageReference\":{\r\n      \"id\":\"\",\r\n      \"lun\":null\r\n    },\r\n    \"sourceUri\":\"\",\r\n    \"sourceResourceId\":\"\"\r\n  },\r\n  \"diskSizeGB\":null,\r\n  \"encryptionSettings\":{\r\n    \"enabled\":null,\r\n    \"diskEncryptionKey\":{\r\n      \"sourceVault\":{\r\n        \"id\":\"\"\r\n      },\r\n      \"secretUrl\":\"\"\r\n    },\r\n    \"keyEncryptionKey\":{\r\n      \"sourceVault\":{\r\n        \"id\":\"\"\r\n      },\r\n      \"keyUrl\":\"\"\r\n    }\r\n  },\r\n  \"provisioningState\":\"\",\r\n  \"id\":null,\r\n  \"name\":null,\r\n  \"type\":null,\r\n  \"location\":\"\",\r\n  \"tags\":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--managed-by <managedBy>", $("Set the managed-by value.")).option("--sku <sku>", $("Set the sku value.")).option("--time-created <timeCreated>", $("Set the time-created value.")).option("--os-type <osType>", $("Set the os-type value.")).option("--creation-data <creationData>", $("Set the creation-data value.")).option("--disk-size-g-b <diskSizeGB>", $("Set the disk-size-g-b value.")).option("--encryption-settings <encryptionSettings>", $("Set the encryption-settings value.")).option("--provisioning-state <provisioningState>", $("Set the provisioning-state value.")).option("--id <id>", $("Set the id value.")).option("--name <name>", $("Set the name value.")).option("--type <type>", $("Set the type value.")).option("--location <location>", $("Set the location value.")).option("--tags <tags>", $("Set the tags value.")).execute(function __4(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__4", line: 535 }; return __func(_, this, arguments, __4, 1, __frame, function __$__4() {


















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__4() { return (function __$__4(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__4() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "managedBy");
          if (options.managedBy) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.managedBy));
            cli.output.verbose("================================================");
            if ((options.parse && options.managedBy)) {
              options.managedBy = JSON.parse(options.managedBy); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.managedBy },]); } ;

          paramPath = ((options.path + "/") + "sku");
          if (options.sku) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sku));
            cli.output.verbose("================================================");
            if ((options.parse && options.sku)) {
              options.sku = JSON.parse(options.sku); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sku },]); } ;

          paramPath = ((options.path + "/") + "timeCreated");
          if (options.timeCreated) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.timeCreated));
            cli.output.verbose("================================================");
            if ((options.parse && options.timeCreated)) {
              options.timeCreated = JSON.parse(options.timeCreated); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.timeCreated },]); } ;

          paramPath = ((options.path + "/") + "osType");
          if (options.osType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.osType));
            cli.output.verbose("================================================");
            if ((options.parse && options.osType)) {
              options.osType = JSON.parse(options.osType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.osType },]); } ;

          paramPath = ((options.path + "/") + "creationData");
          if (options.creationData) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.creationData));
            cli.output.verbose("================================================");
            if ((options.parse && options.creationData)) {
              options.creationData = JSON.parse(options.creationData); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.creationData },]); } ;

          paramPath = ((options.path + "/") + "diskSizeGB");
          if (options.diskSizeGB) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diskSizeGB));
            cli.output.verbose("================================================");
            if ((options.parse && options.diskSizeGB)) {
              options.diskSizeGB = JSON.parse(options.diskSizeGB); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diskSizeGB },]); } ;

          paramPath = ((options.path + "/") + "encryptionSettings");
          if (options.encryptionSettings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.encryptionSettings));
            cli.output.verbose("================================================");
            if ((options.parse && options.encryptionSettings)) {
              options.encryptionSettings = JSON.parse(options.encryptionSettings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.encryptionSettings },]); } ;

          paramPath = ((options.path + "/") + "provisioningState");
          if (options.provisioningState) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.provisioningState));
            cli.output.verbose("================================================");
            if ((options.parse && options.provisioningState)) {
              options.provisioningState = JSON.parse(options.provisioningState); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.provisioningState },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "type");
          if (options.type) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.type));
            cli.output.verbose("================================================");
            if ((options.parse && options.type)) {
              options.type = JSON.parse(options.type); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.type },]); } ;

          paramPath = ((options.path + "/") + "location");
          if (options.location) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.location));
            cli.output.verbose("================================================");
            if ((options.parse && options.location)) {
              options.location = JSON.parse(options.location); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.location },]); } ;

          paramPath = ((options.path + "/") + "tags");
          if (options.tags) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tags));
            cli.output.verbose("================================================");
            if ((options.parse && options.tags)) {
              options.tags = JSON.parse(options.tags); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tags },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateSnapshotsSnapshot11 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsSnapshot11 = catparametersCreateOrUpdateSnapshotsSnapshot11.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersCreateOrUpdateSnapshotsSnapshot11 = parametersCreateOrUpdateSnapshotsSnapshot11.category("snapshot").description($("Commands to configure snapshot of managed-snapshot in config file."));

  deleteparametersCreateOrUpdateSnapshotsSnapshot11.command("delete").description($("Remove snapshot in config string or files, e.g. \r\n{\r\n  \"managedBy\":\"\",\r\n  \"sku\":{\r\n    \"name\":null,\r\n    \"tier\":\"\"\r\n  },\r\n  \"timeCreated\":null,\r\n  \"osType\":null,\r\n  \"creationData\":{\r\n    \"createOption\":\"\",\r\n    \"storageAccountId\":\"\",\r\n    \"imageReference\":{\r\n      \"id\":\"\",\r\n      \"lun\":null\r\n    },\r\n    \"sourceUri\":\"\",\r\n    \"sourceResourceId\":\"\"\r\n  },\r\n  \"diskSizeGB\":null,\r\n  \"encryptionSettings\":{\r\n    \"enabled\":null,\r\n    \"diskEncryptionKey\":{\r\n      \"sourceVault\":{\r\n        \"id\":\"\"\r\n      },\r\n      \"secretUrl\":\"\"\r\n    },\r\n    \"keyEncryptionKey\":{\r\n      \"sourceVault\":{\r\n        \"id\":\"\"\r\n      },\r\n      \"keyUrl\":\"\"\r\n    }\r\n  },\r\n  \"provisioningState\":\"\",\r\n  \"id\":null,\r\n  \"name\":null,\r\n  \"type\":null,\r\n  \"location\":\"\",\r\n  \"tags\":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--managed-by", $("Remove the managed-by value.")).option("--sku", $("Remove the sku value.")).option("--time-created", $("Remove the time-created value.")).option("--os-type", $("Remove the os-type value.")).option("--creation-data", $("Remove the creation-data value.")).option("--disk-size-g-b", $("Remove the disk-size-g-b value.")).option("--encryption-settings", $("Remove the encryption-settings value.")).option("--provisioning-state", $("Remove the provisioning-state value.")).option("--id", $("Remove the id value.")).option("--name", $("Remove the name value.")).option("--type", $("Remove the type value.")).option("--location", $("Remove the location value.")).option("--tags", $("Remove the tags value.")).execute(function __5(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__5", line: 731 }; return __func(_, this, arguments, __5, 1, __frame, function __$__5() {

















      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__5() { return (function __$__5(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__5() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "";
          anySubItem = (((((((((((((false || options.managedBy) || options.sku) || options.timeCreated) || options.osType) || options.creationData) || options.diskSizeGB) || options.encryptionSettings) || options.provisioningState) || options.id) || options.name) || options.type) || options.location) || options.tags);
          if (anySubItem) {
            subItemPath = null;
            if (options.managedBy) {
              subItemPath = (options.path + "/managedBy");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.sku) {
              subItemPath = (options.path + "/sku");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.timeCreated) {
              subItemPath = (options.path + "/timeCreated");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.osType) {
              subItemPath = (options.path + "/osType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.creationData) {
              subItemPath = (options.path + "/creationData");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.diskSizeGB) {
              subItemPath = (options.path + "/diskSizeGB");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.encryptionSettings) {
              subItemPath = (options.path + "/encryptionSettings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.provisioningState) {
              subItemPath = (options.path + "/provisioningState");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.type) {
              subItemPath = (options.path + "/type");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.location) {
              subItemPath = (options.path + "/location");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tags) {
              subItemPath = (options.path + "/tags");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateSnapshotsSku0S1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsSku0S1 = catparametersCreateOrUpdateSnapshotsSku0S1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersCreateOrUpdateSnapshotsSku0S1 = parametersCreateOrUpdateSnapshotsSku0S1.category("sku").description($("Commands to configure sku of managed-snapshot in config file."));

  setparametersCreateOrUpdateSnapshotsSku0S1.command("set").description($("Set sku in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sku\" : {\r\n             \"name\":null,\r\n             \"tier\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--tier <tier>", $("Set the tier value.")).execute(function __6(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__6", line: 829 }; return __func(_, this, arguments, __6, 1, __frame, function __$__6() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__6() { return (function __$__6(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__6() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/sku";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "tier");
          if (options.tier) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tier));
            cli.output.verbose("================================================");
            if ((options.parse && options.tier)) {
              options.tier = JSON.parse(options.tier); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tier },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateSnapshotsSku1S1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsSku1S1 = catparametersCreateOrUpdateSnapshotsSku1S1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersCreateOrUpdateSnapshotsSku1S1 = parametersCreateOrUpdateSnapshotsSku1S1.category("sku").description($("Commands to configure sku of managed-snapshot in config file."));

  deleteparametersCreateOrUpdateSnapshotsSku1S1.command("delete").description($("Remove sku in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sku\" : {\r\n             \"name\":null,\r\n             \"tier\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--name", $("Remove the name value.")).option("--tier", $("Remove the tier value.")).execute(function __7(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__7", line: 893 }; return __func(_, this, arguments, __7, 1, __frame, function __$__7() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__7() { return (function __$__7(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__7() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/sku";
          anySubItem = ((false || options.name) || options.tier);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tier) {
              subItemPath = (options.path + "/tier");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateSnapshotsCreationData0CD1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsCreationData0CD1 = catparametersCreateOrUpdateSnapshotsCreationData0CD1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersCreateOrUpdateSnapshotsCreationData0CD1 = parametersCreateOrUpdateSnapshotsCreationData0CD1.category("creation-data").description($("Commands to configure creation-data of managed-snapshot in config file."));

  setparametersCreateOrUpdateSnapshotsCreationData0CD1.command("set").description($("Set creation-data in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"creationData\" : {\r\n             \"createOption\":\"\",\r\n             \"storageAccountId\":\"\",\r\n             \"imageReference\":{\r\n               \"id\":\"\",\r\n               \"lun\":null\r\n             },\r\n             \"sourceUri\":\"\",\r\n             \"sourceResourceId\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--create-option <createOption>", $("Set the create-option value.")).option("--storage-account-id <storageAccountId>", $("Set the storage-account-id value.")).option("--image-reference <imageReference>", $("Set the image-reference value.")).option("--source-uri <sourceUri>", $("Set the source-uri value.")).option("--source-resource-id <sourceResourceId>", $("Set the source-resource-id value.")).execute(function __8(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__8", line: 950 }; return __func(_, this, arguments, __8, 1, __frame, function __$__8() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__8() { return (function __$__8(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__8() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/creationData";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "createOption");
          if (options.createOption) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.createOption));
            cli.output.verbose("================================================");
            if ((options.parse && options.createOption)) {
              options.createOption = JSON.parse(options.createOption); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.createOption },]); } ;

          paramPath = ((options.path + "/") + "storageAccountId");
          if (options.storageAccountId) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.storageAccountId));
            cli.output.verbose("================================================");
            if ((options.parse && options.storageAccountId)) {
              options.storageAccountId = JSON.parse(options.storageAccountId); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.storageAccountId },]); } ;

          paramPath = ((options.path + "/") + "imageReference");
          if (options.imageReference) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.imageReference));
            cli.output.verbose("================================================");
            if ((options.parse && options.imageReference)) {
              options.imageReference = JSON.parse(options.imageReference); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.imageReference },]); } ;

          paramPath = ((options.path + "/") + "sourceUri");
          if (options.sourceUri) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceUri));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceUri)) {
              options.sourceUri = JSON.parse(options.sourceUri); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceUri },]); } ;

          paramPath = ((options.path + "/") + "sourceResourceId");
          if (options.sourceResourceId) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceResourceId));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceResourceId)) {
              options.sourceResourceId = JSON.parse(options.sourceResourceId); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceResourceId },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateSnapshotsCreationData1CD1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsCreationData1CD1 = catparametersCreateOrUpdateSnapshotsCreationData1CD1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersCreateOrUpdateSnapshotsCreationData1CD1 = parametersCreateOrUpdateSnapshotsCreationData1CD1.category("creation-data").description($("Commands to configure creation-data of managed-snapshot in config file."));

  deleteparametersCreateOrUpdateSnapshotsCreationData1CD1.command("delete").description($("Remove creation-data in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"creationData\" : {\r\n             \"createOption\":\"\",\r\n             \"storageAccountId\":\"\",\r\n             \"imageReference\":{\r\n               \"id\":\"\",\r\n               \"lun\":null\r\n             },\r\n             \"sourceUri\":\"\",\r\n             \"sourceResourceId\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--create-option", $("Remove the create-option value.")).option("--storage-account-id", $("Remove the storage-account-id value.")).option("--image-reference", $("Remove the image-reference value.")).option("--source-uri", $("Remove the source-uri value.")).option("--source-resource-id", $("Remove the source-resource-id value.")).execute(function __9(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__9", line: 1050 }; return __func(_, this, arguments, __9, 1, __frame, function __$__9() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__9() { return (function __$__9(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__9() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/creationData";
          anySubItem = (((((false || options.createOption) || options.storageAccountId) || options.imageReference) || options.sourceUri) || options.sourceResourceId);
          if (anySubItem) {
            subItemPath = null;
            if (options.createOption) {
              subItemPath = (options.path + "/createOption");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.storageAccountId) {
              subItemPath = (options.path + "/storageAccountId");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.imageReference) {
              subItemPath = (options.path + "/imageReference");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.sourceUri) {
              subItemPath = (options.path + "/sourceUri");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.sourceResourceId) {
              subItemPath = (options.path + "/sourceResourceId");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateSnapshotsImageReference0CDiR1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsImageReference0CDiR1 = catparametersCreateOrUpdateSnapshotsImageReference0CDiR1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersCreateOrUpdateSnapshotsImageReference0CDiR1 = parametersCreateOrUpdateSnapshotsImageReference0CDiR1.category("image-reference").description($("Commands to configure image-reference of managed-snapshot in config file."));

  setparametersCreateOrUpdateSnapshotsImageReference0CDiR1.command("set").description($("Set image-reference in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"imageReference\" : {\r\n             \"id\":\"\",\r\n             \"lun\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).option("--lun <lun>", $("Set the lun value.")).execute(function __10(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__10", line: 1116 }; return __func(_, this, arguments, __10, 1, __frame, function __$__10() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__10() { return (function __$__10(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__10() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/creationData/imageReference";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          paramPath = ((options.path + "/") + "lun");
          if (options.lun) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.lun));
            cli.output.verbose("================================================");
            if ((options.parse && options.lun)) {
              options.lun = JSON.parse(options.lun); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.lun },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateSnapshotsImageReference1CDiR1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsImageReference1CDiR1 = catparametersCreateOrUpdateSnapshotsImageReference1CDiR1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersCreateOrUpdateSnapshotsImageReference1CDiR1 = parametersCreateOrUpdateSnapshotsImageReference1CDiR1.category("image-reference").description($("Commands to configure image-reference of managed-snapshot in config file."));

  deleteparametersCreateOrUpdateSnapshotsImageReference1CDiR1.command("delete").description($("Remove image-reference in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"imageReference\" : {\r\n             \"id\":\"\",\r\n             \"lun\":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--id", $("Remove the id value.")).option("--lun", $("Remove the lun value.")).execute(function __11(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__11", line: 1180 }; return __func(_, this, arguments, __11, 1, __frame, function __$__11() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__11() { return (function __$__11(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__11() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/creationData/imageReference";
          anySubItem = ((false || options.id) || options.lun);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.lun) {
              subItemPath = (options.path + "/lun");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateSnapshotsEncryptionSettings0ES1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsEncryptionSettings0ES1 = catparametersCreateOrUpdateSnapshotsEncryptionSettings0ES1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersCreateOrUpdateSnapshotsEncryptionSettings0ES1 = parametersCreateOrUpdateSnapshotsEncryptionSettings0ES1.category("encryption-settings").description($("Commands to configure encryption-settings of managed-snapshot in config file."));

  setparametersCreateOrUpdateSnapshotsEncryptionSettings0ES1.command("set").description($("Set encryption-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"encryptionSettings\" : {\r\n             \"enabled\":null,\r\n             \"diskEncryptionKey\":{\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               },\r\n               \"secretUrl\":\"\"\r\n             },\r\n             \"keyEncryptionKey\":{\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               },\r\n               \"keyUrl\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--enabled <enabled>", $("Set the enabled value.")).option("--disk-encryption-key <diskEncryptionKey>", $("Set the disk-encryption-key value.")).option("--key-encryption-key <keyEncryptionKey>", $("Set the key-encryption-key value.")).execute(function __12(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__12", line: 1235 }; return __func(_, this, arguments, __12, 1, __frame, function __$__12() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__12() { return (function __$__12(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__12() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/encryptionSettings";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "enabled");
          if (options.enabled) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.enabled));
            cli.output.verbose("================================================");
            if ((options.parse && options.enabled)) {
              options.enabled = JSON.parse(options.enabled); } ;

            options.enabled = JSON.parse(options.enabled);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.enabled },]); } ;

          paramPath = ((options.path + "/") + "diskEncryptionKey");
          if (options.diskEncryptionKey) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diskEncryptionKey));
            cli.output.verbose("================================================");
            if ((options.parse && options.diskEncryptionKey)) {
              options.diskEncryptionKey = JSON.parse(options.diskEncryptionKey); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diskEncryptionKey },]); } ;

          paramPath = ((options.path + "/") + "keyEncryptionKey");
          if (options.keyEncryptionKey) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.keyEncryptionKey));
            cli.output.verbose("================================================");
            if ((options.parse && options.keyEncryptionKey)) {
              options.keyEncryptionKey = JSON.parse(options.keyEncryptionKey); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.keyEncryptionKey },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateSnapshotsEncryptionSettings1ES1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsEncryptionSettings1ES1 = catparametersCreateOrUpdateSnapshotsEncryptionSettings1ES1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersCreateOrUpdateSnapshotsEncryptionSettings1ES1 = parametersCreateOrUpdateSnapshotsEncryptionSettings1ES1.category("encryption-settings").description($("Commands to configure encryption-settings of managed-snapshot in config file."));

  deleteparametersCreateOrUpdateSnapshotsEncryptionSettings1ES1.command("delete").description($("Remove encryption-settings in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"encryptionSettings\" : {\r\n             \"enabled\":null,\r\n             \"diskEncryptionKey\":{\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               },\r\n               \"secretUrl\":\"\"\r\n             },\r\n             \"keyEncryptionKey\":{\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               },\r\n               \"keyUrl\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--enabled", $("Remove the enabled value.")).option("--disk-encryption-key", $("Remove the disk-encryption-key value.")).option("--key-encryption-key", $("Remove the key-encryption-key value.")).execute(function __13(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__13", line: 1312 }; return __func(_, this, arguments, __13, 1, __frame, function __$__13() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__13() { return (function __$__13(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__13() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/encryptionSettings";
          anySubItem = (((false || options.enabled) || options.diskEncryptionKey) || options.keyEncryptionKey);
          if (anySubItem) {
            subItemPath = null;
            if (options.enabled) {
              subItemPath = (options.path + "/enabled");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.diskEncryptionKey) {
              subItemPath = (options.path + "/diskEncryptionKey");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.keyEncryptionKey) {
              subItemPath = (options.path + "/keyEncryptionKey");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateSnapshotsDiskEncryptionKey0ESdEK1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsDiskEncryptionKey0ESdEK1 = catparametersCreateOrUpdateSnapshotsDiskEncryptionKey0ESdEK1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersCreateOrUpdateSnapshotsDiskEncryptionKey0ESdEK1 = parametersCreateOrUpdateSnapshotsDiskEncryptionKey0ESdEK1.category("disk-encryption-key").description($("Commands to configure disk-encryption-key of managed-snapshot in config file."));

  setparametersCreateOrUpdateSnapshotsDiskEncryptionKey0ESdEK1.command("set").description($("Set disk-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"diskEncryptionKey\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"secretUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--source-vault <sourceVault>", $("Set the source-vault value.")).option("--secret-url <secretUrl>", $("Set the secret-url value.")).execute(function __14(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__14", line: 1370 }; return __func(_, this, arguments, __14, 1, __frame, function __$__14() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__14() { return (function __$__14(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__14() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/encryptionSettings/diskEncryptionKey";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "sourceVault");
          if (options.sourceVault) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceVault));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceVault)) {
              options.sourceVault = JSON.parse(options.sourceVault); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceVault },]); } ;

          paramPath = ((options.path + "/") + "secretUrl");
          if (options.secretUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.secretUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.secretUrl)) {
              options.secretUrl = JSON.parse(options.secretUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.secretUrl },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateSnapshotsDiskEncryptionKey1ESdEK1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsDiskEncryptionKey1ESdEK1 = catparametersCreateOrUpdateSnapshotsDiskEncryptionKey1ESdEK1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersCreateOrUpdateSnapshotsDiskEncryptionKey1ESdEK1 = parametersCreateOrUpdateSnapshotsDiskEncryptionKey1ESdEK1.category("disk-encryption-key").description($("Commands to configure disk-encryption-key of managed-snapshot in config file."));

  deleteparametersCreateOrUpdateSnapshotsDiskEncryptionKey1ESdEK1.command("delete").description($("Remove disk-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"diskEncryptionKey\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"secretUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--source-vault", $("Remove the source-vault value.")).option("--secret-url", $("Remove the secret-url value.")).execute(function __15(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__15", line: 1434 }; return __func(_, this, arguments, __15, 1, __frame, function __$__15() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__15() { return (function __$__15(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__15() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/encryptionSettings/diskEncryptionKey";
          anySubItem = ((false || options.sourceVault) || options.secretUrl);
          if (anySubItem) {
            subItemPath = null;
            if (options.sourceVault) {
              subItemPath = (options.path + "/sourceVault");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.secretUrl) {
              subItemPath = (options.path + "/secretUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateSnapshotsSourceVault0ESdEKsV1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsSourceVault0ESdEKsV1 = catparametersCreateOrUpdateSnapshotsSourceVault0ESdEKsV1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersCreateOrUpdateSnapshotsSourceVault0ESdEKsV1 = parametersCreateOrUpdateSnapshotsSourceVault0ESdEKsV1.category("source-vault").description($("Commands to configure source-vault of managed-snapshot in config file."));

  setparametersCreateOrUpdateSnapshotsSourceVault0ESdEKsV1.command("set").description($("Set source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __16(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__16", line: 1487 }; return __func(_, this, arguments, __16, 1, __frame, function __$__16() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__16() { return (function __$__16(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__16() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/encryptionSettings/diskEncryptionKey/sourceVault";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateSnapshotsSourceVault1ESdEKsV1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsSourceVault1ESdEKsV1 = catparametersCreateOrUpdateSnapshotsSourceVault1ESdEKsV1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersCreateOrUpdateSnapshotsSourceVault1ESdEKsV1 = parametersCreateOrUpdateSnapshotsSourceVault1ESdEKsV1.category("source-vault").description($("Commands to configure source-vault of managed-snapshot in config file."));

  deleteparametersCreateOrUpdateSnapshotsSourceVault1ESdEKsV1.command("delete").description($("Remove source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--id", $("Remove the id value.")).execute(function __17(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__17", line: 1539 }; return __func(_, this, arguments, __17, 1, __frame, function __$__17() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__17() { return (function __$__17(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__17() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/encryptionSettings/diskEncryptionKey/sourceVault";
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateSnapshotsKeyEncryptionKey0ESkEK1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsKeyEncryptionKey0ESkEK1 = catparametersCreateOrUpdateSnapshotsKeyEncryptionKey0ESkEK1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersCreateOrUpdateSnapshotsKeyEncryptionKey0ESkEK1 = parametersCreateOrUpdateSnapshotsKeyEncryptionKey0ESkEK1.category("key-encryption-key").description($("Commands to configure key-encryption-key of managed-snapshot in config file."));

  setparametersCreateOrUpdateSnapshotsKeyEncryptionKey0ESkEK1.command("set").description($("Set key-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"keyEncryptionKey\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"keyUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--source-vault <sourceVault>", $("Set the source-vault value.")).option("--key-url <keyUrl>", $("Set the key-url value.")).execute(function __18(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__18", line: 1589 }; return __func(_, this, arguments, __18, 1, __frame, function __$__18() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__18() { return (function __$__18(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__18() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/encryptionSettings/keyEncryptionKey";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "sourceVault");
          if (options.sourceVault) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceVault));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceVault)) {
              options.sourceVault = JSON.parse(options.sourceVault); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceVault },]); } ;

          paramPath = ((options.path + "/") + "keyUrl");
          if (options.keyUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.keyUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.keyUrl)) {
              options.keyUrl = JSON.parse(options.keyUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.keyUrl },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateSnapshotsKeyEncryptionKey1ESkEK1 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsKeyEncryptionKey1ESkEK1 = catparametersCreateOrUpdateSnapshotsKeyEncryptionKey1ESkEK1.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersCreateOrUpdateSnapshotsKeyEncryptionKey1ESkEK1 = parametersCreateOrUpdateSnapshotsKeyEncryptionKey1ESkEK1.category("key-encryption-key").description($("Commands to configure key-encryption-key of managed-snapshot in config file."));

  deleteparametersCreateOrUpdateSnapshotsKeyEncryptionKey1ESkEK1.command("delete").description($("Remove key-encryption-key in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"keyEncryptionKey\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"keyUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--source-vault", $("Remove the source-vault value.")).option("--key-url", $("Remove the key-url value.")).execute(function __19(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__19", line: 1653 }; return __func(_, this, arguments, __19, 1, __frame, function __$__19() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__19() { return (function __$__19(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__19() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/encryptionSettings/keyEncryptionKey";
          anySubItem = ((false || options.sourceVault) || options.keyUrl);
          if (anySubItem) {
            subItemPath = null;
            if (options.sourceVault) {
              subItemPath = (options.path + "/sourceVault");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.keyUrl) {
              subItemPath = (options.path + "/keyUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersCreateOrUpdateSnapshotsSourceVault0ESkEKsV2 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsSourceVault0ESkEKsV2 = catparametersCreateOrUpdateSnapshotsSourceVault0ESkEKsV2.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersCreateOrUpdateSnapshotsSourceVault0ESkEKsV2 = parametersCreateOrUpdateSnapshotsSourceVault0ESkEKsV2.category("key-encryption-key-source-vault").description($("Commands to configure key-encryption-key-source-vault of managed-snapshot in config file."));

  setparametersCreateOrUpdateSnapshotsSourceVault0ESkEKsV2.command("set").description($("Set key-encryption-key-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __20(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__20", line: 1706 }; return __func(_, this, arguments, __20, 1, __frame, function __$__20() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__20() { return (function __$__20(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__20() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/encryptionSettings/keyEncryptionKey/sourceVault";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersCreateOrUpdateSnapshotsSourceVault1ESkEKsV2 = cli.category("managed-snapshot");
  var parametersCreateOrUpdateSnapshotsSourceVault1ESkEKsV2 = catparametersCreateOrUpdateSnapshotsSourceVault1ESkEKsV2.category("config").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersCreateOrUpdateSnapshotsSourceVault1ESkEKsV2 = parametersCreateOrUpdateSnapshotsSourceVault1ESkEKsV2.category("key-encryption-key-source-vault").description($("Commands to configure key-encryption-key-source-vault of managed-snapshot in config file."));

  deleteparametersCreateOrUpdateSnapshotsSourceVault1ESkEKsV2.command("delete").description($("Remove key-encryption-key-source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--id", $("Remove the id value.")).execute(function __21(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__21", line: 1758 }; return __func(_, this, arguments, __21, 1, __frame, function __$__21() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__21() { return (function __$__21(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__21() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/encryptionSettings/keyEncryptionKey/sourceVault";
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });







  var snapshotsDelete = cli.category("managed-snapshot").description($("Commands to manage your snapshots.  "));

  snapshotsDelete.command("delete [resource-group] [name]").description($("Deletes a snapshot.")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __22(resourceGroup, name, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__22", line: 1809 }; return __func(_, this, arguments, __22, 3, __frame, function __$__22() { return (function __$__22(__then) {






        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__22() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__22(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__22() {


          cli.output.verbose(("name = " + name));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.snapshots.deleteMethod(resourceGroup, name, __cb(_, __frame, 13, 51, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });







  var snapshotsGet = cli.category("managed-snapshot").description($("Commands to manage your snapshots.  "));

  snapshotsGet.command("show [resource-group] [name]").description($("Gets information about a snapshot.")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __23(resourceGroup, name, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__23", line: 1840 }; return __func(_, this, arguments, __23, 3, __frame, function __$__23() { return (function __$__23(__then) {






        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__23() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__23(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__23() {


          cli.output.verbose(("name = " + name));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.snapshots.get(resourceGroup, name, __cb(_, __frame, 13, 51, function ___(__0, __3) { result = __3;
            if (cli.output.format().json) {
              cli.output.json(result); }

             else {
              display(cli, result); } ; _(); }, true)); }); }); }); });













  var snapshotsGrantAccess = cli.category("managed-snapshot").description($("Commands to manage your snapshots.  "));

  snapshotsGrantAccess.command("grant-access [resource-group] [name] [grant-access-data]").description($("Grants access to a snapshot.")).usage("[options] <resource-group> <name> <grant-access-data>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("--grant-access-data <grant-access-data>", $("A string of parameters in JSON format")).option("--parameter-file <parameter-file>", $("The text file that contains input parameter object in JSON format")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __24(resourceGroup, name, grantAccessData, options, _) { var grantAccessDataObj, fileContent, subscription, computeManagementClient, result; var __frame = { name: "__24", line: 1882 }; return __func(_, this, arguments, __24, 4, __frame, function __$__24() { return (function __$__24(__then) {








        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__24() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__24(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__24() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("grantAccessData = " + grantAccessData));
          grantAccessDataObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            grantAccessDataObj = JSON.parse(fileContent); }

           else {
            grantAccessDataObj = JSON.parse(grantAccessData); } ;

          cli.output.verbose(("grantAccessDataObj = " + JSON.stringify(grantAccessDataObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.snapshots.grantAccess(resourceGroup, name, grantAccessDataObj, __cb(_, __frame, 24, 51, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });


  var snapshotsGrantAccessgrantAccessParameters2 = snapshotsGrantAccess.category("grant-access-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  snapshotsGrantAccessgrantAccessParameters2.command("create").description($("Generate snapshotsGrantAccess parameter string or files.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).execute(function __25(options, _) { var filePath; var __frame = { name: "__25", line: 1917 }; return __func(_, this, arguments, __25, 1, __frame, function __$__25() {




      return cli.output.verbose("{\"access\":\"\",\"durationInSeconds\":\"\"}", __cb(_, __frame, 1, 15, function __$__25() {
        filePath = "snapshotsGrantAccess_grantAccess.json";
        if (options.parameterFile) {
          filePath = options.parameterFile; } ;

        fs.writeFileSync(filePath, beautify("{\r\n\"access\":\"\",\r\n\"durationInSeconds\":\"\"\r\n}"));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file output to: " + filePath));
        cli.output.verbose("====================================="); _(); }, true)); }); });


  snapshotsGrantAccessgrantAccessParameters2.command("patch").description($("Command to patch snapshotsGrantAccess parameter JSON file.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--operation <operation>", $("The JSON patch operation: add, remove, or replace.")).option("--path <path>", $("The JSON data path, e.g.: \"foo/1\".")).option("--value <value>", $("The JSON value.")).option("--parse", $("Parse the JSON value to object.")).execute(function __26(options, _) { var fileContent, grantAccessDataObj, updatedContent; var __frame = { name: "__26", line: 1937 }; return __func(_, this, arguments, __26, 1, __frame, function __$__26() {








      return cli.output.verbose(options.parameterFile, __cb(_, __frame, 1, 15, function __$__26() {
        cli.output.verbose(options.operation);
        cli.output.verbose(options.path);
        cli.output.verbose(options.value);
        cli.output.verbose(options.parse);
        if (options.parse) {
          options.value = JSON.parse(options.value); } ;

        cli.output.verbose(options.value);
        cli.output.verbose("=====================================");
        cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
        cli.output.verbose("=====================================");
        fileContent = fs.readFileSync(options.parameterFile, "utf8");
        grantAccessDataObj = JSON.parse(fileContent);
        cli.output.verbose("JSON object:");
        cli.output.verbose(JSON.stringify(grantAccessDataObj));
        if ((options.operation == "add")) {
          jsonpatch.apply(grantAccessDataObj, [{ op: options.operation, path: options.path, value: options.value },]); } else {

          if ((options.operation == "remove")) {
            jsonpatch.apply(grantAccessDataObj, [{ op: options.operation, path: options.path },]); } else {

            if ((options.operation == "replace")) {
              jsonpatch.apply(grantAccessDataObj, [{ op: options.operation, path: options.path, value: options.value },]); } ; } ; } ;

        updatedContent = JSON.stringify(grantAccessDataObj);
        cli.output.verbose("=====================================");
        cli.output.verbose("JSON object (updated):");
        cli.output.verbose(JSON.stringify(grantAccessDataObj));
        cli.output.verbose("=====================================");
        fs.writeFileSync(options.parameterFile, beautify(updatedContent));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
        cli.output.verbose("====================================="); _(); }, true)); }); });



  var catparametersGrantAccessSnapshotsGrantAccessData01 = cli.category("managed-snapshot");
  var parametersGrantAccessSnapshotsGrantAccessData01 = catparametersGrantAccessSnapshotsGrantAccessData01.category("grant-access-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersGrantAccessSnapshotsGrantAccessData01 = parametersGrantAccessSnapshotsGrantAccessData01.category("grant-access-data").description($("Commands to configure grant-access-data of managed-snapshot in grant-access-parameters file."));

  setparametersGrantAccessSnapshotsGrantAccessData01.command("set").description($("Set grant-access-data in grant-access-parameters string or files, e.g. \r\n{\r\n  \"access\":\"\",\r\n  \"durationInSeconds\":\"\"\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--access <access>", $("Set the access value.")).option("--duration-in-seconds <durationInSeconds>", $("Set the duration-in-seconds value.")).execute(function __27(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__27", line: 1987 }; return __func(_, this, arguments, __27, 1, __frame, function __$__27() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__27() { return (function __$__27(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__27() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "access");
          if (options.access) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.access));
            cli.output.verbose("================================================");
            if ((options.parse && options.access)) {
              options.access = JSON.parse(options.access); } ;

            options.access = JSON.parse(options.access);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.access },]); } ;

          paramPath = ((options.path + "/") + "durationInSeconds");
          if (options.durationInSeconds) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.durationInSeconds));
            cli.output.verbose("================================================");
            if ((options.parse && options.durationInSeconds)) {
              options.durationInSeconds = JSON.parse(options.durationInSeconds); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.durationInSeconds },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersGrantAccessSnapshotsGrantAccessData11 = cli.category("managed-snapshot");
  var parametersGrantAccessSnapshotsGrantAccessData11 = catparametersGrantAccessSnapshotsGrantAccessData11.category("grant-access-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersGrantAccessSnapshotsGrantAccessData11 = parametersGrantAccessSnapshotsGrantAccessData11.category("grant-access-data").description($("Commands to configure grant-access-data of managed-snapshot in grant-access-parameters file."));

  deleteparametersGrantAccessSnapshotsGrantAccessData11.command("delete").description($("Remove grant-access-data in grant-access-parameters string or files, e.g. \r\n{\r\n  \"access\":\"\",\r\n  \"durationInSeconds\":\"\"\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--access", $("Remove the access value.")).option("--duration-in-seconds", $("Remove the duration-in-seconds value.")).execute(function __28(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__28", line: 2052 }; return __func(_, this, arguments, __28, 1, __frame, function __$__28() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__28() { return (function __$__28(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__28() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "";
          anySubItem = ((false || options.access) || options.durationInSeconds);
          if (anySubItem) {
            subItemPath = null;
            if (options.access) {
              subItemPath = (options.path + "/access");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.durationInSeconds) {
              subItemPath = (options.path + "/durationInSeconds");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });






  var snapshotsListByResourceGroup = cli.category("managed-snapshot").description($("Commands to manage your snapshots.  "));

  snapshotsListByResourceGroup.command("list [resource-group]").description($("Lists snapshots under a resource group.")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __29(resourceGroup, options, _) { var subscription, computeManagementClient, result, nextPageLink, pageResult; var __frame = { name: "__29", line: 2105 }; return __func(_, this, arguments, __29, 2, __frame, function __$__29() {





      cli.output.verbose(("resourceGroup = " + resourceGroup));
      subscription = profile.current.getSubscription(options.subscription);
      computeManagementClient = utils.createComputeManagementClient(subscription);
      result = null; return (function __$__29(__then) {
        if (utils.stringIsNullOrEmpty(resourceGroup)) {
          return computeManagementClient.snapshots.list(__cb(_, __frame, 6, 49, function ___(__0, __1) { result = __1; __then(); }, true)); } else {


          return computeManagementClient.snapshots.listByResourceGroup(resourceGroup, __cb(_, __frame, 9, 49, function ___(__0, __2) { result = __2; __then(); }, true)); } ; })(function __$__29() {

        nextPageLink = result.nextLink; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$__29() { __more = false;
            var __6 = nextPageLink; if (__6) {
              return computeManagementClient.snapshots.listByResourceGroupNext(nextPageLink, __cb(_, __frame, 13, 57, function ___(__0, __3) { pageResult = __3;
                pageResult.forEach(function(item) {
                  result.push(item); });

                nextPageLink = pageResult.nextLink; while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$__29() {


          if (cli.output.format().json) {
            cli.output.json(result); }

           else {
            cli.output.table(result, function(row, item) {
              var rgName = (item.id ? utils.parseResourceReferenceUri(item.id).resourceGroupName : null);
              row.cell($("ResourceGroupName"), rgName);
              row.cell($("Name"), item.name);
              row.cell($("ProvisioningState"), item.provisioningState);
              row.cell($("Location"), item.location); }); } ; _(); }); }); }); });








  var snapshotsRevokeAccess = cli.category("managed-snapshot").description($("Commands to manage your snapshots.  "));

  snapshotsRevokeAccess.command("revoke-access [resource-group] [name]").description($("Revokes access to a snapshot.")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __30(resourceGroup, name, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__30", line: 2151 }; return __func(_, this, arguments, __30, 3, __frame, function __$__30() { return (function __$__30(__then) {






        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__30() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__30(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__30() {


          cli.output.verbose(("name = " + name));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.snapshots.revokeAccess(resourceGroup, name, __cb(_, __frame, 13, 51, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });


































  var snapshotsUpdate = cli.category("managed-snapshot").description($("Commands to manage your snapshots.  "));

  snapshotsUpdate.command("update [resource-group] [name] [snapshot]").description($("Updates (patches) a snapshot.")).usage("[options] <resource-group> <name> <snapshot>").option("-g, --resource-group <resource-group>", $("resource-group")).option("-n, --name <name>", $("name")).option("--snapshot <snapshot>", $("A string of parameters in JSON format")).option("--parameter-file <parameter-file>", $("The text file that contains input parameter object in JSON format")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __31(resourceGroup, name, snapshot, options, _) { var snapshotObj, fileContent, subscription, computeManagementClient, result; var __frame = { name: "__31", line: 2211 }; return __func(_, this, arguments, __31, 4, __frame, function __$__31() { return (function __$__31(__then) {








        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 38, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__31() {


        cli.output.verbose(("resourceGroup = " + resourceGroup)); return (function __$__31(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__31() {


          cli.output.verbose(("name = " + name));
          cli.output.verbose(("snapshot = " + snapshot));
          snapshotObj = null;
          if (options.parameterFile) {
            cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
            fileContent = fs.readFileSync(options.parameterFile, "utf8");
            snapshotObj = JSON.parse(fileContent); }

           else {
            snapshotObj = JSON.parse(snapshot); } ;

          cli.output.verbose(("snapshotObj = " + JSON.stringify(snapshotObj)));
          subscription = profile.current.getSubscription(options.subscription);
          computeManagementClient = utils.createComputeManagementClient(subscription);
          return computeManagementClient.snapshots.update(resourceGroup, name, snapshotObj, __cb(_, __frame, 24, 51, function ___(__0, __3) { result = __3;
            if (result) {
              cli.output.json(result); } ; _(); }, true)); }); }); }); });


  var snapshotsUpdateupdateParameters2 = snapshotsUpdate.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  snapshotsUpdateupdateParameters2.command("create").description($("Generate snapshotsUpdate parameter string or files.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).execute(function __32(options, _) { var filePath; var __frame = { name: "__32", line: 2246 }; return __func(_, this, arguments, __32, 1, __frame, function __$__32() {




      return cli.output.verbose("{\"osType\":null,\"diskSizeGB\":null,\"encryptionSettings\":{\"enabled\":null,\"diskEncryptionKey\":{\"sourceVault\":{\"id\":\"\"},\"secretUrl\":\"\"},\"keyEncryptionKey\":{\"sourceVault\":{\"id\":\"\"},\"keyUrl\":\"\"}},\"tags\":{},\"sku\":{\"name\":null,\"tier\":\"\"}}", __cb(_, __frame, 1, 15, function __$__32() {
        filePath = "snapshotsUpdate_update.json";
        if (options.parameterFile) {
          filePath = options.parameterFile; } ;

        fs.writeFileSync(filePath, beautify("{\r\n\"osType\":null,\r\n\"diskSizeGB\":null,\r\n\"encryptionSettings\":{\r\n\"enabled\":null,\r\n\"diskEncryptionKey\":{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"secretUrl\":\"\"\r\n},\r\n\"keyEncryptionKey\":{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"keyUrl\":\"\"\r\n}\r\n},\r\n\"tags\":{\r\n},\r\n\"sku\":{\r\n\"name\":null,\r\n\"tier\":\"\"\r\n}\r\n}"));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file output to: " + filePath));
        cli.output.verbose("====================================="); _(); }, true)); }); });


  snapshotsUpdateupdateParameters2.command("patch").description($("Command to patch snapshotsUpdate parameter JSON file.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--operation <operation>", $("The JSON patch operation: add, remove, or replace.")).option("--path <path>", $("The JSON data path, e.g.: \"foo/1\".")).option("--value <value>", $("The JSON value.")).option("--parse", $("Parse the JSON value to object.")).execute(function __33(options, _) { var fileContent, snapshotObj, updatedContent; var __frame = { name: "__33", line: 2266 }; return __func(_, this, arguments, __33, 1, __frame, function __$__33() {








      return cli.output.verbose(options.parameterFile, __cb(_, __frame, 1, 15, function __$__33() {
        cli.output.verbose(options.operation);
        cli.output.verbose(options.path);
        cli.output.verbose(options.value);
        cli.output.verbose(options.parse);
        if (options.parse) {
          options.value = JSON.parse(options.value); } ;

        cli.output.verbose(options.value);
        cli.output.verbose("=====================================");
        cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
        cli.output.verbose("=====================================");
        fileContent = fs.readFileSync(options.parameterFile, "utf8");
        snapshotObj = JSON.parse(fileContent);
        cli.output.verbose("JSON object:");
        cli.output.verbose(JSON.stringify(snapshotObj));
        if ((options.operation == "add")) {
          jsonpatch.apply(snapshotObj, [{ op: options.operation, path: options.path, value: options.value },]); } else {

          if ((options.operation == "remove")) {
            jsonpatch.apply(snapshotObj, [{ op: options.operation, path: options.path },]); } else {

            if ((options.operation == "replace")) {
              jsonpatch.apply(snapshotObj, [{ op: options.operation, path: options.path, value: options.value },]); } ; } ; } ;

        updatedContent = JSON.stringify(snapshotObj);
        cli.output.verbose("=====================================");
        cli.output.verbose("JSON object (updated):");
        cli.output.verbose(JSON.stringify(snapshotObj));
        cli.output.verbose("=====================================");
        fs.writeFileSync(options.parameterFile, beautify(updatedContent));
        cli.output.verbose("=====================================");
        cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
        cli.output.verbose("====================================="); _(); }, true)); }); });



  var catparametersUpdateSnapshotsSnapshotUpdate01 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsSnapshotUpdate01 = catparametersUpdateSnapshotsSnapshotUpdate01.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersUpdateSnapshotsSnapshotUpdate01 = parametersUpdateSnapshotsSnapshotUpdate01.category("snapshot-update").description($("Commands to configure snapshot-update of managed-snapshot in update-parameters file."));

  setparametersUpdateSnapshotsSnapshotUpdate01.command("set").description($("Set snapshot-update in update-parameters string or files, e.g. \r\n{\r\n  \"osType\":null,\r\n  \"diskSizeGB\":null,\r\n  \"encryptionSettings\":{\r\n    \"enabled\":null,\r\n    \"diskEncryptionKey\":{\r\n      \"sourceVault\":{\r\n        \"id\":\"\"\r\n      },\r\n      \"secretUrl\":\"\"\r\n    },\r\n    \"keyEncryptionKey\":{\r\n      \"sourceVault\":{\r\n        \"id\":\"\"\r\n      },\r\n      \"keyUrl\":\"\"\r\n    }\r\n  },\r\n  \"tags\":{\r\n  },\r\n  \"sku\":{\r\n    \"name\":null,\r\n    \"tier\":\"\"\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--os-type <osType>", $("Set the os-type value.")).option("--disk-size-g-b <diskSizeGB>", $("Set the disk-size-g-b value.")).option("--encryption-settings <encryptionSettings>", $("Set the encryption-settings value.")).option("--tags <tags>", $("Set the tags value.")).option("--sku <sku>", $("Set the sku value.")).execute(function __34(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__34", line: 2319 }; return __func(_, this, arguments, __34, 1, __frame, function __$__34() {










      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__34() { return (function __$__34(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__34() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "osType");
          if (options.osType) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.osType));
            cli.output.verbose("================================================");
            if ((options.parse && options.osType)) {
              options.osType = JSON.parse(options.osType); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.osType },]); } ;

          paramPath = ((options.path + "/") + "diskSizeGB");
          if (options.diskSizeGB) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diskSizeGB));
            cli.output.verbose("================================================");
            if ((options.parse && options.diskSizeGB)) {
              options.diskSizeGB = JSON.parse(options.diskSizeGB); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diskSizeGB },]); } ;

          paramPath = ((options.path + "/") + "encryptionSettings");
          if (options.encryptionSettings) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.encryptionSettings));
            cli.output.verbose("================================================");
            if ((options.parse && options.encryptionSettings)) {
              options.encryptionSettings = JSON.parse(options.encryptionSettings); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.encryptionSettings },]); } ;

          paramPath = ((options.path + "/") + "tags");
          if (options.tags) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tags));
            cli.output.verbose("================================================");
            if ((options.parse && options.tags)) {
              options.tags = JSON.parse(options.tags); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tags },]); } ;

          paramPath = ((options.path + "/") + "sku");
          if (options.sku) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sku));
            cli.output.verbose("================================================");
            if ((options.parse && options.sku)) {
              options.sku = JSON.parse(options.sku); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sku },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateSnapshotsSnapshotUpdate11 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsSnapshotUpdate11 = catparametersUpdateSnapshotsSnapshotUpdate11.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersUpdateSnapshotsSnapshotUpdate11 = parametersUpdateSnapshotsSnapshotUpdate11.category("snapshot-update").description($("Commands to configure snapshot-update of managed-snapshot in update-parameters file."));

  deleteparametersUpdateSnapshotsSnapshotUpdate11.command("delete").description($("Remove snapshot-update in update-parameters string or files, e.g. \r\n{\r\n  \"osType\":null,\r\n  \"diskSizeGB\":null,\r\n  \"encryptionSettings\":{\r\n    \"enabled\":null,\r\n    \"diskEncryptionKey\":{\r\n      \"sourceVault\":{\r\n        \"id\":\"\"\r\n      },\r\n      \"secretUrl\":\"\"\r\n    },\r\n    \"keyEncryptionKey\":{\r\n      \"sourceVault\":{\r\n        \"id\":\"\"\r\n      },\r\n      \"keyUrl\":\"\"\r\n    }\r\n  },\r\n  \"tags\":{\r\n  },\r\n  \"sku\":{\r\n    \"name\":null,\r\n    \"tier\":\"\"\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--os-type", $("Remove the os-type value.")).option("--disk-size-g-b", $("Remove the disk-size-g-b value.")).option("--encryption-settings", $("Remove the encryption-settings value.")).option("--tags", $("Remove the tags value.")).option("--sku", $("Remove the sku value.")).execute(function __35(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__35", line: 2419 }; return __func(_, this, arguments, __35, 1, __frame, function __$__35() {









      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__35() { return (function __$__35(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__35() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "";
          anySubItem = (((((false || options.osType) || options.diskSizeGB) || options.encryptionSettings) || options.tags) || options.sku);
          if (anySubItem) {
            subItemPath = null;
            if (options.osType) {
              subItemPath = (options.path + "/osType");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.diskSizeGB) {
              subItemPath = (options.path + "/diskSizeGB");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.encryptionSettings) {
              subItemPath = (options.path + "/encryptionSettings");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tags) {
              subItemPath = (options.path + "/tags");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.sku) {
              subItemPath = (options.path + "/sku");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateSnapshotsEncryptionSettings0ES1 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsEncryptionSettings0ES1 = catparametersUpdateSnapshotsEncryptionSettings0ES1.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersUpdateSnapshotsEncryptionSettings0ES1 = parametersUpdateSnapshotsEncryptionSettings0ES1.category("encryption-settings").description($("Commands to configure encryption-settings of managed-snapshot in update-parameters file."));

  setparametersUpdateSnapshotsEncryptionSettings0ES1.command("set").description($("Set encryption-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"encryptionSettings\" : {\r\n             \"enabled\":null,\r\n             \"diskEncryptionKey\":{\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               },\r\n               \"secretUrl\":\"\"\r\n             },\r\n             \"keyEncryptionKey\":{\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               },\r\n               \"keyUrl\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--enabled <enabled>", $("Set the enabled value.")).option("--disk-encryption-key <diskEncryptionKey>", $("Set the disk-encryption-key value.")).option("--key-encryption-key <keyEncryptionKey>", $("Set the key-encryption-key value.")).execute(function __36(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__36", line: 2486 }; return __func(_, this, arguments, __36, 1, __frame, function __$__36() {








      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__36() { return (function __$__36(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__36() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/encryptionSettings";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "enabled");
          if (options.enabled) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.enabled));
            cli.output.verbose("================================================");
            if ((options.parse && options.enabled)) {
              options.enabled = JSON.parse(options.enabled); } ;

            options.enabled = JSON.parse(options.enabled);
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.enabled },]); } ;

          paramPath = ((options.path + "/") + "diskEncryptionKey");
          if (options.diskEncryptionKey) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.diskEncryptionKey));
            cli.output.verbose("================================================");
            if ((options.parse && options.diskEncryptionKey)) {
              options.diskEncryptionKey = JSON.parse(options.diskEncryptionKey); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.diskEncryptionKey },]); } ;

          paramPath = ((options.path + "/") + "keyEncryptionKey");
          if (options.keyEncryptionKey) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.keyEncryptionKey));
            cli.output.verbose("================================================");
            if ((options.parse && options.keyEncryptionKey)) {
              options.keyEncryptionKey = JSON.parse(options.keyEncryptionKey); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.keyEncryptionKey },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateSnapshotsEncryptionSettings1ES1 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsEncryptionSettings1ES1 = catparametersUpdateSnapshotsEncryptionSettings1ES1.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersUpdateSnapshotsEncryptionSettings1ES1 = parametersUpdateSnapshotsEncryptionSettings1ES1.category("encryption-settings").description($("Commands to configure encryption-settings of managed-snapshot in update-parameters file."));

  deleteparametersUpdateSnapshotsEncryptionSettings1ES1.command("delete").description($("Remove encryption-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"encryptionSettings\" : {\r\n             \"enabled\":null,\r\n             \"diskEncryptionKey\":{\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               },\r\n               \"secretUrl\":\"\"\r\n             },\r\n             \"keyEncryptionKey\":{\r\n               \"sourceVault\":{\r\n                 \"id\":\"\"\r\n               },\r\n               \"keyUrl\":\"\"\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--enabled", $("Remove the enabled value.")).option("--disk-encryption-key", $("Remove the disk-encryption-key value.")).option("--key-encryption-key", $("Remove the key-encryption-key value.")).execute(function __37(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__37", line: 2563 }; return __func(_, this, arguments, __37, 1, __frame, function __$__37() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__37() { return (function __$__37(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__37() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/encryptionSettings";
          anySubItem = (((false || options.enabled) || options.diskEncryptionKey) || options.keyEncryptionKey);
          if (anySubItem) {
            subItemPath = null;
            if (options.enabled) {
              subItemPath = (options.path + "/enabled");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.diskEncryptionKey) {
              subItemPath = (options.path + "/diskEncryptionKey");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.keyEncryptionKey) {
              subItemPath = (options.path + "/keyEncryptionKey");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateSnapshotsDiskEncryptionKey0ESdEK1 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsDiskEncryptionKey0ESdEK1 = catparametersUpdateSnapshotsDiskEncryptionKey0ESdEK1.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersUpdateSnapshotsDiskEncryptionKey0ESdEK1 = parametersUpdateSnapshotsDiskEncryptionKey0ESdEK1.category("disk-encryption-key").description($("Commands to configure disk-encryption-key of managed-snapshot in update-parameters file."));

  setparametersUpdateSnapshotsDiskEncryptionKey0ESdEK1.command("set").description($("Set disk-encryption-key in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"diskEncryptionKey\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"secretUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--source-vault <sourceVault>", $("Set the source-vault value.")).option("--secret-url <secretUrl>", $("Set the secret-url value.")).execute(function __38(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__38", line: 2621 }; return __func(_, this, arguments, __38, 1, __frame, function __$__38() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__38() { return (function __$__38(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__38() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/encryptionSettings/diskEncryptionKey";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "sourceVault");
          if (options.sourceVault) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceVault));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceVault)) {
              options.sourceVault = JSON.parse(options.sourceVault); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceVault },]); } ;

          paramPath = ((options.path + "/") + "secretUrl");
          if (options.secretUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.secretUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.secretUrl)) {
              options.secretUrl = JSON.parse(options.secretUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.secretUrl },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateSnapshotsDiskEncryptionKey1ESdEK1 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsDiskEncryptionKey1ESdEK1 = catparametersUpdateSnapshotsDiskEncryptionKey1ESdEK1.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersUpdateSnapshotsDiskEncryptionKey1ESdEK1 = parametersUpdateSnapshotsDiskEncryptionKey1ESdEK1.category("disk-encryption-key").description($("Commands to configure disk-encryption-key of managed-snapshot in update-parameters file."));

  deleteparametersUpdateSnapshotsDiskEncryptionKey1ESdEK1.command("delete").description($("Remove disk-encryption-key in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"diskEncryptionKey\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"secretUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--source-vault", $("Remove the source-vault value.")).option("--secret-url", $("Remove the secret-url value.")).execute(function __39(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__39", line: 2685 }; return __func(_, this, arguments, __39, 1, __frame, function __$__39() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__39() { return (function __$__39(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__39() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/encryptionSettings/diskEncryptionKey";
          anySubItem = ((false || options.sourceVault) || options.secretUrl);
          if (anySubItem) {
            subItemPath = null;
            if (options.sourceVault) {
              subItemPath = (options.path + "/sourceVault");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.secretUrl) {
              subItemPath = (options.path + "/secretUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateSnapshotsSourceVault0ESdEKsV1 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsSourceVault0ESdEKsV1 = catparametersUpdateSnapshotsSourceVault0ESdEKsV1.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersUpdateSnapshotsSourceVault0ESdEKsV1 = parametersUpdateSnapshotsSourceVault0ESdEKsV1.category("source-vault").description($("Commands to configure source-vault of managed-snapshot in update-parameters file."));

  setparametersUpdateSnapshotsSourceVault0ESdEKsV1.command("set").description($("Set source-vault in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __40(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__40", line: 2738 }; return __func(_, this, arguments, __40, 1, __frame, function __$__40() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__40() { return (function __$__40(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__40() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/encryptionSettings/diskEncryptionKey/sourceVault";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateSnapshotsSourceVault1ESdEKsV1 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsSourceVault1ESdEKsV1 = catparametersUpdateSnapshotsSourceVault1ESdEKsV1.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersUpdateSnapshotsSourceVault1ESdEKsV1 = parametersUpdateSnapshotsSourceVault1ESdEKsV1.category("source-vault").description($("Commands to configure source-vault of managed-snapshot in update-parameters file."));

  deleteparametersUpdateSnapshotsSourceVault1ESdEKsV1.command("delete").description($("Remove source-vault in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--id", $("Remove the id value.")).execute(function __41(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__41", line: 2790 }; return __func(_, this, arguments, __41, 1, __frame, function __$__41() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__41() { return (function __$__41(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__41() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/encryptionSettings/diskEncryptionKey/sourceVault";
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateSnapshotsKeyEncryptionKey0ESkEK1 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsKeyEncryptionKey0ESkEK1 = catparametersUpdateSnapshotsKeyEncryptionKey0ESkEK1.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersUpdateSnapshotsKeyEncryptionKey0ESkEK1 = parametersUpdateSnapshotsKeyEncryptionKey0ESkEK1.category("key-encryption-key").description($("Commands to configure key-encryption-key of managed-snapshot in update-parameters file."));

  setparametersUpdateSnapshotsKeyEncryptionKey0ESkEK1.command("set").description($("Set key-encryption-key in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"keyEncryptionKey\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"keyUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--source-vault <sourceVault>", $("Set the source-vault value.")).option("--key-url <keyUrl>", $("Set the key-url value.")).execute(function __42(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__42", line: 2840 }; return __func(_, this, arguments, __42, 1, __frame, function __$__42() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__42() { return (function __$__42(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__42() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/encryptionSettings/keyEncryptionKey";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "sourceVault");
          if (options.sourceVault) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.sourceVault));
            cli.output.verbose("================================================");
            if ((options.parse && options.sourceVault)) {
              options.sourceVault = JSON.parse(options.sourceVault); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.sourceVault },]); } ;

          paramPath = ((options.path + "/") + "keyUrl");
          if (options.keyUrl) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.keyUrl));
            cli.output.verbose("================================================");
            if ((options.parse && options.keyUrl)) {
              options.keyUrl = JSON.parse(options.keyUrl); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.keyUrl },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateSnapshotsKeyEncryptionKey1ESkEK1 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsKeyEncryptionKey1ESkEK1 = catparametersUpdateSnapshotsKeyEncryptionKey1ESkEK1.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersUpdateSnapshotsKeyEncryptionKey1ESkEK1 = parametersUpdateSnapshotsKeyEncryptionKey1ESkEK1.category("key-encryption-key").description($("Commands to configure key-encryption-key of managed-snapshot in update-parameters file."));

  deleteparametersUpdateSnapshotsKeyEncryptionKey1ESkEK1.command("delete").description($("Remove key-encryption-key in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"keyEncryptionKey\" : {\r\n             \"sourceVault\":{\r\n               \"id\":\"\"\r\n             },\r\n             \"keyUrl\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--source-vault", $("Remove the source-vault value.")).option("--key-url", $("Remove the key-url value.")).execute(function __43(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__43", line: 2904 }; return __func(_, this, arguments, __43, 1, __frame, function __$__43() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__43() { return (function __$__43(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__43() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/encryptionSettings/keyEncryptionKey";
          anySubItem = ((false || options.sourceVault) || options.keyUrl);
          if (anySubItem) {
            subItemPath = null;
            if (options.sourceVault) {
              subItemPath = (options.path + "/sourceVault");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.keyUrl) {
              subItemPath = (options.path + "/keyUrl");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateSnapshotsSourceVault0ESkEKsV2 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsSourceVault0ESkEKsV2 = catparametersUpdateSnapshotsSourceVault0ESkEKsV2.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersUpdateSnapshotsSourceVault0ESkEKsV2 = parametersUpdateSnapshotsSourceVault0ESkEKsV2.category("key-encryption-key-source-vault").description($("Commands to configure key-encryption-key-source-vault of managed-snapshot in update-parameters file."));

  setparametersUpdateSnapshotsSourceVault0ESkEKsV2.command("set").description($("Set key-encryption-key-source-vault in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--id <id>", $("Set the id value.")).execute(function __44(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__44", line: 2957 }; return __func(_, this, arguments, __44, 1, __frame, function __$__44() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__44() { return (function __$__44(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__44() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/encryptionSettings/keyEncryptionKey/sourceVault";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "id");
          if (options.id) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.id));
            cli.output.verbose("================================================");
            if ((options.parse && options.id)) {
              options.id = JSON.parse(options.id); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.id },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateSnapshotsSourceVault1ESkEKsV2 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsSourceVault1ESkEKsV2 = catparametersUpdateSnapshotsSourceVault1ESkEKsV2.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersUpdateSnapshotsSourceVault1ESkEKsV2 = parametersUpdateSnapshotsSourceVault1ESkEKsV2.category("key-encryption-key-source-vault").description($("Commands to configure key-encryption-key-source-vault of managed-snapshot in update-parameters file."));

  deleteparametersUpdateSnapshotsSourceVault1ESkEKsV2.command("delete").description($("Remove key-encryption-key-source-vault in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"sourceVault\" : {\r\n             \"id\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--id", $("Remove the id value.")).execute(function __45(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__45", line: 3009 }; return __func(_, this, arguments, __45, 1, __frame, function __$__45() {





      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__45() { return (function __$__45(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__45() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/encryptionSettings/keyEncryptionKey/sourceVault";
          anySubItem = (false || options.id);
          if (anySubItem) {
            subItemPath = null;
            if (options.id) {
              subItemPath = (options.path + "/id");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });


  var catparametersUpdateSnapshotsSku0S1 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsSku0S1 = catparametersUpdateSnapshotsSku0S1.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var setparametersUpdateSnapshotsSku0S1 = parametersUpdateSnapshotsSku0S1.category("sku").description($("Commands to configure sku of managed-snapshot in update-parameters file."));

  setparametersUpdateSnapshotsSku0S1.command("set").description($("Set sku in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"sku\" : {\r\n             \"name\":null,\r\n             \"tier\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--parse", $("Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).")).option("--name <name>", $("Set the name value.")).option("--tier <tier>", $("Set the tier value.")).execute(function __46(options, _) { var fileContent, parametersObj, error, paramPath, updatedContent; var __frame = { name: "__46", line: 3059 }; return __func(_, this, arguments, __46, 1, __frame, function __$__46() {







      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__46() { return (function __$__46(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__46() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "replace";
          options.path = "/sku";
          error = jsonpatch.validate([{ op: "remove", path: options.path },], parametersObj);
          if ((typeof error !== "undefined")) {
            jsonpatch.apply(parametersObj, [{ op: "add", path: options.path, value: { } },]); } ;

          paramPath = ((options.path + "/") + "name");
          if (options.name) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.name));
            cli.output.verbose("================================================");
            if ((options.parse && options.name)) {
              options.name = JSON.parse(options.name); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.name },]); } ;

          paramPath = ((options.path + "/") + "tier");
          if (options.tier) {
            cli.output.verbose("================================================");
            cli.output.verbose(("Path  : " + paramPath));
            cli.output.verbose(("Value : " + options.tier));
            cli.output.verbose("================================================");
            if ((options.parse && options.tier)) {
              options.tier = JSON.parse(options.tier); } ;

            jsonpatch.apply(parametersObj, [{ op: options.operation, path: paramPath, value: options.tier },]); } ;

          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });



  var catparametersUpdateSnapshotsSku1S1 = cli.category("managed-snapshot");
  var parametersUpdateSnapshotsSku1S1 = catparametersUpdateSnapshotsSku1S1.category("update-parameters").description($("Commands to manage configuration of snapshots in the parameter file."));

  var deleteparametersUpdateSnapshotsSku1S1 = parametersUpdateSnapshotsSku1S1.category("sku").description($("Commands to configure sku of managed-snapshot in update-parameters file."));

  deleteparametersUpdateSnapshotsSku1S1.command("delete").description($("Remove sku in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           \"sku\" : {\r\n             \"name\":null,\r\n             \"tier\":\"\"\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, 'vmss show/list/stop' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas 'vmss config * generate/create/set/delete/add' commands \r\n         are used to configure the input parameter file. The 'vmss config' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.")).usage("[options]").option("--parameter-file <parameter-file>", $("The parameter file path.")).option("--name", $("Remove the name value.")).option("--tier", $("Remove the tier value.")).execute(function __47(options, _) { var fileContent, parametersObj, anySubItem, subItemPath, updatedContent; var __frame = { name: "__47", line: 3123 }; return __func(_, this, arguments, __47, 1, __frame, function __$__47() {






      return cli.output.verbose(JSON.stringify(options), __cb(_, __frame, 1, 15, function __$__47() { return (function __$__47(__then) {
          if (!options.parameterFile) {
            return cli.interaction.promptIfNotGiven($("parameter-file : "), options.parameterFile, __cb(_, __frame, 3, 46, function ___(__0, __1) { options.parameterFile = __1; __then(); }, true)); } else { __then(); } ; })(function __$__47() {


          cli.output.verbose("=====================================");
          cli.output.verbose((("Reading file content from: \"" + options.parameterFile) + "\""));
          cli.output.verbose("=====================================");
          fileContent = fs.readFileSync(options.parameterFile, "utf8");
          parametersObj = JSON.parse(fileContent);
          cli.output.verbose("JSON object:");
          cli.output.verbose(JSON.stringify(parametersObj));
          options.operation = "remove";
          options.path = "/sku";
          anySubItem = ((false || options.name) || options.tier);
          if (anySubItem) {
            subItemPath = null;
            if (options.name) {
              subItemPath = (options.path + "/name");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ;

            if (options.tier) {
              subItemPath = (options.path + "/tier");
              jsonpatch.apply(parametersObj, [{ op: options.operation, path: subItemPath },]); } ; }


           else {
            jsonpatch.apply(parametersObj, [{ op: options.operation, path: options.path },]); } ;


          updatedContent = JSON.stringify(parametersObj);
          cli.output.verbose("=====================================");
          cli.output.verbose("JSON object (updated):");
          cli.output.verbose(JSON.stringify(parametersObj));
          cli.output.verbose("=====================================");
          fs.writeFileSync(options.parameterFile, beautify(updatedContent));
          cli.output.verbose("=====================================");
          cli.output.verbose(("Parameter file updated at: " + options.parameterFile));
          cli.output.verbose("====================================="); _(); }); }, true)); }); });};
