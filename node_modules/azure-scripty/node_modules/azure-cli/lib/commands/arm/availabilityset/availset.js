/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; var utils = require("../../../util/utils");


var AvailsetClient = require("./availsetClient");

var $ = utils.getLocaleString;

exports.init = function(cli) {

  var availset = cli.category("availset").description($("Commands to manage your availablilty sets"));


  availset.command("create [resource-group] [name] [location] [tags]").description($("Creates an availability set within a resource group")).usage("[options] <resource-group> <name> <location> [tags]").option("-g, --resource-group <resource-group>", $("the resource group name")).option("-n, --name <name>", $("the availability set name")).option("-l, --location <location>", $("the location")).option("-t, --tags <tags>", $("the semicolon separated list of tags")).option("-s, --subscription <subscription>", $("the subscription identifier")).option("-a, --platform-update-domain-count <platformUpdateDomainCount>", $("Set the platform-update-domain-count value.")).option("-b, --platform-fault-domain-count <platformFaultDomainCount>", $("Set the platform-fault-domain-count value.")).execute(function __1(resourceGroup, name, location, tags, options, _) { var availsetClient; var __frame = { name: "__1", line: 23 }; return __func(_, this, arguments, __1, 5, __frame, function __$__1() {










      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Availability set name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 33, function ___(__0, __3) { location = __3;
            availsetClient = new AvailsetClient(cli, options.subscription);
            return availsetClient.createAvailSet(resourceGroup, name, location, tags, options, __cb(_, __frame, 5, 21, function __$__1() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  availset.command("list [resource-group]").description($("Lists the availability sets within a resource group")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the resource group name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, options, _) { var availsetClient; var __frame = { name: "__2", line: 36 }; return __func(_, this, arguments, __2, 2, __frame, function __$__2() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        availsetClient = new AvailsetClient(cli, options.subscription);
        return availsetClient.listAvailSet(resourceGroup, options, __cb(_, __frame, 3, 21, function __$__2() { _(); }, true)); }, true)); }); });


  availset.command("show [resource-group] [name]").description($("Gets one availability set within a resource group")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resourceGroup>", $("the resource group name")).option("-n, --name <name>", $("the availability set name")).option("-d, --depth <depth>", $("the number of times to recurse, to recurse indefinitely pass \"full\". (valid only with --json option)")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, name, options, _) { var availsetClient; var __frame = { name: "__3", line: 49 }; return __func(_, this, arguments, __3, 3, __frame, function __$__3() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Availability set name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          availsetClient = new AvailsetClient(cli, options.subscription);
          return availsetClient.showAvailSet(resourceGroup, name, options, __cb(_, __frame, 4, 23, function __$__3() { _(); }, true)); }, true)); }, true)); }); });


  availset.command("delete [resourceGroup] [name]").description($("Deletes one availability set within a resource group")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the resource group name")).option("-n, --name <name>", $("the virtual machine name")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, name, options, _) { var availsetClient; var __frame = { name: "__4", line: 63 }; return __func(_, this, arguments, __4, 3, __frame, function __$__4() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Availability machine name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          availsetClient = new AvailsetClient(cli, options.subscription);
          return availsetClient.deleteAvailSet(resourceGroup, name, options, __cb(_, __frame, 4, 23, function __$__4() { _(); }, true)); }, true)); }, true)); }); });};
