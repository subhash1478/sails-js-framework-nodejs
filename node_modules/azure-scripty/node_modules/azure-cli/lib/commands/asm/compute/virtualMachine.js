/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; var profile = require("../../../util/profile");

































































var utils = require("../../../util/utils");

var $ = utils.getLocaleString;
function capitalize(str) {
  if ((str && (str.length >= 1))) {
    return (str.charAt(0).toUpperCase() + str.slice(1)); }

   else {
    return str; } ;};



function makeTuple(k, v, d) {
  return { key: k, value: v, depth: d };};


function displayImpl(o, key, depth, arr) {
  if (((!!o) && (((o.constructor === Object) || (o.constructor === Array))))) {
    arr.push(makeTuple(key, "", depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = ((o.constructor === Array) ? "#" : "");
      var w = displayImpl(v1, (p1 + k1), (depth + 1), arr);
      if ((w > len)) {
        len = w; } ; });


    return len; }

   else {
    arr.push(makeTuple(key, (o ? o.toString() : ""), depth));
    return ((depth * 2) + ((key ? key.toString().length : 0))); } ;};



function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, "", 0, arr);
  for (var t in arr) {
    var prebuf = new Array((arr[t].depth * 2)).join(" ");
    var key = (arr[t].key ? arr[t].key : "");
    var postLen = (width - ((prebuf.length + key.length)));
    var postbuf = new Array(((postLen > 0) ? postLen : 0)).join(" ");
    var str = ((prebuf + capitalize(key)) + postbuf);
    if (arr[t].value) {
      str += (" : " + arr[t].value); } ;

    cli.output.data(str); };};


exports.init = function(cli) {










  var virtualMachineDelete = cli.category("compute").description("Commands to invoke service management operations.").category("virtual-machine").description($("Commands to manage your virtual machine.  "));

  virtualMachineDelete.command("delete [service-name] [name] [virtual-machine-name] [delete-from-storage]").description($("The Delete Role operation deletes the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx for more information)")).usage("[options] <service-name> <name> <virtual-machine-name> <delete-from-storage>").option("--service-name <service-name>", $("service-name")).option("-n, --name <name>", $("name")).option("--virtual-machine-name <virtual-machine-name>", $("virtual-machine-name")).option("--delete-from-storage <delete-from-storage>", $("delete-from-storage")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __1(serviceName, name, virtualMachineName, deleteFromStorage, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__1", line: 139 }; return __func(_, this, arguments, __1, 5, __frame, function __$__1() { return (function __$__1(__then) {








        if (!serviceName) {
          return cli.interaction.promptIfNotGiven($("service-name : "), serviceName, __cb(_, __frame, 2, 36, function ___(__0, __1) { serviceName = __1; __then(); }, true)); } else { __then(); } ; })(function __$__1() {


        cli.output.verbose(("serviceName = " + serviceName)); return (function __$__1(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__1() {


          cli.output.verbose(("name = " + name)); return (function __$__1(__then) {
            if (!virtualMachineName) {
              return cli.interaction.promptIfNotGiven($("virtual-machine-name : "), virtualMachineName, __cb(_, __frame, 12, 43, function ___(__0, __3) { virtualMachineName = __3; __then(); }, true)); } else { __then(); } ; })(function __$__1() {


            cli.output.verbose(("virtualMachineName = " + virtualMachineName)); return (function __$__1(__then) {
              if (!deleteFromStorage) {
                return cli.interaction.promptIfNotGiven($("delete-from-storage : "), deleteFromStorage, __cb(_, __frame, 17, 42, function ___(__0, __4) { deleteFromStorage = __4; __then(); }, true)); } else { __then(); } ; })(function __$__1() {


              cli.output.verbose(("deleteFromStorage = " + deleteFromStorage));
              subscription = profile.current.getSubscription(options.subscription);
              computeManagementClient = utils.createComputeClient(subscription);
              return computeManagementClient.virtualMachines.deleteMethod(serviceName, name, virtualMachineName, deleteFromStorage, __cb(_, __frame, 23, 57, function ___(__0, __5) { result = __5;
                if (result) {
                  cli.output.json(result); } ; _(); }, true)); }); }); }); }); }); });








  var virtualMachineGet = cli.category("compute").description("Commands to invoke service management operations.").category("virtual-machine").description($("Commands to manage your virtual machine.  "));

  virtualMachineGet.command("show [service-name] [name] [virtual-machine-name]").description($("The Get Role operation retrieves information about the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157193.aspx for more information)")).usage("[options] <service-name> <name> <virtual-machine-name>").option("--service-name <service-name>", $("service-name")).option("-n, --name <name>", $("name")).option("--virtual-machine-name <virtual-machine-name>", $("virtual-machine-name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __2(serviceName, name, virtualMachineName, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__2", line: 182 }; return __func(_, this, arguments, __2, 4, __frame, function __$__2() { return (function __$__2(__then) {







        if (!serviceName) {
          return cli.interaction.promptIfNotGiven($("service-name : "), serviceName, __cb(_, __frame, 2, 36, function ___(__0, __1) { serviceName = __1; __then(); }, true)); } else { __then(); } ; })(function __$__2() {


        cli.output.verbose(("serviceName = " + serviceName)); return (function __$__2(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__2() {


          cli.output.verbose(("name = " + name)); return (function __$__2(__then) {
            if (!virtualMachineName) {
              return cli.interaction.promptIfNotGiven($("virtual-machine-name : "), virtualMachineName, __cb(_, __frame, 12, 43, function ___(__0, __3) { virtualMachineName = __3; __then(); }, true)); } else { __then(); } ; })(function __$__2() {


            cli.output.verbose(("virtualMachineName = " + virtualMachineName));
            subscription = profile.current.getSubscription(options.subscription);
            computeManagementClient = utils.createComputeClient(subscription);
            return computeManagementClient.virtualMachines.get(serviceName, name, virtualMachineName, __cb(_, __frame, 18, 57, function ___(__0, __4) { result = __4;
              if (cli.output.format().json) {
                cli.output.json(result); }

               else {
                display(cli, result); } ; _(); }, true)); }); }); }); }); });








  var virtualMachineGetRemoteDesktopFile = cli.category("compute").description("Commands to invoke service management operations.").category("virtual-machine").description($("Commands to manage your virtual machine.  "));

  virtualMachineGetRemoteDesktopFile.command("get-remote-desktop-file [service-name] [name] [virtual-machine-name]").description($("The Download RDP file operation retrieves the Remote Desktop Protocol configuration file from the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157183.aspx for more information)")).usage("[options] <service-name> <name> <virtual-machine-name>").option("--service-name <service-name>", $("service-name")).option("-n, --name <name>", $("name")).option("--virtual-machine-name <virtual-machine-name>", $("virtual-machine-name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __3(serviceName, name, virtualMachineName, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__3", line: 223 }; return __func(_, this, arguments, __3, 4, __frame, function __$__3() { return (function __$__3(__then) {







        if (!serviceName) {
          return cli.interaction.promptIfNotGiven($("service-name : "), serviceName, __cb(_, __frame, 2, 36, function ___(__0, __1) { serviceName = __1; __then(); }, true)); } else { __then(); } ; })(function __$__3() {


        cli.output.verbose(("serviceName = " + serviceName)); return (function __$__3(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__3() {


          cli.output.verbose(("name = " + name)); return (function __$__3(__then) {
            if (!virtualMachineName) {
              return cli.interaction.promptIfNotGiven($("virtual-machine-name : "), virtualMachineName, __cb(_, __frame, 12, 43, function ___(__0, __3) { virtualMachineName = __3; __then(); }, true)); } else { __then(); } ; })(function __$__3() {


            cli.output.verbose(("virtualMachineName = " + virtualMachineName));
            subscription = profile.current.getSubscription(options.subscription);
            computeManagementClient = utils.createComputeClient(subscription);
            return computeManagementClient.virtualMachines.getRemoteDesktopFile(serviceName, name, virtualMachineName, __cb(_, __frame, 18, 57, function ___(__0, __4) { result = __4;
              if (result) {
                cli.output.json(result); } ; _(); }, true)); }); }); }); }); });








  var virtualMachineInitiateMaintenance = cli.category("compute").description("Commands to invoke service management operations.").category("virtual-machine").description($("Commands to manage your virtual machine.  "));

  virtualMachineInitiateMaintenance.command("initiate-maintenance [service-name] [name] [virtual-machine-name]").description($("The Initiate Maintenance on role operation initiates maintenance on the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for more information)")).usage("[options] <service-name> <name> <virtual-machine-name>").option("--service-name <service-name>", $("service-name")).option("-n, --name <name>", $("name")).option("--virtual-machine-name <virtual-machine-name>", $("virtual-machine-name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __4(serviceName, name, virtualMachineName, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__4", line: 261 }; return __func(_, this, arguments, __4, 4, __frame, function __$__4() { return (function __$__4(__then) {







        if (!serviceName) {
          return cli.interaction.promptIfNotGiven($("service-name : "), serviceName, __cb(_, __frame, 2, 36, function ___(__0, __1) { serviceName = __1; __then(); }, true)); } else { __then(); } ; })(function __$__4() {


        cli.output.verbose(("serviceName = " + serviceName)); return (function __$__4(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__4() {


          cli.output.verbose(("name = " + name)); return (function __$__4(__then) {
            if (!virtualMachineName) {
              return cli.interaction.promptIfNotGiven($("virtual-machine-name : "), virtualMachineName, __cb(_, __frame, 12, 43, function ___(__0, __3) { virtualMachineName = __3; __then(); }, true)); } else { __then(); } ; })(function __$__4() {


            cli.output.verbose(("virtualMachineName = " + virtualMachineName));
            subscription = profile.current.getSubscription(options.subscription);
            computeManagementClient = utils.createComputeClient(subscription);
            return computeManagementClient.virtualMachines.initiateMaintenance(serviceName, name, virtualMachineName, __cb(_, __frame, 18, 57, function ___(__0, __4) { result = __4;
              if (result) {
                cli.output.json(result); } ; _(); }, true)); }); }); }); }); });








  var virtualMachineRedeploy = cli.category("compute").description("Commands to invoke service management operations.").category("virtual-machine").description($("Commands to manage your virtual machine.  "));

  virtualMachineRedeploy.command("redeploy [service-name] [name] [virtual-machine-name]").description($("The Redeploy role operation redeploys the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for more information)")).usage("[options] <service-name> <name> <virtual-machine-name>").option("--service-name <service-name>", $("service-name")).option("-n, --name <name>", $("name")).option("--virtual-machine-name <virtual-machine-name>", $("virtual-machine-name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __5(serviceName, name, virtualMachineName, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__5", line: 299 }; return __func(_, this, arguments, __5, 4, __frame, function __$__5() { return (function __$__5(__then) {







        if (!serviceName) {
          return cli.interaction.promptIfNotGiven($("service-name : "), serviceName, __cb(_, __frame, 2, 36, function ___(__0, __1) { serviceName = __1; __then(); }, true)); } else { __then(); } ; })(function __$__5() {


        cli.output.verbose(("serviceName = " + serviceName)); return (function __$__5(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__5() {


          cli.output.verbose(("name = " + name)); return (function __$__5(__then) {
            if (!virtualMachineName) {
              return cli.interaction.promptIfNotGiven($("virtual-machine-name : "), virtualMachineName, __cb(_, __frame, 12, 43, function ___(__0, __3) { virtualMachineName = __3; __then(); }, true)); } else { __then(); } ; })(function __$__5() {


            cli.output.verbose(("virtualMachineName = " + virtualMachineName));
            subscription = profile.current.getSubscription(options.subscription);
            computeManagementClient = utils.createComputeClient(subscription);
            return computeManagementClient.virtualMachines.redeploy(serviceName, name, virtualMachineName, __cb(_, __frame, 18, 57, function ___(__0, __4) { result = __4;
              if (result) {
                cli.output.json(result); } ; _(); }, true)); }); }); }); }); });








  var virtualMachineRestart = cli.category("compute").description("Commands to invoke service management operations.").category("virtual-machine").description($("Commands to manage your virtual machine.  "));

  virtualMachineRestart.command("restart [service-name] [name] [virtual-machine-name]").description($("The Restart role operation restarts the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for more information)")).usage("[options] <service-name> <name> <virtual-machine-name>").option("--service-name <service-name>", $("service-name")).option("-n, --name <name>", $("name")).option("--virtual-machine-name <virtual-machine-name>", $("virtual-machine-name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __6(serviceName, name, virtualMachineName, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__6", line: 337 }; return __func(_, this, arguments, __6, 4, __frame, function __$__6() { return (function __$__6(__then) {







        if (!serviceName) {
          return cli.interaction.promptIfNotGiven($("service-name : "), serviceName, __cb(_, __frame, 2, 36, function ___(__0, __1) { serviceName = __1; __then(); }, true)); } else { __then(); } ; })(function __$__6() {


        cli.output.verbose(("serviceName = " + serviceName)); return (function __$__6(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__6() {


          cli.output.verbose(("name = " + name)); return (function __$__6(__then) {
            if (!virtualMachineName) {
              return cli.interaction.promptIfNotGiven($("virtual-machine-name : "), virtualMachineName, __cb(_, __frame, 12, 43, function ___(__0, __3) { virtualMachineName = __3; __then(); }, true)); } else { __then(); } ; })(function __$__6() {


            cli.output.verbose(("virtualMachineName = " + virtualMachineName));
            subscription = profile.current.getSubscription(options.subscription);
            computeManagementClient = utils.createComputeClient(subscription);
            return computeManagementClient.virtualMachines.restart(serviceName, name, virtualMachineName, __cb(_, __frame, 18, 57, function ___(__0, __4) { result = __4;
              if (result) {
                cli.output.json(result); } ; _(); }, true)); }); }); }); }); });








  var virtualMachineStart = cli.category("compute").description("Commands to invoke service management operations.").category("virtual-machine").description($("Commands to manage your virtual machine.  "));

  virtualMachineStart.command("start [service-name] [name] [virtual-machine-name]").description($("The Start Role operation starts the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx for more information)")).usage("[options] <service-name> <name> <virtual-machine-name>").option("--service-name <service-name>", $("service-name")).option("-n, --name <name>", $("name")).option("--virtual-machine-name <virtual-machine-name>", $("virtual-machine-name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __7(serviceName, name, virtualMachineName, options, _) { var subscription, computeManagementClient, result; var __frame = { name: "__7", line: 375 }; return __func(_, this, arguments, __7, 4, __frame, function __$__7() { return (function __$__7(__then) {







        if (!serviceName) {
          return cli.interaction.promptIfNotGiven($("service-name : "), serviceName, __cb(_, __frame, 2, 36, function ___(__0, __1) { serviceName = __1; __then(); }, true)); } else { __then(); } ; })(function __$__7() {


        cli.output.verbose(("serviceName = " + serviceName)); return (function __$__7(__then) {
          if (!name) {
            return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 7, 29, function ___(__0, __2) { name = __2; __then(); }, true)); } else { __then(); } ; })(function __$__7() {


          cli.output.verbose(("name = " + name)); return (function __$__7(__then) {
            if (!virtualMachineName) {
              return cli.interaction.promptIfNotGiven($("virtual-machine-name : "), virtualMachineName, __cb(_, __frame, 12, 43, function ___(__0, __3) { virtualMachineName = __3; __then(); }, true)); } else { __then(); } ; })(function __$__7() {


            cli.output.verbose(("virtualMachineName = " + virtualMachineName));
            subscription = profile.current.getSubscription(options.subscription);
            computeManagementClient = utils.createComputeClient(subscription);
            return computeManagementClient.virtualMachines.start(serviceName, name, virtualMachineName, __cb(_, __frame, 18, 57, function ___(__0, __4) { result = __4;
              if (result) {
                cli.output.json(result); } ; _(); }, true)); }); }); }); }); });};
